{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/TIL/22.02.05/",
    "result": {"data":{"cur":{"id":"64eb962f-f356-5fc8-8a5b-e5ef76edee4c","html":"<h1 id=\"자바로-구현하고-배우는-자료구조-수강\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B3%A0-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%88%98%EA%B0%95\" aria-label=\"자바로 구현하고 배우는 자료구조 수강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://www.boostcourse.org/cs204\">자바로 구현하고 배우는 자료구조</a> 수강</h1>\n<blockquote>\n<h2 id=\"red-black-tree---규칙\" style=\"position:relative;\"><a href=\"#red-black-tree---%EA%B7%9C%EC%B9%99\" aria-label=\"red black tree   규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Red Black Tree - 규칙</h2>\n</blockquote>\n<p>Red Black Tree는  자가 균형 이진 탐색 트리로서, AVL 트리처럼 스스로 균형을 잡는 트리이다.</p>\n<h3 id=\"규칙\" style=\"position:relative;\"><a href=\"#%EA%B7%9C%EC%B9%99\" aria-label=\"규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>규칙</h3>\n<ol>\n<li>모든 노드는 빨간색이나 검은색</li>\n<li>루트는 항상 검은색</li>\n<li>새로 추가되는 노드는 항상 빨간색</li>\n<li>루트에서 잎 노드로 가는 모든 경로에는 같은 수의 검은색 노드가 있어야 한다.</li>\n<li>어떤 경로에서도 빨간색 노드 2개가 연속으로 있어서는 안 된다.</li>\n<li>모든 빈 노드는 검은색이라고 가정한다.</li>\n</ol>\n<h3 id=\"균형을-맞추는-방법\" style=\"position:relative;\"><a href=\"#%EA%B7%A0%ED%98%95%EC%9D%84-%EB%A7%9E%EC%B6%94%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"균형을 맞추는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>균형을 맞추는 방법</h3>\n<ol>\n<li>이모 노드가 검은색일 경우\n<ul>\n<li>회전을 한다. 회전을 하고 나면 부모 노드는 검은색, 두 자식 노드는 빨간색이 되어야 한다.</li>\n</ul>\n</li>\n<li>이모 노드가 빨간색일 경우\n<ul>\n<li>색상 전환을 한다. 색상 전환을 하고 나면 조부모 노드는 빨간색, 부모와 이모 노드는 검은색이 되어야 한다. (단 조부모 노드가 루트인 경우 조부모 노드를 다시 검은색으로 색상 전환을 한다.)</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"생각해보기\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"생각해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>Red Black Tree에서 검은색 노드 2개가 연속으로 있는 경우는 가능한가요?</li>\n</ul>\n<blockquote>\n<h2 id=\"red-black-tree---red-black-tree\" style=\"position:relative;\"><a href=\"#red-black-tree---red-black-tree\" aria-label=\"red black tree   red black tree permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Red Black Tree - Red Black Tree</h2>\n</blockquote>\n<p><img src=\"/6fc5d2d50ad5eb0276684f4e42585902/RedBlackTree.png\" alt=\"RedBlackTree.PNG\"></p>\n<ul>\n<li>1~10까지의 숫자들을 레드 블랙 트리 규칙에 따라 배열</li>\n<li>1부터 숫자들을 하나씩 추가하면서 규칙에 적합한지 확인</li>\n<li>규칙을 위반하면 회전과 색상 전환으로 규칙에 맞게 바꾸어 주면 된다.</li>\n</ul>\n<h3 id=\"생각해보기-1\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-1\" aria-label=\"생각해보기 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>회전과 색상 전환을 사용하여 1~10까지의 숫자들이 있는 레드 블랙 트리를 스스로 만들어보세요.</li>\n</ul>\n<blockquote>\n<h2 id=\"red-black-tree---클래스\" style=\"position:relative;\"><a href=\"#red-black-tree---%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"red black tree   클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Red Black Tree - 클래스</h2>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedBlackTree</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RedBlackI</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> root<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token class-name\">K</span> key<span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token class-name\">V</span> value<span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">boolean</span> isLeftChild<span class=\"token punctuation\">,</span> black<span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\r\n\t\t\tleft <span class=\"token operator\">=</span> right <span class=\"token operator\">=</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\r\n\t\t\tblack <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n\t\t\tisLeftChild <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>불리언 값을 가진 black으로 참이면 검은색, 거짓이면 빨간색을 표시</li>\n<li>이모 노드를 알아내기 위해 left, right, parent 노드를 가리키는 포인터뿐만 아니라 불리언 값을 가진 isLeftChild를 사용</li>\n</ul>\n<h3 id=\"생각해보기-2\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-2\" aria-label=\"생각해보기 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>isLeftChild가 참이면 이모 노드는 어떻게 찾을 수 있나요?</li>\n</ul>\n<blockquote>\n<h2 id=\"red-black-tree---add-메소드\" style=\"position:relative;\"><a href=\"#red-black-tree---add-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"red black tree   add 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Red Black Tree - add 메소드</h2>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// 트리가 비어있을 경우</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\troot <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\r\n\t\troot<span class=\"token punctuation\">.</span>black <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n\t\tsize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token comment\">// 트리에 노드가 있으면 재귀 메소드 사용</span>\r\n\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\tsize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token comment\">// add 재귀함수, 내부클래스</span>\r\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> add <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> parent<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token comment\">// newNode의 data가 parent의 data보다 크면 트리의 오른쪽에 추가</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> newNode<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t\tparent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\r\n\t\t\tnewNode<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\r\n\t\t\tnewNode<span class=\"token punctuation\">.</span>isLeftChild<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token punctuation\">}</span>\r\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// newNode의 data가 parent의 data보다 작거나 같으면 트리의 왼쪽에 추가</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\tparent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\r\n\t\tnewNode<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\r\n\t\tnewNode<span class=\"token punctuation\">.</span>isLeftChild<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// 레드 블랙 트리가 규칙에 맞게 잘 되어있는지 확인</span>\r\n\t<span class=\"token function\">checkColor</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"생각해보기-3\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-3\" aria-label=\"생각해보기 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>checkColor 메소드는 왜 필요한가요?</li>\n</ul>\n<hr>\n<h2 id=\"-틀렸거나-잘못된-정보가-있다면-망설임-없이-댓글로-알려주세요\" style=\"position:relative;\"><a href=\"#-%ED%8B%80%EB%A0%B8%EA%B1%B0%EB%82%98-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%A7%9D%EC%84%A4%EC%9E%84-%EC%97%86%EC%9D%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\" 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요!</h2>","excerpt":"자바로 구현하고 배우는 자료구조 수강 Red Black Tree - 규칙 Red Black Tree는  자가 균형 이진 탐색 트리로서, AVL 트리처럼 스스로 균형을 잡는 트리이다. 규칙 모든 노드는 빨간색이나 검은색 루트는 항상 검은색 새로 추가되는 노드는 항상 빨간색 루트에서 잎 노드로 가는 모든 경로에는 같은 수의 검은색 노드가 있어야 한다. 어떤 경로에서도 빨간색 노드 2개가 연속으로 있어서는 안 된다. 모든 빈 노드는 검은색이라고 가정한다. 균형을 맞추는 방법 이모 노드가 검은색일 경우 회전을 한다. 회전을 하고 나면 부모 노드는 검은색, 두 자식 노드는 빨간색이 되어야 한다. 이모 노드가 빨간색일 경우 색상 전환을 한다. 색상 전환을 하고 나면 조부모 노드는 빨간색, 부모와 이모 노드는 검은색이 되어야 한다. (단 조부모 노드가 루트인 경우 조부모 노드를 다시 검은색으로 색상 전환을 한다.) 생각해보기 Red Black Tree에서 검은색 노드 2개가 연속으로 있는 경우…","frontmatter":{"date":"February 05, 2022","title":"22.02.05 TIL","categories":"TIL","author":"95Donguk","emoji":"❗"},"fields":{"slug":"/TIL/22.02.05/"}},"next":{"id":"cb85ed9a-5f18-5892-9126-88fe2c530c8b","html":"<h1 id=\"자바로-구현하고-배우는-자료구조-수강\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B3%A0-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%88%98%EA%B0%95\" aria-label=\"자바로 구현하고 배우는 자료구조 수강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://www.boostcourse.org/cs204\">자바로 구현하고 배우는 자료구조</a> 수강</h1>\n<blockquote>\n<h2 id=\"avl-tree---소개\" style=\"position:relative;\"><a href=\"#avl-tree---%EC%86%8C%EA%B0%9C\" aria-label=\"avl tree   소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AVL Tree - 소개</h2>\n</blockquote>\n<p>AVL 트리는 스스로 <strong>균형</strong>을 잡는 이진 탐색 트리</p>\n<p>AVL 트리에서는 <strong>왼쪽과 오른쪽의 높이 차이가 항상 1보다 작거나 같아야</strong> 한다.</p>\n<p><img src=\"/efd2c0dac87efa94791eced65af72081/AVLtree_intro.png\" alt=\"AVLtree_intro.PNG\"></p>\n<h3 id=\"생각해보기\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"생각해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>AVL 트리를 구현하는 데 어떤 기능이 필요할까요?</li>\n</ul>\n<blockquote>\n<h2 id=\"avl-tree---노드\" style=\"position:relative;\"><a href=\"#avl-tree---%EB%85%B8%EB%93%9C\" aria-label=\"avl tree   노드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AVL Tree - 노드</h2>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token class-name\">T</span> data<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> left<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> right<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> parent<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// 생성자</span>\r\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\tdata <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\r\n\t\tparent <span class=\"token operator\">=</span> left <span class=\"token operator\">=</span> right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>left, right 노드뿐만 아니라, 기능을 간단하게 구현하기 위한 부모 노드에 대한 포인터도 있다.</li>\n</ul>\n<h3 id=\"생각해보기-1\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-1\" aria-label=\"생각해보기 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>left 노드, right 노드, 부모 노드의 포인터는 각각 어떤 곳을 가리킬까요?</li>\n</ul>\n<blockquote>\n<h2 id=\"avl-tree---add-메소드\" style=\"position:relative;\"><a href=\"#avl-tree---add-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"avl tree   add 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AVL Tree - add 메소드</h2>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// AVL 클래스의 생성자</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">AVLTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\troot <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\r\n\tcurrentSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token comment\">// add 메소드</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// 트리가 비어있을 경우</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\troot <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\r\n\t\tcurrentSize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token comment\">// 트리에 노드가 있으면 add 메소드를 재귀로 호출</span>\r\n\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>AVL 트리의 클래스 생성자, add 메소드에 대한 코드</li>\n<li>클래스를 생성 후, 트리가 비어있으면 노드를 추가하고 비어있지 않는다면 add 메소드를 재귀로 호출한다.</li>\n</ul>\n<h3 id=\"생각해보기-2\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-2\" aria-label=\"생각해보기 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>트리에 노드가 있으면 add 메소드를 재귀로 호출하는 이유는 무엇인가요?</li>\n</ul>\n<blockquote>\n<h2 id=\"avl-tree---재귀-add-메소드\" style=\"position:relative;\"><a href=\"#avl-tree---%EC%9E%AC%EA%B7%80-add-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"avl tree   재귀 add 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AVL Tree - 재귀 add 메소드</h2>\n</blockquote>\n<p>이전의 add 메소드에서 재귀로 호출되는 add 메소드</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> parent<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token comment\">// newNode의 data가 parent의 data보다 크면 트리의 오른쪽에 추가</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>newNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t\tparent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\r\n\t\t\tnewNode<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\r\n\t\t\tcurrentSize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token punctuation\">}</span>\r\n\t\t<span class=\"token keyword\">else</span>\r\n\t\t\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// newNode의 data가 parent의 data보다 작거나 같으면 트리의 왼쪽에 추가</span>\r\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t\tparent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\r\n\t\t\tnewNode<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\r\n\t\t\tcurrentSize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token punctuation\">}</span>\r\n\t\t<span class=\"token keyword\">else</span>\r\n\t\t\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// AVL트리가 규칙에 맞게 잘 되어있는지 확인</span>\r\n\t<span class=\"token function\">checkBalance</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<h2 id=\"avl-tree---균형-확인-메소드\" style=\"position:relative;\"><a href=\"#avl-tree---%EA%B7%A0%ED%98%95-%ED%99%95%EC%9D%B8-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"avl tree   균형 확인 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AVL Tree - 균형 확인 메소드</h2>\n</blockquote>\n<p>AVL 트리에서의 규칙은 왼쪽과 오른쪽의 높이 차이가 항상 1보다 작거나 같아야 한다.  따라서, 노드를 추가하였을 때 높이의 차이가 1보다 커지면 회전을 하여 트리의 균형을 맞춰주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkBalance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token comment\">// 높이 차이가 1 초과 혹은 -1 미만 (AVL 트리 규칙 위반)</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token function\">rebalance</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// 부모 노드를 계속 확인해서 루트까지 간다.</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token function\">checkBalance</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>트리의 높이 차이를 확인하고 균형을 맞추는 checkBalance 코드</li>\n</ul>\n<h3 id=\"생각해보기-3\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-3\" aria-label=\"생각해보기 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>checkBalance 메소드에서 새로 추가한 노드뿐만 아니라 모든 부모 노드를 확인해야 하는 이유는 무엇인가요?</li>\n</ul>\n<blockquote>\n<h2 id=\"avl-tree---rebalance-메소드\" style=\"position:relative;\"><a href=\"#avl-tree---rebalance-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"avl tree   rebalance 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AVL Tree - Rebalance 메소드</h2>\n</blockquote>\n<p>Rebalance 메소드는 <strong>어느 쪽에서 균형이 깨졌는지 확인하고 회전을 하여 균형을 유지</strong>한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rebalance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token comment\">// 왼쪽 자식 > 오른쪽 자식</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 왼쪽 서브 트리 > 오른쪽 서브 트리</span>\r\n\t\t\tnode <span class=\"token operator\">=</span> <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 우측 회전</span>\r\n\t\t<span class=\"token keyword\">else</span> <span class=\"token comment\">// 왼쪽 서브 트리 &lt; 오른쪽 서브 트리</span>\r\n\t\t\tnode <span class=\"token operator\">=</span> <span class=\"token function\">leftRightRotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 좌측-우측 회전</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token comment\">// 왼쪽 자식 &lt; 오른쪽 자식</span>\r\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span> \r\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 왼쪽 서브 트리 > 오른쪽 서브 트리</span>\r\n\t\t\tnode <span class=\"token operator\">=</span> <span class=\"token function\">rightLeftRotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 우측-좌측 회전</span>\r\n\t\t<span class=\"token keyword\">else</span> <span class=\"token comment\">// 왼쪽 서브 트리 &lt; 오른쪽 서브 트리</span>\r\n\t\t\tnode <span class=\"token operator\">=</span> <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 좌측 회전\t</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token comment\">// 루트로 올 때까지 반복</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\r\n\t\troot<span class=\"token operator\">=</span>node<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"생각해보기-4\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-4\" aria-label=\"생각해보기 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>checkBalance 메소드와 Rebalance 메소드의 차이점은 무엇인가요? 각각 어떤 역할을 하나요?</li>\n</ul>\n<blockquote>\n<h2 id=\"avl-tree---adding-data-예제\" style=\"position:relative;\"><a href=\"#avl-tree---adding-data-%EC%98%88%EC%A0%9C\" aria-label=\"avl tree   adding data 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AVL Tree - adding data 예제</h2>\n</blockquote>\n<p><img src=\"/34e6b50bac4d3bb9b9f0d8df164c46cb/AVLtree_example.png\" alt=\"AVLtree_example.PNG\"></p>\n<ul>\n<li>add 메소드를 활용하여 43에 18, 22, 9, 21, 6, 8, 20, 63, 50, 62, 51을 순서대로 추가한 결과</li>\n<li>먼저 트리의 규칙에 따라 내려가 잎에 새로운 데이터를 추가한 뒤 균형이 깨졌는지 확인하고 회전을 하여 균형을 유지하도록 한다.</li>\n</ul>\n<h3 id=\"생각해보기-5\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-5\" aria-label=\"생각해보기 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>우측, 좌측 회전은 각각 어떨 때 필요한가요?</li>\n<li>43에 18, 22, 9, 21, 6, 8, 20, 63, 50, 62, 51을 순서대로 추가한 AVL 트리를 스스로 만들어보세요.</li>\n</ul>\n<hr>\n<h2 id=\"-틀렸거나-잘못된-정보가-있다면-망설임-없이-댓글로-알려주세요\" style=\"position:relative;\"><a href=\"#-%ED%8B%80%EB%A0%B8%EA%B1%B0%EB%82%98-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%A7%9D%EC%84%A4%EC%9E%84-%EC%97%86%EC%9D%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\" 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요!</h2>","frontmatter":{"date":"February 04, 2022","title":"22.02.04 TIL","categories":"TIL","author":"95Donguk","emoji":"❗"},"fields":{"slug":"/TIL/22.02.04/"}},"prev":{"id":"761269ed-3138-5c2a-9607-904ec811a635","html":"<h1 id=\"자바로-구현하고-배우는-자료구조-수강\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B3%A0-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%88%98%EA%B0%95\" aria-label=\"자바로 구현하고 배우는 자료구조 수강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://www.boostcourse.org/cs204\">자바로 구현하고 배우는 자료구조</a> 수강</h1>\n<blockquote>\n<h2 id=\"red-black-tree---색상-확인-메소드\" style=\"position:relative;\"><a href=\"#red-black-tree---%EC%83%89%EC%83%81-%ED%99%95%EC%9D%B8-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"red black tree   색상 확인 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Red Black Tree - 색상 확인 메소드</h2>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token comment\">// 루트는 항상 검은색이므로 색을 확인할 필요가 없다.</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> root<span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// 빨간 노드 2개가 연속으로 나오는 경우 (레드 블랙 트리 규칙 위반)</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">.</span>black <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>black<span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token function\">correctTree</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// 부모 노드를 계속 확인</span>\r\n\t<span class=\"token function\">checkColor</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">correctTree</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token comment\">// node의 부모 노드가 왼쪽 자식이면 이모 노드는 조부모 노드의 오른쪽 자식</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>isLeftChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token comment\">// 이모 노드가 검은색 (이모 노드가 비어있는 경우 포함)</span>\r\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>black<span class=\"token punctuation\">)</span>\r\n\t\t\t<span class=\"token comment\">// 회전</span>\r\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token comment\">//  이모 노드가 빨간색</span>\r\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t\t<span class=\"token comment\">// 색상 변환</span>\r\n\t\t\tnode<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>black <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n\t\t\tnode<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>black <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n\t\t\tnode<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>black <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token comment\">// node의 부모 노드가 오른쪽 자식이면 이모 노드는 조부모 노드의 왼쪽 자식</span>\r\n\t<span class=\"token comment\">// 위 코드와 동일하게 하되, 이모 노드를 node.parent.parent.left로 바꾼다.</span>\r\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token comment\">// 이모 노드가 검은색 (이모 노드가 비어있는 경우 포함)</span>\r\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>black<span class=\"token punctuation\">)</span>\r\n\t\t\t<span class=\"token comment\">// 회전</span>\r\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token comment\">//  이모 노드가 빨간색</span>\r\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token punctuation\">{</span>\r\n\t\t\t<span class=\"token comment\">// 색상 변환</span>\r\n\t\t\tnode<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>black <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n\t\t\tnode<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>black <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n\t\t\tnode<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>black <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"생각해보기\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"생각해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>correctTree 메소드는 어떤 일을 하나요?</li>\n</ul>\n<blockquote>\n<h2 id=\"red-black-tree---rotate-메소드\" style=\"position:relative;\"><a href=\"#red-black-tree---rotate-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"red black tree   rotate 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Red Black Tree - Rotate 메소드</h2>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token comment\">// 현재 노드가 왼쪽 자식</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>isLeftChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token comment\">// 부모 노드가 왼쪽 자식</span>\r\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>isLeftChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t\t<span class=\"token comment\">// 조부모 노드를 우측 회전</span>\r\n\t\t\t<span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\tnode<span class=\"token punctuation\">.</span>black <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n\t\t\tnode<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>black <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\r\n\t\t\t\tnode<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>black <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token punctuation\">}</span>\r\n\t\t<span class=\"token comment\">// 부모 노드가 오른쪽 자식</span>\r\n\t\t<span class=\"token comment\">// 조부모 노드를 우측-좌측 회전</span>\r\n\t\t<span class=\"token function\">rightLeftRotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\tnode<span class=\"token punctuation\">.</span>black <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n\t\tnode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>black <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n\t\tnode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>black <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token comment\">// 현재 노드가 오른쪽 자식일 경우</span>\r\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token comment\">// 부모 노드가 왼쪽 자식</span>\r\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>isLeftChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t\t<span class=\"token comment\">// 조부모 노드를 좌측-우측 회전</span>\r\n\t\t\t<span class=\"token function\">leftRightRotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\tnode<span class=\"token punctuation\">.</span>black <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n\t\t\tnode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>black <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n\t\t\tnode<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>black <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\t\r\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token punctuation\">}</span>\r\n\t\t<span class=\"token comment\">// 부모 노드가 오른쪽 자식</span>\r\n\t\t<span class=\"token comment\">// 조부모 노드를 우측-좌측 회전</span>\r\n\t\t<span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\tnode<span class=\"token punctuation\">.</span>black <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n\t\tnode<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>black <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\r\n\t\t\tnode<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>black <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>현재 노드와 부모 노드가 각각 오른쪽 자식인지 왼쪽 자식인지에 따라 필요한 회전이 달라진다.</li>\n</ul>\n<h3 id=\"생각해보기-1\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-1\" aria-label=\"생각해보기 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>현재 노드가 오른쪽 자식일 경우에 대한 rotate 함수 메소드를 작성해보세요.</li>\n</ul>\n<blockquote>\n<h2 id=\"red-black-tree---좌측-회전\" style=\"position:relative;\"><a href=\"#red-black-tree---%EC%A2%8C%EC%B8%A1-%ED%9A%8C%EC%A0%84\" aria-label=\"red black tree   좌측 회전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Red Black Tree - 좌측 회전</h2>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 좌측 회전: 조부모 노드를 부모 노드의 왼쪽 자식 노드 위치로 옮긴다.</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> leftRotate <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> temp <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\r\n\tnode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// 부모 노드 node.right가 temp가 되면서 조부모 노드가 없어진다.</span>\r\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\tnode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\r\n\t\tnode<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>isLeftChild <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token comment\">// node가 루트인 경우</span>\r\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\troot <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\r\n\t\ttemp<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token comment\">// node가 루트가 아닌 경우</span>\r\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n\t\ttemp<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>isLeftChild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t\ttemp<span class=\"token punctuation\">.</span>isLeftChild <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n\t\t\ttemp<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\t\t\t\r\n\t\t\ttemp<span class=\"token punctuation\">.</span>isLeftChild <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n\t\t\ttemp<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token punctuation\">}</span>\r\n\t\ttemp<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\r\n\t\tnode<span class=\"token punctuation\">.</span>isLeftChild <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n\t\tnode<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"생각해보기-2\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-2\" aria-label=\"생각해보기 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>그림을 그려 leftRotate 메소드가 어떻게 동작하는지 확인해보세요. 그리고 우측 회전에 대한 rightRotate 메소드를 작성해보세요.</li>\n</ul>\n<blockquote>\n<h2 id=\"red-black-tree---좌측-우측-회전\" style=\"position:relative;\"><a href=\"#red-black-tree---%EC%A2%8C%EC%B8%A1-%EC%9A%B0%EC%B8%A1-%ED%9A%8C%EC%A0%84\" aria-label=\"red black tree   좌측 우측 회전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Red Black Tree - 좌측-우측 회전</h2>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 좌측 회전 후 우측 회전</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">leftRightRotate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"생각해보기-3\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-3\" aria-label=\"생각해보기 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>그림을 그려 leftRightRotate 메소드가 어떻게 동작하는지 확인해보세요. 그리고 우측-좌측 회전에 대한 rightLeftRotate 메소드를 작성해보세요.</li>\n</ul>\n<blockquote>\n<h2 id=\"red-black-tree---높이\" style=\"position:relative;\"><a href=\"#red-black-tree---%EB%86%92%EC%9D%B4\" aria-label=\"red black tree   높이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Red Black Tree - 높이</h2>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token comment\">// 트리의 어느 지점에서나 높이는 왼쪽과 오른쪽 중 가장 긴 경로의 길이</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">int</span> leftheight <span class=\"token operator\">=</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 현재 있는 노드까지 오는 데 필요한 간선 수</span>\r\n\t<span class=\"token keyword\">int</span> rightheight <span class=\"token operator\">=</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftheight <span class=\"token operator\">></span> rightheight<span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token keyword\">return</span> leftheight<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">return</span> rightheight<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"생각해보기-4\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-4\" aria-label=\"생각해보기 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>height 함수에서 재귀 함수의 결과인 height(root)에서 1을 빼서 반환해야 하는 이유는 무엇인가요?</li>\n</ul>\n<blockquote>\n<h2 id=\"red-black-tree---검은색-노드-개수\" style=\"position:relative;\"><a href=\"#red-black-tree---%EA%B2%80%EC%9D%80%EC%83%89-%EB%85%B8%EB%93%9C-%EA%B0%9C%EC%88%98\" aria-label=\"red black tree   검은색 노드 개수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Red Black Tree - 검은색 노드 개수</h2>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">blackNodes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">int</span> rightBlackNodes <span class=\"token operator\">=</span> <span class=\"token function\">blackNodes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\r\n\t<span class=\"token keyword\">int</span> leftBlackNodes <span class=\"token operator\">=</span> <span class=\"token function\">blackNodes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\r\n\t<span class=\"token comment\">// 오른쪽과 왼쪽의 검은색 노드 개수가 다르면 에러를 내거나 고쳐준다.</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightBlackNodes <span class=\"token operator\">!=</span> leftBlackNodes<span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token comment\">// throw an error</span>\r\n\t\t<span class=\"token comment\">// or fix the tree</span>\r\n\t<span class=\"token comment\">// 검은색 노드이면 해당 노드의 수를 늘려준다.</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>black<span class=\"token punctuation\">)</span>\r\n\t\tleftBlackNodes<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">return</span> leftBlackNodes<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"생각해보기-5\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-5\" aria-label=\"생각해보기 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>오른쪽과 왼쪽의 검은색 노드 개수가 다르면 레드 블랙 트리의 어떤 규칙을 위반하게 되나요?</li>\n</ul>\n<hr>\n<h2 id=\"-틀렸거나-잘못된-정보가-있다면-망설임-없이-댓글로-알려주세요\" style=\"position:relative;\"><a href=\"#-%ED%8B%80%EB%A0%B8%EA%B1%B0%EB%82%98-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%A7%9D%EC%84%A4%EC%9E%84-%EC%97%86%EC%9D%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\" 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요!</h2>","frontmatter":{"date":"February 06, 2022","title":"22.02.06 TIL","categories":"TIL","author":"95Donguk","emoji":"❗"},"fields":{"slug":"/TIL/22.02.06/"}},"site":{"siteMetadata":{"siteUrl":"https://95donguk.github.io","comments":{"utterances":{"repo":"95Donguk/95Donguk.github.io"}}}}},"pageContext":{"slug":"/TIL/22.02.05/","nextSlug":"/TIL/22.02.04/","prevSlug":"/TIL/22.02.06/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}