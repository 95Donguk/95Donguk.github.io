{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/TIL/22.02.04/22.02.04/",
    "result": {"data":{"cur":{"id":"cadd3d46-36a5-5554-8de5-42fa0a46ae29","html":"<h1 id=\"자바로-구현하고-배우는-자료구조-수강\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B3%A0-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%88%98%EA%B0%95\" aria-label=\"자바로 구현하고 배우는 자료구조 수강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://www.boostcourse.org/cs204\">자바로 구현하고 배우는 자료구조</a> 수강</h1>\n<blockquote>\n<h2 id=\"avl-tree---소개\" style=\"position:relative;\"><a href=\"#avl-tree---%EC%86%8C%EA%B0%9C\" aria-label=\"avl tree   소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AVL Tree - 소개</h2>\n</blockquote>\n<p>AVL 트리는 스스로 <strong>균형</strong>을 잡는 이진 탐색 트리</p>\n<p>AVL 트리에서는 <strong>왼쪽과 오른쪽의 높이 차이가 항상 1보다 작거나 같아야</strong> 한다.</p>\n<p><img src=\"/efd2c0dac87efa94791eced65af72081/AVLtree_intro.png\" alt=\"AVLtree_intro.PNG\"></p>\n<h3 id=\"생각해보기\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"생각해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>AVL 트리를 구현하는 데 어떤 기능이 필요할까요?</li>\n</ul>\n<blockquote>\n<h2 id=\"avl-tree---노드\" style=\"position:relative;\"><a href=\"#avl-tree---%EB%85%B8%EB%93%9C\" aria-label=\"avl tree   노드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AVL Tree - 노드</h2>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token class-name\">T</span> data<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> left<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> right<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> parent<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// 생성자</span>\r\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\tdata <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\r\n\t\tparent <span class=\"token operator\">=</span> left <span class=\"token operator\">=</span> right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>left, right 노드뿐만 아니라, 기능을 간단하게 구현하기 위한 부모 노드에 대한 포인터도 있다.</li>\n</ul>\n<h3 id=\"생각해보기-1\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-1\" aria-label=\"생각해보기 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>left 노드, right 노드, 부모 노드의 포인터는 각각 어떤 곳을 가리킬까요?</li>\n</ul>\n<blockquote>\n<h2 id=\"avl-tree---add-메소드\" style=\"position:relative;\"><a href=\"#avl-tree---add-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"avl tree   add 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AVL Tree - add 메소드</h2>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// AVL 클래스의 생성자</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">AVLTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\troot <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\r\n\tcurrentSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token comment\">// add 메소드</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// 트리가 비어있을 경우</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\troot <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\r\n\t\tcurrentSize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token comment\">// 트리에 노드가 있으면 add 메소드를 재귀로 호출</span>\r\n\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>AVL 트리의 클래스 생성자, add 메소드에 대한 코드</li>\n<li>클래스를 생성 후, 트리가 비어있으면 노드를 추가하고 비어있지 않는다면 add 메소드를 재귀로 호출한다.</li>\n</ul>\n<h3 id=\"생각해보기-2\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-2\" aria-label=\"생각해보기 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>트리에 노드가 있으면 add 메소드를 재귀로 호출하는 이유는 무엇인가요?</li>\n</ul>\n<blockquote>\n<h2 id=\"avl-tree---재귀-add-메소드\" style=\"position:relative;\"><a href=\"#avl-tree---%EC%9E%AC%EA%B7%80-add-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"avl tree   재귀 add 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AVL Tree - 재귀 add 메소드</h2>\n</blockquote>\n<p>이전의 add 메소드에서 재귀로 호출되는 add 메소드</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> parent<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token comment\">// newNode의 data가 parent의 data보다 크면 트리의 오른쪽에 추가</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>newNode<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t\tparent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\r\n\t\t\tnewNode<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\r\n\t\t\tcurrentSize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token punctuation\">}</span>\r\n\t\t<span class=\"token keyword\">else</span>\r\n\t\t\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// newNode의 data가 parent의 data보다 작거나 같으면 트리의 왼쪽에 추가</span>\r\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t\tparent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span>\r\n\t\t\tnewNode<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\r\n\t\t\tcurrentSize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token punctuation\">}</span>\r\n\t\t<span class=\"token keyword\">else</span>\r\n\t\t\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// AVL트리가 규칙에 맞게 잘 되어있는지 확인</span>\r\n\t<span class=\"token function\">checkBalance</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<h2 id=\"avl-tree---균형-확인-메소드\" style=\"position:relative;\"><a href=\"#avl-tree---%EA%B7%A0%ED%98%95-%ED%99%95%EC%9D%B8-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"avl tree   균형 확인 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AVL Tree - 균형 확인 메소드</h2>\n</blockquote>\n<p>AVL 트리에서의 규칙은 왼쪽과 오른쪽의 높이 차이가 항상 1보다 작거나 같아야 한다.  따라서, 노드를 추가하였을 때 높이의 차이가 1보다 커지면 회전을 하여 트리의 균형을 맞춰주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkBalance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token comment\">// 높이 차이가 1 초과 혹은 -1 미만 (AVL 트리 규칙 위반)</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token function\">rebalance</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// 부모 노드를 계속 확인해서 루트까지 간다.</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token function\">checkBalance</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>트리의 높이 차이를 확인하고 균형을 맞추는 checkBalance 코드</li>\n</ul>\n<h3 id=\"생각해보기-3\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-3\" aria-label=\"생각해보기 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>checkBalance 메소드에서 새로 추가한 노드뿐만 아니라 모든 부모 노드를 확인해야 하는 이유는 무엇인가요?</li>\n</ul>\n<blockquote>\n<h2 id=\"avl-tree---rebalance-메소드\" style=\"position:relative;\"><a href=\"#avl-tree---rebalance-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"avl tree   rebalance 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AVL Tree - Rebalance 메소드</h2>\n</blockquote>\n<p>Rebalance 메소드는 <strong>어느 쪽에서 균형이 깨졌는지 확인하고 회전을 하여 균형을 유지</strong>한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rebalance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token comment\">// 왼쪽 자식 > 오른쪽 자식</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 왼쪽 서브 트리 > 오른쪽 서브 트리</span>\r\n\t\t\tnode <span class=\"token operator\">=</span> <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 우측 회전</span>\r\n\t\t<span class=\"token keyword\">else</span> <span class=\"token comment\">// 왼쪽 서브 트리 &lt; 오른쪽 서브 트리</span>\r\n\t\t\tnode <span class=\"token operator\">=</span> <span class=\"token function\">leftRightRotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 좌측-우측 회전</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token comment\">// 왼쪽 자식 &lt; 오른쪽 자식</span>\r\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span> \r\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token function\">height</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 왼쪽 서브 트리 > 오른쪽 서브 트리</span>\r\n\t\t\tnode <span class=\"token operator\">=</span> <span class=\"token function\">rightLeftRotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 우측-좌측 회전</span>\r\n\t\t<span class=\"token keyword\">else</span> <span class=\"token comment\">// 왼쪽 서브 트리 &lt; 오른쪽 서브 트리</span>\r\n\t\t\tnode <span class=\"token operator\">=</span> <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 좌측 회전\t</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token comment\">// 루트로 올 때까지 반복</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\r\n\t\troot<span class=\"token operator\">=</span>node<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"생각해보기-4\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-4\" aria-label=\"생각해보기 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>checkBalance 메소드와 Rebalance 메소드의 차이점은 무엇인가요? 각각 어떤 역할을 하나요?</li>\n</ul>\n<blockquote>\n<h2 id=\"avl-tree---adding-data-예제\" style=\"position:relative;\"><a href=\"#avl-tree---adding-data-%EC%98%88%EC%A0%9C\" aria-label=\"avl tree   adding data 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AVL Tree - adding data 예제</h2>\n</blockquote>\n<p><img src=\"/34e6b50bac4d3bb9b9f0d8df164c46cb/AVLtree_example.png\" alt=\"AVLtree_example.PNG\"></p>\n<ul>\n<li>add 메소드를 활용하여 43에 18, 22, 9, 21, 6, 8, 20, 63, 50, 62, 51을 순서대로 추가한 결과</li>\n<li>먼저 트리의 규칙에 따라 내려가 잎에 새로운 데이터를 추가한 뒤 균형이 깨졌는지 확인하고 회전을 하여 균형을 유지하도록 한다.</li>\n</ul>\n<h3 id=\"생각해보기-5\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-5\" aria-label=\"생각해보기 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>우측, 좌측 회전은 각각 어떨 때 필요한가요?</li>\n<li>43에 18, 22, 9, 21, 6, 8, 20, 63, 50, 62, 51을 순서대로 추가한 AVL 트리를 스스로 만들어보세요.</li>\n</ul>\n<hr>\n<h2 id=\"-틀렸거나-잘못된-정보가-있다면-망설임-없이-댓글로-알려주세요\" style=\"position:relative;\"><a href=\"#-%ED%8B%80%EB%A0%B8%EA%B1%B0%EB%82%98-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%A7%9D%EC%84%A4%EC%9E%84-%EC%97%86%EC%9D%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\" 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요!</h2>","excerpt":"자바로 구현하고 배우는 자료구조 수강 AVL Tree - 소개 AVL 트리는 스스로 균형을 잡는 이진 탐색 트리 AVL 트리에서는 왼쪽과 오른쪽의 높이 차이가 항상 1보다 작거나 같아야 한다. AVLtree_intro.PNG 생각해보기 AVL 트리를 구현하는 데 어떤 기능이 필요할까요? AVL Tree - 노드 left, right 노드뿐만 아니라, 기능을 간단하게 구현하기 위한 부모 노드에 대한 포인터도 있다. 생각해보기 left 노드, right 노드, 부모 노드의 포인터는 각각 어떤 곳을 가리킬까요? AVL Tree - add 메소드 AVL 트리의 클래스 생성자, add 메소드에 대한 코드 클래스를 생성 후, 트리가 비어있으면 노드를 추가하고 비어있지 않는다면 add 메소드를 재귀로 호출한다. 생각해보기 트리에 노드가 있으면 add 메소드를 재귀로 호출하는 이유는 무엇인가요? AVL Tree - 재귀 add 메소드 이전의 add 메소드에서 재귀로 호출되는 add 메소드 AVL…","frontmatter":{"date":"February 04, 2022","title":"22.02.04 TIL","categories":"TIL","author":"95Donguk","emoji":"❗"},"fields":{"slug":"/TIL/22.02.04/22.02.04/"}},"next":{"id":"9c350d5f-c38f-5168-a69d-e4d5c77b457a","html":"<h1 id=\"자바로-구현하고-배우는-자료구조-수강\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B3%A0-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%88%98%EA%B0%95\" aria-label=\"자바로 구현하고 배우는 자료구조 수강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://www.boostcourse.org/cs204\">자바로 구현하고 배우는 자료구조</a> 수강</h1>\n<blockquote>\n<h2 id=\"힙과-트리---트리제거\" style=\"position:relative;\"><a href=\"#%ED%9E%99%EA%B3%BC-%ED%8A%B8%EB%A6%AC---%ED%8A%B8%EB%A6%AC%EC%A0%9C%EA%B1%B0\" aria-label=\"힙과 트리   트리제거 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙과 트리 - 트리:제거</h2>\n</blockquote>\n<p>자식 노드의 개수에 따라 트리의 특정 요소를 제거하는 방법</p>\n<ol>\n<li>잎 노드를 제거할 경우\n<ul>\n<li>그 노드의 <strong>부모 노드의 포인터를 null로 설정</strong></li>\n</ul>\n</li>\n<li>자식 노드가 하나인 노드를 제거할 경우\n<ul>\n<li>그 노드의 <strong>부모 노드의 포인터를 자식 노드로</strong> 향하게 하면 된다.</li>\n<li>주의할 점은 부모 노드에서 사용했던 포인터와 같은 포인터(left, right 중 하나)를 사용해야 한다는 것이다.</li>\n</ul>\n</li>\n<li>자식 노드가 2개인 노드를 제거할 경우\n<ul>\n<li><strong>중위 후속자와 중위 선임자 중 하나와 자리를 바꾼 후 그 잎 노드를 제거</strong>\n<ul>\n<li>중위 후속자(in order successor): 제거하고자 하는 노드에서 시작하여 왼쪽으로 한 번 내려갔다가 계속 오른쪽으로 내려간 곳의 잎 노드(중위 순회 방식으로 노드를 탐색할 때 루트 노드를 방문하기 직전에 만나게 되는 노드이기 때문에 중위 후속자라고 부른다.)<br>중위 후속자는 <strong>제거하고자 하는 노드보다 작은 노드들 중에서 가장 큰 노드</strong></li>\n<li>중위 선임자(in order predessor): 제거하고자 하는 노드에서 시작하여 오른쪽으로 한 번 내려갔다가 계속 왼쪽으로 내려간 곳의 잎 노드<br>중위 선임자는 <strong>제거하고자 하는 노드보다 큰 노드들 중에서 가장 작은 노드</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"생각해보기\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"생각해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>자식 노드가 2개인 노드를 제거할 때, 중위 후속자 혹은 중위 선임자와 자리를 바꾸는 이유는 무엇인가요?</li>\n</ul>\n<blockquote>\n<h2 id=\"힙과-트리---트리회전-소개\" style=\"position:relative;\"><a href=\"#%ED%9E%99%EA%B3%BC-%ED%8A%B8%EB%A6%AC---%ED%8A%B8%EB%A6%AC%ED%9A%8C%EC%A0%84-%EC%86%8C%EA%B0%9C\" aria-label=\"힙과 트리   트리회전 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙과 트리 - 트리:회전 소개</h2>\n</blockquote>\n<p>회전 : <strong>균형 잡힌 트리</strong>를 만들기 위해 <strong>트리의 노드 위치를 바꾸는 과정</strong></p>\n<p>연결 리스트처럼 <strong>한 방향으로 나열된 트리는 균형 잡혀 있지 않다</strong>고 표현한다. 균형 잡힌 트리에서는 특정 요소를 탐색하는 시간 복잡도가 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>이지만 균형 잡히지 않은 트리에서는 연결 리스트와 같은 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>이 된다. 따라서, <strong>데이터를 효율적으로 관리</strong>하려면 트리를 균형 있게 만들어야 한다.</p>\n<p>조부모 노드, 부모 노드, 자식 노드의 크기 관계에 따라 우측 회전, 혹은 좌측 회전을 한다.\r\n트리를 재정렬하면 항상 중간 크기의 요소가 가장 위에 있는 루트가 된다.</p>\n<ol>\n<li>불균형이 왼쪽 서브트리에서 나타날 경우</li>\n</ol>\n<p><img src=\"/39b054eb04f30c41bb5e7d2cfd3dce8b/Heap&#x26;Tree_example1rotation.png\" alt=\"Heap&#x26;Tree_example1rotation.PNG\"></p>\n<ul>\n<li>크기 관계는 (조부모 노드) > (부모 노드) > (자식 노드)이다. <strong>우측 회전</strong>을 하여 조부모 노드를 부모 노드의 오른쪽 자식 노드 위치로 옮겨준다.</li>\n</ul>\n<ol start=\"2\">\n<li>불균형이 오른쪽 서브트리에서 나타날 경우</li>\n</ol>\n<p><img src=\"/2ec30f4a6ef726ae08e6330591b56cb6/Heap&#x26;Tree_example2rotation.png\" alt=\"Heap&#x26;Tree_example2rotation.PNG\"></p>\n<ul>\n<li>크기 관계는 (조부모 노드) &#x3C; (부모 노드) &#x3C; (자식 노드)이다. <strong>좌측 회전</strong>을 하여 조부모 노드를 부모 노드의 왼쪽 자식 노드 위치로 옮겨준다.</li>\n</ul>\n<h3 id=\"생각해보기-1\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-1\" aria-label=\"생각해보기 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>회전을 하기 위한 조건은 무엇인가요?</li>\n</ul>\n<blockquote>\n<h2 id=\"힙과-트리---트리회전\" style=\"position:relative;\"><a href=\"#%ED%9E%99%EA%B3%BC-%ED%8A%B8%EB%A6%AC---%ED%8A%B8%EB%A6%AC%ED%9A%8C%EC%A0%84\" aria-label=\"힙과 트리   트리회전 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙과 트리 - 트리:회전</h2>\n</blockquote>\n<p>트리가 한쪽으로 치우치지 않은 경우에는 어떻게 해결할까?\r\n우측 회전과 좌측 회전을 모두 사용하여 불균형을 해소해준다.</p>\n<ol>\n<li>불균형이 오른쪽 자식의 왼쪽 서브 트리에서 나타날 경우</li>\n</ol>\n<p><img src=\"/4f620b73b153172388806fc4b1db6668/Heap&#x26;Tree_example3rotation.png\" alt=\"Heap&#x26;Tree_example3rotation.PNG\"></p>\n<ul>\n<li>크기 관계는 (부모 노드) > (자식 노드) > (조부모 노드)이다. 자식 노드에 대해 부모 노드를 우측 회전 후 좌측 회전을 하여 조부모 노드를 부모 노드의 왼쪽 자식 노드 위치로 옮겨준다.</li>\n</ul>\n<ol start=\"2\">\n<li>불균형이 왼쪽 자식의 오른쪽 서브 트리에서 나타날 경우</li>\n</ol>\n<p><img src=\"/c92bdfe8aded0d98f32a3330963f1744/Heap&#x26;Tree_example4rotation.png\" alt=\"Heap&#x26;Tree_example4rotation.PNG\"></p>\n<ul>\n<li>크기 관계는 (부모 노드) > (조부모 노드) > (자식 노드)이다. 자식 노드에 대해 부모 노드를 좌측 회전 후 우측 회전을 하여 조부모 노드를 부모 노드의 오른쪽 자식 노드 위치로 옮겨준다.</li>\n</ul>\n<blockquote>\n<h2 id=\"힙과-트리---트리회전코딩\" style=\"position:relative;\"><a href=\"#%ED%9E%99%EA%B3%BC-%ED%8A%B8%EB%A6%AC---%ED%8A%B8%EB%A6%AC%ED%9A%8C%EC%A0%84%EC%BD%94%EB%94%A9\" aria-label=\"힙과 트리   트리회전코딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙과 트리 - 트리:회전(코딩)</h2>\n</blockquote>\n<p>임시 포인터를 사용하여 좌측 회전, 우측 회전을 구현한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 좌측 회전: 조부모 노드를 부모 노드의 왼쪽 자식 노드 위치로 옮김</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> leftRotate <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> tmp <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span> <span class=\"token comment\">// set temp=grandparents right child</span>\r\n\tnode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span> <span class=\"token comment\">// set grandparents right child=temp left child</span>\r\n\ttmp<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span> <span class=\"token comment\">// set temp left child=grandparent </span>\r\n\t<span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// use temp instead of grandparent</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// 우측 회전: 조부모 노드를 부모 노드의 오른쪽 자식 노드 위치로 옮김</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> rightRotate <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> tmp <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span> <span class=\"token comment\">// set temp=grandparents left child</span>\r\n\tnode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span> <span class=\"token comment\">// set grandparents left child=temp right child</span>\r\n\ttmp<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span> <span class=\"token comment\">// set temp right child=grandparent </span>\r\n\t<span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// use temp instead of grandparent</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>트리가 한쪽으로 치우치지 않을 경우, 우측 회전과 좌측 회전을 둘 다 사용해야 한다. 위에서 구현한 우측 회전, 좌측 회전 함수를 활용하여 아래와 같이 구현한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 우측 회전 후 좌측 회전</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">rightLeftRotate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// node의 인자는 항상 조부모의 노드로 전달한다.</span>\r\n\tnode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// 좌측 회전 후 우측 회전</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">leftRightRotate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\tnode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"생각해보기-2\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-2\" aria-label=\"생각해보기 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>임시 포인터 tmp를 사용하는 이유는 무엇인가요?</li>\n</ul>\n<hr>\n<h2 id=\"-틀렸거나-잘못된-정보가-있다면-망설임-없이-댓글로-알려주세요\" style=\"position:relative;\"><a href=\"#-%ED%8B%80%EB%A0%B8%EA%B1%B0%EB%82%98-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%A7%9D%EC%84%A4%EC%9E%84-%EC%97%86%EC%9D%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\" 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요!</h2>","frontmatter":{"date":"February 03, 2022","title":"22.02.03 TIL","categories":"TIL","author":"95Donguk","emoji":"❗"},"fields":{"slug":"/TIL/22.02.03/22.02.03/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://95donguk.github.io","comments":{"utterances":{"repo":"95Donguk/95Donguk.github.io"}}}}},"pageContext":{"slug":"/TIL/22.02.04/22.02.04/","nextSlug":"/TIL/22.02.03/22.02.03/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}