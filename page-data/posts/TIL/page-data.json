{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/TIL",
    "result": {"pageContext":{"currentCategory":"TIL","categories":["All","Spring","TIL"],"edges":[{"node":{"id":"fcc6209b-9fbe-55a8-9254-1148b2c9e944","excerpt":"파이썬 공부 정리 람다(lambda)  매개변수 부분은 생략 가능하다. 두 수를 더하는 함수 위 함수를 람다식으로 표현 range  range는 시작 숫자부터 종료 숫자 바로 앞 숫자까지 수열을 만든다. 시작 숫자와 step은 생략 가능하다. 많은 경우에 range()가 돌려준 객체는 리스트인 것처럼 동작하지만, 사실 리스트는 아니다. 이터레이트할 때 원하는 시퀀스 항목들을 순서대로 돌려주는 객체이지만, 실제로 리스트를 만들지 않아서 공간을 절약한다. 1부터 10까지 리스트 range를 이용한 1부터 10까지 리스트 _(Underscore) 파이썬에서 언더스코어를 사용하는 경우 인터프리터에서 마지막으로 실행된 결괏값을 저장하고 싶을 경우 값을 무시하고 싶을 경우 변수나 함수명에 특별한 의미를 부여하고 싶을 경우 파이썬에서 가장 많이 사용되는 경우  주로 한 모듈 내부에서만 사용하는 private 클래스/함수/변수/메서드를 선언할 때 사용하는 컨벤션 이 컨벤션으로 선언하게 되면 시 …","fields":{"slug":"/TIL/22.02.25/"},"frontmatter":{"categories":"TIL","title":"22.02.25 TIL","date":"February 25, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.24/"}},"previous":{"fields":{"slug":"/Spring/Convert_String_to_LocalDateTime/"}}},{"node":{"id":"25342449-b622-56a7-8cd6-e84fe0a9b739","excerpt":"생활코딩의 Python 입문 수업 수강 데이터 타입 데이터 타입을 나누는 이유는 데이터 타입에 따라 데이터를 연산하는 방법이 다르기 때문 Number Type Text Type List Type 서로 연관된 데이터를 잘 모아 정리 정돈하는 도구 변수 데이터의 이름을 붙이는 것 input & output Boolean 비교 연산자 조건문 반복문 순서에 따라서 데이터를 저장할 때는 리스트, 순서는 필요 없고 데이터에 이름을 주고 싶을 때는 딕셔너리를 사용한다. 💡 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요!","fields":{"slug":"/TIL/22.02.24/"},"frontmatter":{"categories":"TIL","title":"22.02.24 TIL","date":"February 24, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.22/"}},"previous":{"fields":{"slug":"/TIL/22.02.25/"}}},{"node":{"id":"4da575ca-42a9-500b-8a3c-0af1819d4deb","excerpt":"생활코딩의 WEB2 - JavaScript 수강 함수 리팩토링에서 중요한 수단 중의 하나 으로 함수 선언 실습 활용 객체 서로 연관된 함수와 서로 연관된 변수를 같은 이름으로 그룹화해서 잘 정리정돈하기 위한 수납 상자 배열과 차이점 배열이라는 도구는 정보를 담는 그릇이면서 동시에 순서대로 저장된다는 특징이 있다. 객체는 순서 없이 정보를 저장하면서 이름이 있는 정리 정돈 상자이다. 객체의 쓰기와 읽기 객체와 반복문 프로퍼티와 메소드 메소드 : 객체에 소속된 함수 프로퍼티 : 객체에 소속된 변수 실습 활용 파일로 쪼개서 정리 정돈하기 JavaScript로 작성된 코드를 color.js라는 이름으로 따로 파일을 만든다. html 파일에는  속성으로 color.js 파일을 연결한다. 장점 : 새로운 HTML 파일을 만들면 JavaScript의 모든 코드를 카피할 필요 없이 속성으로 파일을 연결하면 된다. 그 의미는 작성했던 코드를 재사용하게 되고 혹시나 코드에 수정이 필요하면 한 번의 …","fields":{"slug":"/TIL/22.02.22/"},"frontmatter":{"categories":"TIL","title":"22.02.22 TIL","date":"February 22, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.21/"}},"previous":{"fields":{"slug":"/TIL/22.02.24/"}}},{"node":{"id":"fdb03d39-85d6-5df3-8aa9-981d6921ff7f","excerpt":"생활코딩의 WEB2 - JavaScript 수강 프로그램, 프로그래밍, 프로그래머 HTML과 JavaScript는 둘 다 컴퓨터 언어이다. JavaScript는 컴퓨터 언어이면서 동시에 컴퓨터 프로그래밍 언어이지만 HTML은 컴퓨터 프로그래밍 언어가 아니다. 프로그램 : 순서를 만드는 행위 시간의 순서에 따라서 실행되어야 할 기능을 프로그램의 언어의 문법에 맞게 글로 적어 두는 방식, 그리고 그 작업이 필요할 때 컴퓨터에 실행시킨다. 프로그래머 : 그 순서를 만드는 사람 HTML은 웹페이지를 묘사하는 목적의 언어이기 때문에 시간의 순서에 따라서 무엇을 할 필요가 없다. JavaScript는 사용자와 상호작용하기 위해서 고안된 컴퓨터 언어, 그러기 위해서 시간의 순서에 따라서 웹브라우저의 여러 기능이 실행되어야 하므로 프로그래밍이라고 하는 형태를 띠고 있고 이것이 HTML과 JavaScript를 다르게 하는 중요한 특징이다. 조건문 조건문 : 하나의 프로그램이 하나의 흐름으로 가는 …","fields":{"slug":"/TIL/22.02.21/"},"frontmatter":{"categories":"TIL","title":"22.02.21 TIL","date":"February 21, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.20/"}},"previous":{"fields":{"slug":"/TIL/22.02.22/"}}},{"node":{"id":"62ead755-f09d-5d6c-ae90-20a9736e1c52","excerpt":"생활코딩의 WEB2 - JavaScript 수강 수업의 목적 html는 정적이다. 한 번 화면에 출력되면 언제나 그 모습 그대로 유지된다. JavaScript는 웹페이지를 동적으로 사용자와 상호작용할 수 있게 기능을 추가할 수 있는 스크립트 언어이다. JavaScript는 HTML을 제어하는 언어다. HTML과 JavaScript의 만남 1 (script 태그) 기본적으로 JavaScript는 HTML 위에서 동작하는 언어이다.  태그 안쪽에 JavaScript가 오도록 약속되어 있기에 웹브라우저는 태그 안쪽에 있는 코드를 JavaScript로 해석한다. HTML과 JavaScript의 차이 HTML과 JavaScript의 만남 2 (이벤트) event : 웹브라우저 위에서 일어나는 일 JavaScript가 사용자와 상호작용하는 데 핵심적인 역할을 한다.  경고창 띄우는 메소드   속성 onclick 속성의 값으로는 반드시 JavaScript가 와야 한다. onclick 속성의 속…","fields":{"slug":"/TIL/22.02.20/"},"frontmatter":{"categories":"TIL","title":"22.02.20 TIL","date":"February 20, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.19/"}},"previous":{"fields":{"slug":"/TIL/22.02.21/"}}},{"node":{"id":"c912a096-18fd-5b7c-b6c5-2ebd9c156441","excerpt":"생활코딩의 WEB2 - CSS 수강 그리드  division의 약자 아무런 의미가 없고 단지 디자인의 용도로만 쓰는 태그 block level element  inline element div 태그와 마찬가지로 디자인 용도로만 쓰는 태그 grid 실습 반응형 디자인 화면의 크기에 따라서 웹 페이지의 각 요소가 반응해서 동작하게 된다. 미디어 쿼리 어떠한 조건을 만족할 때만 CSS의 내용이 동작하게 하는 것이 가능하다. 실습 코드 추가 코드의 재사용 다른 웹페이지들에 같은 스타일을 적용하고자 한다면 style 태그 내의 코드를 모두 복사하여 일일이 html 파일에 적용하는 것도 방법이지만 중복되고 있는 css 코드가 비효율적이고 코드가 복잡해지기 때문에 style 내 css 코드를 하나의 style.css 파일로 따로 저장하고 적용하고자 하는 페이지들에  태그를 통해서 css  파일을 연결해 코드의 재사용성과 가독성을 높이고 유지보수를 편리하게 할 수 있다. 코드의 양이 줄었기 때문…","fields":{"slug":"/TIL/22.02.19/"},"frontmatter":{"categories":"TIL","title":"22.02.19 TIL","date":"February 19, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.18/22.02.18/"}},"previous":{"fields":{"slug":"/TIL/22.02.20/"}}},{"node":{"id":"4604046b-3cfd-5d6f-95dd-407acb2567ea","excerpt":"생활코딩의 WEB2 - CSS 수강 CSS 등장 이전의 상황 글꼴 색상 태그  지금은 사용하지 않음 한계가 명확하다. 수만 개의 글꼴 색상을 바꿔줘야 한다면? 수만 개의 글꼴 색상을 일일이 바꿔줘야 한다. CSS 등장  HTML의 문법 의미 : 웹브라우저에 style 태그 안쪽에 있는 내용은 CSS라는 언어의 문법에 맞게 해석해서 처리해야 한다는 것을 알려준다. 예) 이 웹페이지의 모든 a 태그의 font 컬러를 붉은색으로 해라. CSS라는 언어가 도입된 중요한 이유 HTML이 정보에 전념하게 하기 위해서 HTML로부터 디자인에 대한 기능을 뺏어온 것 CSS를 통해서 웹페이지를 디자인하는 것이 HTML을 통해서 디자인하는 것보다 훨씬 더 효율적이다. CSS의 기본 문법 웹페이지 안에 CSS를 삽입하는 방법 style 태그를 쓴다. 예) 선택자(selector) : 이 웹페이지에서 주고 싶은 효과를 누구에게 줄 것인가를 선택한다. a {…} 효과(declaration) : style…","fields":{"slug":"/TIL/22.02.18/22.02.18/"},"frontmatter":{"categories":"TIL","title":"22.02.18 TIL","date":"February 18, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.17/22.02.17/"}},"previous":{"fields":{"slug":"/TIL/22.02.19/"}}},{"node":{"id":"9c6e0494-5078-5555-90cb-4ae7f7509ba4","excerpt":"생활코딩의 WEB1 - HTML & Internet 수강 부모 자식과 목록 몇몇 태그들은 부모 자식 관계처럼 고정된 관계인 태그들이 있다. 목차(list) 태그   unordered list 순서 없는 목차 li 태그의 부모 서로 연관된 항목이 어디서부터 어디까지인지 경계를 짓기 위한, 그룹화 하기 위해 사용  ordered list 순서 있는 목차 문서의 구조와 슈퍼스타들 HTML 약속 HTML로서 만들어졌다는 것을 표현하기 위해 문서의 시작에 아래와 같은 코드를 추가  head 태그와 body 태그를 감싸는 하나의 태그  본문 설명 태그  웹페이지 제목 태그  책으로 비유하면 책 표지 문자 표현 규정 UTF-8 설정  본문 태그  HTML 태그의 제왕 이 태그는 무엇인가? 현대의 HTML은 150여 개의 태그로 이루어져 있지만 이들 모두 이 태그의 아래에 있다. 검색엔진들은 이 태그 덕분에 전 세계의 웹을 항해하면서 웹페이지들을 발견할 수 있고, 이 태그 덕분에 더 좋은 검색 …","fields":{"slug":"/TIL/22.02.17/22.02.17/"},"frontmatter":{"categories":"TIL","title":"22.02.17 TIL","date":"February 17, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.16/"}},"previous":{"fields":{"slug":"/TIL/22.02.18/22.02.18/"}}},{"node":{"id":"664bb7f6-ed57-584e-bd12-44dfaf42c78a","excerpt":"생활코딩의 WEB1 - HTML & Internet 수강 코딩과 HTML 사람이 하는 일(원인)을 부르는 여러 표현 부호 또는 신호라는 의미의 코드(code) 원천이라는 뜻의 소스(source) 약속이라는 의미에서 언어 기계가 하는 일(결과)을 부르는 여러 표현 애플리케이션(앱) 프로그램 웹에서의 결과를 웹 페이지 웹페이지가 모여 있으면 웹 사이트 기능이 좀 많으면 웹애플리케이션(웹앱)이라고 한다. 원인인 코드를 통해서 결과를 만든다는 것이 코딩을 이해하는 핵심이다. HTML은 웹페이지를 만드는 코드이다. 웹은 퍼블릭 도메인(Public Domain)이다 저작권이 없는 것들을 퍼블릭 도메인이라고 한다. 웹을 만든 팀 버너스 리는 웹을 어떠한 저작권도 존재하지 않는 완전한 자유를 의미하는 퍼블릭 도메인으로 선언했다. 기본 문법 - 태그 강조 표시 -  밑줄 표시 *  (u는 underline의 첫 글자에서 따옴) 앞에 있는 태그를 열리는 태그, 뒤에 있는 태그를 닫히는 태그라고 구분…","fields":{"slug":"/TIL/22.02.16/"},"frontmatter":{"categories":"TIL","title":"22.02.16 TIL","date":"February 16, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.15/"}},"previous":{"fields":{"slug":"/TIL/22.02.17/22.02.17/"}}},{"node":{"id":"44ed3965-b8d6-51c5-bab8-328ce8a5a136","excerpt":"디자인 패턴 핵심 정리 디자인 패턴은 프로그램 개발에서 자주 나타나는 과제를 해결하기 위한 방법의 하나로 과거 소프트웨어 개발 과정에서 발견된 설계의 노하우를 축적하여 이름을 붙여, 이후에 재사용하기 좋은 형태로 정리한 것 용도 특징 및 종류 생성 패턴 객체 생성 방식을 결정하는 패턴프로토타입 패턴, 싱글톤 패턴, 빌더 패턴, 팩토리 메서드 패턴, 추상 팩토리 패턴 구조 패턴 객체를 조직화하는데 유용한 패턴(합성에 관여)브릿지 패턴, 컴포짓 패턴, 어댑터 패턴, 데코레이터 패턴, 퍼사드 패턴, 프록시 패턴, 플라이웨이트 패턴 행동 패턴 객체들이 상호작용을 조정 관리하는 패턴커맨드 패턴, 인터프리터 패턴, 메멘토 패턴, 옵저버 패턴, 이터레이터 패턴, 중재자 패턴, 상태 패턴, 전략 패턴, 방문자 패턴, 템플릿 메서드 패턴, 책임 연쇄 패턴 생성 패턴 프로토타입 패턴(Prototype Pattern) 미리 만들어진 객체를 복제하여 새로운 객체를 생성하는 패턴이다. 객체 생성에 원형이…","fields":{"slug":"/TIL/22.02.15/"},"frontmatter":{"categories":"TIL","title":"22.02.15 TIL","date":"February 15, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.14/"}},"previous":{"fields":{"slug":"/TIL/22.02.16/"}}},{"node":{"id":"7dea03c4-f9ff-5b6f-a172-5a76c9697f0e","excerpt":"프로그래머스의 자바 중급 수강 쓰레드와 상태제어 쓰레드가 3개가 있다면 JVM은 시간을 잘게 쪼갠 후에 한번은 쓰레드1을, 한번은 쓰레드 2를, 한번은 쓰레드 3을 실행한다. 이것이 빠르게 일어나다 보니 쓰레드가 모두 동작하는 것처럼 보이는 것이다. 쓰레드는 실행 가능 상태인 Runnable과 실행상태인 Running 상태로 나뉜다. 실행되는 쓰레드 안에서 Thread.sleep()이나 Object가 가지고 있는 wait()메소드가 호출이 되면 쓰레드는 블록 상태가 된다. Thread.sleep()은 특정 시간이 지나면 자신 스스로 블록 상태에서 빠져나와 Runnable이나 Running 상태가 된다. Object가 가지고 있는 wait()메소드는 다른 쓰레드가 notify()나 notifyAll()메소드를 호출하기 전에는 블록 상태에서 해제되지 않는다. wait()메소드는 호출이 되면 모니터링 락을 놓게 된다. 그래서 대기 중인 다른 메소드가 실행한다. 쓰레드의 run메소드가 종…","fields":{"slug":"/TIL/22.02.14/"},"frontmatter":{"categories":"TIL","title":"22.02.14 TIL","date":"February 14, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.13/"}},"previous":{"fields":{"slug":"/TIL/22.02.15/"}}},{"node":{"id":"c90d20c1-4db7-5651-afd7-b249eac5e087","excerpt":"프로그래머스의 자바 중급 수강 쓰레드 동시에 여러 가지 작업을 수행할 수 있다. 프로세스란 현재 실행되고 있는 프로그램을 말한다. 자바 프로그램은 JVM에 의해 실행된다. 이 JVM도 프로그램 중에 하나이다. 운영체제 입장으로 보면 자바도 하나의 프로세스로 실행을 하는 것이다. 워드프로세서가 하나의 프로세스라면, 하나의 프로세스 안에서도 여러 개의 흐름이 동작할 수 있다. 이것을 Thread라고 한다. 자바 프로그램이 여러 개의 작업을 동시에 하게 하고 싶다면 Thread를 공부해야 한다. 쓰레드 만들기(extend Thread) 자바에서 Thread를 만드는 방법은 크게 Thread 클래스를 상속받는 방법과 Runnable인터페이스를 구현하는 방법이 있다. Thread를 상속받아서 쓰레드를 생성하는 방법 java.lang.Thread클래스를 상속받는다. 그리고 Thread가 가지고 있는 run()메소드를 오버라이딩한다. 10번 반복하면서 str을 찍는다. Thread 클래스를 상…","fields":{"slug":"/TIL/22.02.13/"},"frontmatter":{"categories":"TIL","title":"22.02.13 TIL","date":"February 13, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.12/"}},"previous":{"fields":{"slug":"/TIL/22.02.14/"}}},{"node":{"id":"098477d6-9938-5e0e-ba4e-3c938c819bb9","excerpt":"프로그래머스의 자바 중급 수강 Byte 단위 입출력 Byte단위 입출력 클래스는 클래스의 이름이 InputStream이나 OutputStream으로 끝난다. 파일로부터 1byte씩 읽어 들여 파일에 1byte씩 저장하는 프로그램을 작성 파일로부터 읽어오기 위한 객체 - FileInputStream 파일에 쓸 수 있게 해주는 객체 - FileOutputStream read()메소드가 byte를 리턴한다면 끝을 나타내는 값을 표현할 수가 없기 때문에, byte가 아닌 int를 리턴한다. 음수의 경우 맨 좌측 비트가 1이 된다. 읽어 들일 것이 있다면 항상 양수를 리턴한다고 볼 수 있다. FileInputStream과 FileOutputStream을 이용하여, 1바이트씩 읽어 들여 1바이트씩 저장 read()메소드가 리턴하는 타입은 정수인데, 정수 4바이트중 마지막 바이트에 읽어 들인 1바이트를 저장 read()메소드는 더 이상 읽어 들일 것이 없을 때 -1을 리턴한다. Byte 단위 …","fields":{"slug":"/TIL/22.02.12/"},"frontmatter":{"categories":"TIL","title":"22.02.12 TIL","date":"February 12, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.11/"}},"previous":{"fields":{"slug":"/TIL/22.02.13/"}}},{"node":{"id":"81795d6c-5352-5791-aa37-6d25dde03d32","excerpt":"프로그래머스의 자바 중급 수강 Data 날짜와 시간을 구하기 위한 클래스 Date는 지역화에 대한 부분이 고려되지 않았다. 지역화란, 지역에 따라서 시간, 통화(원, 달러, 엔 등), 언어 등에 대하여 고려하는 프로그래밍을 지역화에 맞춘 프로그래밍이라고 한다. API문서에 Date클래스를 보면 대부분의 생성자와 메소드가 Deprecated되어 있다. Deprecated된 것은 앞으로 지원하지 않을 수 있거나 문제가 있을 수 있으니 사용하지 말라는 뜻 기본 생성자를 이용한 Date클래스 생성 기본 생성자로 Date인스턴스를 만들게 되면 현재 시각과 날짜 정보를 Date인스턴스가 가지게 된다. toString()메소드를 이용하여 현재 시각을 문자열로 구한다 출력 결과 : Fri Feb 11 19:13:59 KST 2022 java.text.SimpleDateFormat 클래스를 이용해서 원하는 형태로 출력하는 방법 yyyy는 년도를 네 자릿수로, MM은 월을 두 자릿수로, dd는 일을…","fields":{"slug":"/TIL/22.02.11/"},"frontmatter":{"categories":"TIL","title":"22.02.11 TIL","date":"February 11, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.10/22.02.10/"}},"previous":{"fields":{"slug":"/TIL/22.02.12/"}}},{"node":{"id":"6c634e0b-ee99-5281-97aa-997d82ecea10","excerpt":"프로그래머스의 자바 중급 수강 Object와 오버라이딩 Object클래스는 모든 클래스의 최상위 클래스 아무것도 상속받지 않으면 자동으로 Object를 상속 Object가 가지고 있는 메소드는 모든 클래스에서 다 사용할 수 있다는 것을 의미 Object가 가지고 있는 메소드 중에서 가장 많이 사용하는 메소드 equals : 객체가 가진 값을 비교할 때 사용 toString : 객체가 가진 값을 문자열로 반환 hashCode : 객체의 해시코드 값 반환 위 세 가지 메소드는 사용할 때 반드시 오버라이딩해서 사용해야 한다. java.lang 패키지/오토 박싱 자바는 기본적으로 다양한 패키지를 지원한다. 그중에서 가장 중요한 패키지 java.lang패키지의 클래스는 import를 하지 않고도 사용할 수 있다. java.lang패키지에는 기본형 타입을 객체로 변환시킬 때 사용하는 Wrapper클래스가 있다.(실제 클래스가 존재하는 것은 아님) Boolean, Byte, Short, Int…","fields":{"slug":"/TIL/22.02.10/22.02.10/"},"frontmatter":{"categories":"TIL","title":"22.02.10 TIL","date":"February 10, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.09/22.02.09/"}},"previous":{"fields":{"slug":"/TIL/22.02.11/"}}},{"node":{"id":"c320ee84-12c6-5c7a-b903-e61fb4e5b302","excerpt":"웹 백엔드 수강 DML 데이터 조작어(Data Manipulation Language, DML)의 종류 SELECT – 검색 INSERT - 등록 UPDATE - 수정 DELETE - 삭제 SELECT 구문의 기본문형 DML_select.PNG SELECT 구문 예제 전체 데이터 검색(*) 예) DEPARTMENT 테이블의 모든 데이터를 출력하시오. 특정 컬럼 검색 SELECT 뒤에 컬럼을 콤마(,)로 구별해서 나열 예) employee 테이블에서 직원의 사번(empno), 이름(name), 직업(job)을 출력하시오.  컬럼에 별칭 부여하기 컬럼명 뒤에  또는 을 작성해주면 된다. 별칭에 공백을 포함하고 싶은 경우 로 감싸줘야 한다. 컬럼에 대한 ALIAS(별칭)을 부여해서 나타내는 컬럼의 HEADING을 변경할 수 있다. 예) employee 테이블에서 직원의 사번(empno), 이름(name), 직업(job)을 출력하시오.  컬럼의 합성 문자열 결합함수 CONCAT 사용 예)…","fields":{"slug":"/TIL/22.02.09/22.02.09/"},"frontmatter":{"categories":"TIL","title":"22.02.09 TIL","date":"February 09, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.08/22.02.08/"}},"previous":{"fields":{"slug":"/TIL/22.02.10/22.02.10/"}}},{"node":{"id":"a0763b55-8ce2-5a55-894b-10d00418a3e8","excerpt":"웹 백엔드 수강 데이터베이스 데이터베이스 개념 데이터의 집합 (a Set of Data) 여러 응용 시스템(프로그램)들의 통합된 정보들을 저장하여 운영할 수 있는 공용(share) 데이터의 집합 효율적으로 저장, 검색, 갱신할 수 있도록 데이터 집합들끼리 연관시키고 조직화되어야 한다. 데이터베이스의 특성 실시간 접근성(Real-time Accessability) 사용자의 요구를 즉시 처리할 수 있다. 계속적인 변화(Continuous Evolution) 정확한 값을 유지하려고 삽입·삭제·수정 작업 등을 이용해 데이터를 지속적으로 갱신할 수 있다. 동시 공유성(Concurrent Sharing) 사용자마다 서로 다른 목적으로 사용하므로 동시에 여러 사람이 동일한 데이터에 접근하고 이용할 수 있다. 내용 참조(Content Reference) 저장한 데이터 레코드의 위치나 주소가 아닌 사용자가 요구하는 데이터의 내용, 즉 데이터 값에 따라 참조할 수 있어야 한다. 데이터베이스 관리 시…","fields":{"slug":"/TIL/22.02.08/22.02.08/"},"frontmatter":{"categories":"TIL","title":"22.02.08 TIL","date":"February 08, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.07/22.02.07/"}},"previous":{"fields":{"slug":"/TIL/22.02.09/22.02.09/"}}},{"node":{"id":"759b7b3f-0d18-5a6c-95b7-ec307daff1c4","excerpt":"자바로 구현하고 배우는 자료구조 수강 Sort - 소개 out-of-place 정렬과 in-place 정렬 out-of-place 정렬은 모든 데이터를 자료 구조의 복사본에 옮긴 후 순서대로 배열하여 정렬하는 방법 in-place 정렬은 자료 구조를 그대로 두고 그 안에서 요소들의 위치를 바꾸어 정렬하는 방법 안정 정렬과 불안정 정렬 안정 정렬은 중복된 숫자가 원래 순서를 유지한 상태로 정렬하는 방법 불안정 정렬은 중복된 숫자의 순서를 보장할 수 없다. 시간복잡도 최악의 경우: 원래의 리스트가 완전히 반대순서일 경우 평균적인 경우: 완전히 임의의 순서로 되어 있는 리스트가 있고 이를 정렬하는 경우 최선의 경우: 이미 정렬된 경우 생각해보기 일상생활에서 책과 같이 순서가 있는 물건들을 정리할 때, 어떤 정렬 방법을 사용하시나요? Sort - 선택 정렬 선택 정렬은 순서대로 리스트의 가장 작은 수를 찾고 그 수를 확정되지 않은 부분의 가장 앞자리에 놓는 방법 리스트 안에서 순서만 바꿔…","fields":{"slug":"/TIL/22.02.07/22.02.07/"},"frontmatter":{"categories":"TIL","title":"22.02.07 TIL","date":"February 07, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.06/"}},"previous":{"fields":{"slug":"/TIL/22.02.08/22.02.08/"}}},{"node":{"id":"761269ed-3138-5c2a-9607-904ec811a635","excerpt":"자바로 구현하고 배우는 자료구조 수강 Red Black Tree - 색상 확인 메소드 생각해보기 correctTree 메소드는 어떤 일을 하나요? Red Black Tree - Rotate 메소드 현재 노드와 부모 노드가 각각 오른쪽 자식인지 왼쪽 자식인지에 따라 필요한 회전이 달라진다. 생각해보기 현재 노드가 오른쪽 자식일 경우에 대한 rotate 함수 메소드를 작성해보세요. Red Black Tree - 좌측 회전 생각해보기 그림을 그려 leftRotate 메소드가 어떻게 동작하는지 확인해보세요. 그리고 우측 회전에 대한 rightRotate 메소드를 작성해보세요. Red Black Tree - 좌측-우측 회전 생각해보기 그림을 그려 leftRightRotate 메소드가 어떻게 동작하는지 확인해보세요. 그리고 우측-좌측 회전에 대한 rightLeftRotate 메소드를 작성해보세요. Red Black Tree - 높이 생각해보기 height 함수에서 재귀 함수의 결과인 heig…","fields":{"slug":"/TIL/22.02.06/"},"frontmatter":{"categories":"TIL","title":"22.02.06 TIL","date":"February 06, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.05/22.02.05/"}},"previous":{"fields":{"slug":"/TIL/22.02.07/22.02.07/"}}},{"node":{"id":"8c3eab29-6d26-51f3-a0ba-b1e322e7f5df","excerpt":"자바로 구현하고 배우는 자료구조 수강 Red Black Tree - 규칙 Red Black Tree는  자가 균형 이진 탐색 트리로서, AVL 트리처럼 스스로 균형을 잡는 트리이다. 규칙 모든 노드는 빨간색이나 검은색 루트는 항상 검은색 새로 추가되는 노드는 항상 빨간색 루트에서 잎 노드로 가는 모든 경로에는 같은 수의 검은색 노드가 있어야 한다. 어떤 경로에서도 빨간색 노드 2개가 연속으로 있어서는 안 된다. 모든 빈 노드는 검은색이라고 가정한다. 균형을 맞추는 방법 이모 노드가 검은색일 경우 회전을 한다. 회전을 하고 나면 부모 노드는 검은색, 두 자식 노드는 빨간색이 되어야 한다. 이모 노드가 빨간색일 경우 색상 전환을 한다. 색상 전환을 하고 나면 조부모 노드는 빨간색, 부모와 이모 노드는 검은색이 되어야 한다. (단 조부모 노드가 루트인 경우 조부모 노드를 다시 검은색으로 색상 전환을 한다.) 생각해보기 Red Black Tree에서 검은색 노드 2개가 연속으로 있는 경우…","fields":{"slug":"/TIL/22.02.05/22.02.05/"},"frontmatter":{"categories":"TIL","title":"22.02.05 TIL","date":"February 05, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.04/22.02.04/"}},"previous":{"fields":{"slug":"/TIL/22.02.06/"}}},{"node":{"id":"cadd3d46-36a5-5554-8de5-42fa0a46ae29","excerpt":"자바로 구현하고 배우는 자료구조 수강 AVL Tree - 소개 AVL 트리는 스스로 균형을 잡는 이진 탐색 트리 AVL 트리에서는 왼쪽과 오른쪽의 높이 차이가 항상 1보다 작거나 같아야 한다. AVLtree_intro.PNG 생각해보기 AVL 트리를 구현하는 데 어떤 기능이 필요할까요? AVL Tree - 노드 left, right 노드뿐만 아니라, 기능을 간단하게 구현하기 위한 부모 노드에 대한 포인터도 있다. 생각해보기 left 노드, right 노드, 부모 노드의 포인터는 각각 어떤 곳을 가리킬까요? AVL Tree - add 메소드 AVL 트리의 클래스 생성자, add 메소드에 대한 코드 클래스를 생성 후, 트리가 비어있으면 노드를 추가하고 비어있지 않는다면 add 메소드를 재귀로 호출한다. 생각해보기 트리에 노드가 있으면 add 메소드를 재귀로 호출하는 이유는 무엇인가요? AVL Tree - 재귀 add 메소드 이전의 add 메소드에서 재귀로 호출되는 add 메소드 AVL…","fields":{"slug":"/TIL/22.02.04/22.02.04/"},"frontmatter":{"categories":"TIL","title":"22.02.04 TIL","date":"February 04, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.03/22.02.03/"}},"previous":{"fields":{"slug":"/TIL/22.02.05/22.02.05/"}}},{"node":{"id":"9c350d5f-c38f-5168-a69d-e4d5c77b457a","excerpt":"자바로 구현하고 배우는 자료구조 수강 힙과 트리 - 트리:제거 자식 노드의 개수에 따라 트리의 특정 요소를 제거하는 방법 잎 노드를 제거할 경우 그 노드의 부모 노드의 포인터를 null로 설정 자식 노드가 하나인 노드를 제거할 경우 그 노드의 부모 노드의 포인터를 자식 노드로 향하게 하면 된다. 주의할 점은 부모 노드에서 사용했던 포인터와 같은 포인터(left, right 중 하나)를 사용해야 한다는 것이다. 자식 노드가 2개인 노드를 제거할 경우 중위 후속자와 중위 선임자 중 하나와 자리를 바꾼 후 그 잎 노드를 제거 중위 후속자(in order successor): 제거하고자 하는 노드에서 시작하여 왼쪽으로 한 번 내려갔다가 계속 오른쪽으로 내려간 곳의 잎 노드(중위 순회 방식으로 노드를 탐색할 때 루트 노드를 방문하기 직전에 만나게 되는 노드이기 때문에 중위 후속자라고 부른다.)중위 후속자는 제거하고자 하는 노드보다 작은 노드들 중에서 가장 큰 노드 중위 선임자(in orde…","fields":{"slug":"/TIL/22.02.03/22.02.03/"},"frontmatter":{"categories":"TIL","title":"22.02.03 TIL","date":"February 03, 2022"}},"next":{"fields":{"slug":"/TIL/22.02.02/22.02.02/"}},"previous":{"fields":{"slug":"/TIL/22.02.04/22.02.04/"}}},{"node":{"id":"2f29217f-7f23-5427-acb4-b872ff525c18","excerpt":"자바로 구현하고 배우는 자료구조 수강 힙과 트리 - 트리:완전 트리와 정 트리 완전 트리(Complete Tree) Heap&Tree_completeTree.PNG 모든 잎이 아닌 노드가 2개의 자식 노드를 가지고 있고 마지막 줄은 왼쪽에서 오른쪽 순서로 채워져 있는 트리 정 트리(Full Tree) Heap&Tree_fullTree.PNG 모든 잎이 아닌 노드가 2개의 자식 노드를 가지고 있고 모든 잎이 같은 레벨에 있는 트리 생각해보기 완전 트리와 정 트리의 공통점과 차이점은 무엇인가요? 힙과 트리 - 트리:순회 전위 순회 (Pre order traversal): 루트 노드에서 시작하여 왼쪽 자식 노드에 갔다가 오른쪽 자식 노드로 가는 순회 방법 중위 순회 (In order traversal): 왼쪽 자식 노드에서 시작하여 루트 노드에 갔다가 오른쪽 자식 노드로 가는 순회 방법 후위 순회 (Post order traversal): 왼쪽 자식 노드에서 시작하여 오른쪽 자식 노드에…","fields":{"slug":"/TIL/22.02.02/22.02.02/"},"frontmatter":{"categories":"TIL","title":"22.02.02 TIL","date":"February 02, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.31/22.01.31/"}},"previous":{"fields":{"slug":"/TIL/22.02.03/22.02.03/"}}},{"node":{"id":"4797632d-0912-5ca2-9000-c39c5b5c6577","excerpt":"자바로 구현하고 배우는 자료구조 수강 힙과 트리 - 소개 트리 Heap&Tree_tree.PNG\r\n노드를 나무 형태로 연결한 구조를 트리라고 한다. 트리에 있는 각각의 요소는 노드이며 노드는 부모, 자식 형태로 이어져 있다. 뿌리 (root): 트리의 시작 부분, 뿌리를 통해 들어가서 트리를 탐색한다. 잎 (leaf): 자식이 딸려있지 않은 부분 간선 (edge): 두 노드를 연결하는 선, 뿌리로부터의 간선의 수에 따라 level을 나눈다. 생각해보기 어떤 경우에 데이터를 트리 형태로 저장하는 것이 효과적일까요? 힙과 트리 - 힙:Tree levels 힙은 최댓값 및 최솟값을 찾아내는 연산을 빠르게 하기 위해 고안된 완전이진트리를 기반으로 한 자료구조이다. 힙에는 최대 힙(max heap)과 최소 힙(min heap)이 있다. 부모 노드가 자식 노드보다 크면 최대 힙, 반대이면 최소 힙이다. 가장 큰 숫자가 뿌리에 있게 하려면 최대 힙, 가장 작은 숫자로부터 시작하려면 최소 힙을 …","fields":{"slug":"/TIL/22.01.31/22.01.31/"},"frontmatter":{"categories":"TIL","title":"22.01.31 TIL","date":"January 31, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.29/"}},"previous":{"fields":{"slug":"/TIL/22.02.02/22.02.02/"}}},{"node":{"id":"e990c18c-6118-53b3-9672-3b937492fca8","excerpt":"자바로 구현하고 배우는 자료구조 수강 해시 - 생성자 자바 API에서는 기본 테이블 크기는 16이다. 생각해보기 maxLoadFactor를 줄이거나 늘리면 어떻게 달라지나요? 어떤 상황에서 maxLoadFactor를 조절해야 할까요? 해시 - 생성자 복습 자바에서 제네릭으로 배열을 만드는 것은 어렵다. 객체로 배열을 만든 뒤 형변환을 해준다. 해시 - add와 remove 메소드 add 해시에 내용을 추가하는 add 메소드 크기가 너무 커지거나 작아질 경우, add 메소드에서 크기를 조절해줘야 한다. resize 메소드의 원리는 새로운 테이블 크기를 계산하고 새로운 크기가 더 작더라도 해시를 조정할 수 있다. remove remove 메소드에서는 크기 조정을 걱정할 필요도 없고 객체를 생성할 일도 없다. 생각해보기 크기가 작아질 경우, add 메소드에서는 어떻게 크기를 조절하나요? 해시 - getValue 메소드 키의 값을 찾는 getValue 메소드, 키의 index가 무엇인지 …","fields":{"slug":"/TIL/22.01.29/"},"frontmatter":{"categories":"TIL","title":"22.01.29 TIL","date":"January 29, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.28/22.01.28/"}},"previous":{"fields":{"slug":"/TIL/22.01.31/22.01.31/"}}},{"node":{"id":"7c7fa4c4-f47c-5fd0-9c35-54dcaf9348c5","excerpt":"자바로 구현하고 배우는 자료구조 수강 해시 - 체이닝 (Chaining) Hash_chaining.PNG 체이닝(Chaining)은 요소마다 연결 리스트를 만들어 수많은 데이터를 수용할 수 있게 하는 방법이다. 체인 해시는 가장 안정적이고 보편적으로 사용되는 자료 구조 중 하나이다. 상수 시간으로 어떤 요소든 추가하고 제거하고 찾을 수 있다. (Best case : ) 체이닝을 하면 수용 가능한 요소 개수에 제한이 없어지고 크기 조정도 자주 할 필요가 없어진다. 적재율 λ는 항목의 개수를 가능한 체인 개수로 나눈 값이다. 체인 1개에 여러 항목을 넣을 수 있어 λ는 1보다 큰 수가 될 수 있다. 하지만 hashCode가 같은 숫자만 반환하여 하나의 체인이 너무 길어지면 결국 연결 리스트와 시간 복잡도가 같아지는 문제가 발생한다. (Worst case : ) 생각해보기 체인 해시를 효율적으로 사용하려면 hashCode 함수를 어떻게 설계해야 할까요? 해시 - 재해싱 체인 해시에서 해…","fields":{"slug":"/TIL/22.01.28/22.01.28/"},"frontmatter":{"categories":"TIL","title":"22.01.28 TIL","date":"January 28, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.27/"}},"previous":{"fields":{"slug":"/TIL/22.01.29/"}}},{"node":{"id":"fd093a08-a20f-5387-b774-2ca8e1c46689","excerpt":"자바로 구현하고 배우는 자료구조 수강 해시 - 양수로 반환 8비트 2의 보수 0000 0000 = 0 0000 0001 = 1 0000 0010 = 2 0111 1110 = 126 0111 1111 = 127 1111 1111 = -1 1111 1110 = -2 1000 0001 = -127 1000 0000 = -128 자바에서 정수를 표현할 때 첫 숫자가 부호를 결정한다. (첫 숫자가 0이면 양수, 1이면 음수이다.) hashCode 값과 16진법 숫자를 & 연산하면 첫 비트를 제외한 나머지 비트들은 그대로 남고 첫 비트가 1이면 0으로 바뀌고 0이면 바뀌지 않는다. 예) -1 & 0x7FFFFFFF -> 2147483647 -10 & 0x7FFFFFFF -> 2147483638 그래서 hashCode 값을 테이블에 맞는 숫자로 바꾸려면 생각해보기 값을 양수로 변환해야 하는 이유는 무엇인가요? 해시 - LoadFactor 메소드 LoadFactor(적재율)는 해시에 데이터가 얼…","fields":{"slug":"/TIL/22.01.27/"},"frontmatter":{"categories":"TIL","title":"22.01.27 TIL","date":"January 27, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.26/22.01.26/"}},"previous":{"fields":{"slug":"/TIL/22.01.28/22.01.28/"}}},{"node":{"id":"db17c538-133b-5366-b34a-3e99f1286fc1","excerpt":"자바로 구현하고 배우는 자료구조 수강 해시 - 해시 충돌 해시 충돌 : 서로 다른 값을 가진 키가 일치하는 경우 Hash_hashcollision.PNG 예시) 전화번호를 세 부분으로 나눈 것의 합을 키로 지정, 그런데 키가 2386으로 같아 해시 충돌이 발생함. 해시 함수는 충돌이 일어나지 않도록 만들어야 한다. 배열에 두 키가 같은 공간에 들어갈 수 없기 때문 생각해보기 위 예시에서 해시 충돌이 일어나지 않게 하려면 전화번호를 어떻게 folding 하는 것이 좋을까요? 해시 - 해시 함수에서 문자열 해시에 저장하고 싶은 문자열이 여러 개 있을 때 문자열을 숫자로 바꿔야 하고 그 숫자는 정수여야 한다. 이유는 배열에 추가하고자 함인데 배열은 그 정수를 위치로 사용하면 되기 때문이다. 문자열 “this”를 해시로 나타내려면 어떻게 해야 할까요? 모든 문자는 유니코드로 변환하여 숫자 형태로 나타낼 수 있다. 따라서 각 문자를 변환한 후 그 숫자들을 합한다면, 문자열을 숫자로 나타낼 …","fields":{"slug":"/TIL/22.01.26/22.01.26/"},"frontmatter":{"categories":"TIL","title":"22.01.26 TIL","date":"January 26, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.25/22.01.25/"}},"previous":{"fields":{"slug":"/TIL/22.01.27/"}}},{"node":{"id":"18e41d9b-2a43-5350-bbf1-758bb62108ff","excerpt":"자바로 구현하고 배우는 자료구조 수강 스택과 큐 배열 Stack&Queue_array.PNG 배열에는 순서가 있다. 배열에서 addLast,removeLast의 시간 복잡도는 이다. 배열에서 addFirst,removeFirst는  요소들을 하나씩 옮겨야 하기에 시간 복잡도는 이다. Stack addLast : removeLast :  addFirst : removeFirst :  Queue addLast : removeFirst :  addFirst : removeLast :  스택과 큐의 과정이 비효율적이기 때문에 스택과 큐에서 기본적인 배열을 사용하지 않는다. Stack&Queue_linkedlist.PNG 연결 리스트에서는 배열 맨 앞을 가리키는 head 포인터를 사용한다. 그래서 리스트의 첫 부분을 제거하거나 추가하는 과정의 시간 복잡도가 이다. 더 효율적인 알고리즘인 연결 리스트는 스택과 큐를 하는 데 사용한다.  장점 단점 배열 연결 리스트보다 전형적으로 더 빠르다.(…","fields":{"slug":"/TIL/22.01.25/22.01.25/"},"frontmatter":{"categories":"TIL","title":"22.01.25 TIL","date":"January 25, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.24/22.01.24/"}},"previous":{"fields":{"slug":"/TIL/22.01.26/22.01.26/"}}},{"node":{"id":"8c0d3706-1020-5a19-9f38-b74b257fb2a4","excerpt":"자바로 구현하고 배우는 자료구조 수강 연결리스트 - 테스트 생각해보기 Tester 코드에서 노드의 숫자들은 어떻게 채워지고 지워지나요? 숫자들의 순서를 반대로 바꾸려면 어떻게 해야 할까요? 연결리스트 - 반복자 배열의 각각의 원소를 출력할 때 (int x : arr) -> Iterable interface 객체에서 두 번째 방식으로 반복문이 동작하도록 하기 위해서는 Iterator 인터페이스를 구현해야 한다. 이 코드를 연결 리스트 안에 넣으면 된다. 생각해보기 hasNext는 노드의 어떤 정보를 반환할까요? 연결리스트 - 이중 연결 리스트 DataStructures_doublylinkedlist.PNG 이중 연결 리스트(양방향 연결 리스트)는 단일 연결 리스트에 바로 전의 노드를 가리키는 previous 포인터를 추가한 연결 리스트 removeLast 메소드를 사용할 때, 단일 연결 리스트는 tail 포인터가 있더라도   의 시간 복잡도로 모든 노드를 한 번씩 거쳐야 한다는 단점…","fields":{"slug":"/TIL/22.01.24/22.01.24/"},"frontmatter":{"categories":"TIL","title":"22.01.24 TIL","date":"January 24, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.23/"}},"previous":{"fields":{"slug":"/TIL/22.01.25/22.01.25/"}}},{"node":{"id":"f940826e-3a66-5965-9b72-641c397223e7","excerpt":"자바로 구현하고 배우는 자료구조 수강 연결리스트 - remove와 find remove Comparable 인터페이스를 사용하여 제거하고 싶은 요소의 위치를 찾는다. 바로 앞 노드의 next 포인터가 다음 노드를 가리키게 만들어 가운데 노드를 제거한다. previous, current의 2가지 포인터를 사용하여 각각 바로 앞의 노드와 제거하고자 하는 노드를 가리키게 한다. 노드가 1개만 있는 경우, 첫 번째 노드를 제거하는 경우에는 removeFirst 메소드를 사용한다. 그리고 마지막 요소를 제거하는 경우에는 removeLast 메소드를 사용한다. find 생각해보기 remove와 removeFirst 메소드, removeLast 메소드와의 차이점은 무엇인가요? 리스트가 비어있는 경우에 remove를 사용하면 어떻게 되나요? 연결리스트 - peek 메소드 peek 메소드는 하나의 요소를 살펴보기 위해 쓰는 메소드 추가, 제거하는 것이 아니라 그 요소의 내용을 읽는 함수이다 pee…","fields":{"slug":"/TIL/22.01.23/"},"frontmatter":{"categories":"TIL","title":"22.01.23 TIL","date":"January 23, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.22/"}},"previous":{"fields":{"slug":"/TIL/22.01.24/22.01.24/"}}},{"node":{"id":"5f4d396f-0284-5cad-9bb7-825fa6d01a0e","excerpt":"자바로 구현하고 배우는 자료구조 수강 연결리스트 - addFirst 메소드 새로운 node를 만든다. Node 클래스는 이 객체를 data에 저장하고 next는 null을 가리키게 한다. 새로운 node의 next가 현재 head가 가리키는 node를 가리키게 만들도록 한다. head 포인터가 다시 새로운 노드를 가리키도록 한다. 연결 리스트의 크기를 상수 시간으로 알 수 있도록 한다. 새로운 요소를 추가하기 위해 뒷부분을 살펴볼 필요가 없기 때문에 시간 복잡도는 이다. 생각해보기 head가 비어있는 경우, 즉 head가 null을 가리키는 경우에 addFirst 메소드를 사용하면 node.next, head가 어떻게 달라지나요? 연결리스트 - addLast 메소드 addLast 메소드에서는 연결 리스트의 마지막을 가리키는 임시포인터를 사용한다. 왜냐하면 연결 리스트의 요소를 확인하려면 무조건 head에서 시작해야 하는데, 연결 리스트의 마지막까지 도달하는 데 next를 너무 많이…","fields":{"slug":"/TIL/22.01.22/"},"frontmatter":{"categories":"TIL","title":"22.01.22 TIL","date":"January 22, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.21/"}},"previous":{"fields":{"slug":"/TIL/22.01.23/"}}},{"node":{"id":"c9beb9bf-9caa-5ac5-99c3-0822c7efb8ab","excerpt":"자바로 구현하고 배우는 자료구조 수강 연결리스트 - 노드와 크기 연결 리스트의 내부 클래스에서 노드를 정의한 내용, 노드는 next라는 포인터와 data를 가진다. data의 자료형은 E, E는 정해지지 않은 자료형이고 이렇게 구현한 연결 리스트를 사용하면 그때 지정하겠다는 의미이다. next의 타입은 Node이다. 다른 노드를 가리키는 포인터이기 때문이다. 생성자에서는 객체를 data에 저장하고 next는 null로 지정한다. 이 노드 객체는 내부 클래스이기 때문에 연결 리스트가 아닌 다른 곳에서 접근할 수 없다. 외부에서 접근하기 위해 노드 객체를 만들 때와 같이 private 변수 head를 만든다. 노드의 개수를 세는 효율적인 방법 노드의 개수를 직접 세는 방법보다 int 타입인 변수 currentSize를 만들어 노드의 개수를 세는 방법이 더 효율적이다. 하나씩 직접 세는 것의 시간 복잡도는 이지만 변수를 만들어 놓고 리스트에 요소를 추가할 때마다 변수의 값을 늘려 놓으면…","fields":{"slug":"/TIL/22.01.21/"},"frontmatter":{"categories":"TIL","title":"22.01.21 TIL","date":"January 21, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.20/"}},"previous":{"fields":{"slug":"/TIL/22.01.22/"}}},{"node":{"id":"53187ccf-2d24-5b4c-a0ba-c0bad8ae126d","excerpt":"자바로 구현하고 배우는 자료구조 수강 매개변수화 타입 제너릭 프로그래밍을 구현하기 위한 방법으로 매개변수화 타입을 사용할 수 있다. <> 안에 Type Parameter를 넣어 컴파일 시 구체적인 타입이 결정되도록 하는 방법이다. 매개변수화 타입을 사용하려면 클래스, 함수를 정의할 때 위와 같이 고쳐주면 된다. 생성자의 경우 예외적으로 E를 사용하지 않는다. 예) 매개변수화 타입을 사용하여 어떤 자료형이든 담을 수 있는 제너릭 노드 만들기, E는 모드 같은 자료형을 의미 배열의 경우 Autoboxing byte, short, int, char 등의 기본 자료형에 대해서 Java 가상 머신은 정확하게 필요한 만큼의 메모리를 할당한다. 하지만 객체에 대해서는 이 객체를 가리키는 4바이트짜리 포인터와 힙의 공간을 할당한다. 따라서 기본 자료형은 객체가 아니고 이것들은 객체 메소드를 상속받지 않는다. 하지만 Java에는 기본 자료형뿐만 아니라 래퍼 클래스(Wrapper Class)가 존재…","fields":{"slug":"/TIL/22.01.20/"},"frontmatter":{"categories":"TIL","title":"22.01.20 TIL","date":"January 20, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.19/22.01.19/"}},"previous":{"fields":{"slug":"/TIL/22.01.21/"}}},{"node":{"id":"4e849711-5122-54c9-ac7b-8fb4e322cfd9","excerpt":"자바로 구현하고 배우는 자료구조 수강 연결 리스트 Linked_List_1.PNG 포인터를 사용하여 여러 개의 노드를 연결하는 자료 구조를 연결 리스트라고 한다. 연결 리스트의 기본 구성 요소는 노드이다. 노드에는 두 가지 정보가 들어있다. 첫 번째는 인접한 노드를 가리키는 next라는 이름의 포인터, 두 번째는 우리가 노드에 넣는 데이터를 가리키는 포인터이다. 이 리스트는 head라는 이름의 포인터에서 시작한다. Head는 리스트의 첫 번째 노드를 가리킨다. 힙에서는 이 연결 리스트의 head만 알고 있기 때문에, head.next 혹은 head.data 등으로 노드의 내용을 찾는다. 하지만 연결 리스트의 길이가 매우 길 경우, 계속 head 뒤에 next를 붙일 수는 없다. 그래서 임시 포인터를 사용하여 탐색하는 방법을 사용한다. 배열과 차이점 배열도 순서대로 여러 데이터를 저장할 때 사용한다는 공통점이 있지만, 배열의 문제는 크기가 맞지 않다. 필요한 요소보다 너무 크게 만들…","fields":{"slug":"/TIL/22.01.19/22.01.19/"},"frontmatter":{"categories":"TIL","title":"22.01.19 TIL","date":"January 19, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.18/22.01.18/"}},"previous":{"fields":{"slug":"/TIL/22.01.20/"}}},{"node":{"id":"0ec9a2aa-657f-5983-8018-4427c5bc7a57","excerpt":"자바로 구현하고 배우는 자료구조 수강 객체지향 프로그래밍 객체의 메모리 할당 방법 new를 사용하여 객체(인스턴스) student를 만들면(객체의 종류에 따라 다르지만) Java Virtual Machine은 코드를 읽고 메모리가 얼마나 필요한지 계산하고 그만큼의 공간을 힙에 할당한다. 그리고 힙에 있는 공간을 가리키는 4바이트짜리 포인터를 하나 만든다. OOP_1.PNG 상속 특징 Java에서 각각의 클래스는 하나의 클래스만 상속받을 수 있다. 상속받는 클래스의 정보만 갖고 있다. 상속받는 클래스의 공간을 함께 할당한다. 상속을 받은 상태로, 새로운 객체 Undergraduate u를 정의하면, u에는 4바이트가 할당된다. 그리고 이 포인터가 가리키는 힙에는 Undergraduate에 맞는 공간이 할당된다. Undergraduate에 있는 변수와 Student 클래스, Person 클래스에 들어 있는 모든 변수도 힙에 들어간다. Undergraduate 객체에 필요한 만큼 공간을…","fields":{"slug":"/TIL/22.01.18/22.01.18/"},"frontmatter":{"categories":"TIL","title":"22.01.18 TIL","date":"January 18, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.17/22.01.17/"}},"previous":{"fields":{"slug":"/TIL/22.01.19/22.01.19/"}}},{"node":{"id":"8b7d2683-8531-55c6-b102-41555e5e12a8","excerpt":"자바로 구현하고 배우는 자료구조 수강 시간 복잡도 시간 복잡도는 서로 다른 알고리즘의 효율성을 비교할 때 사용한다. 규칙 입력값 은 항상 0보다 크다. 입력값이 음수일 경우는 시간 복잡도를 고려할 때는 말이 되지 않는 경우이다. 그래서 복잡도는 항상 0보다 크다고 가정하고 계산을 해야 한다. 함수는 많은 입력값이 있을 떄 더 많은 작업을 하게 된다. 더 많은 입력값이 주어지면 어떤 작업을 하는 데 필요한 계산이나 처리 시간이 길어진다. 시간 복잡도에서는 모든 상수를 삭제한다. 어떤 알고리즘의 복잡도가 이라면 3은 고려하지 않고 복잡도는 이 된다. , , , ,  모두 복잡도가 인 알고리즘이다. 낮은 차수의 항들은 무시한다. 시간 복잡도에서 과  를 비교할 때 항상 이 더 오래 걸리는 알고리즘이라고 판단한다. 여기서 의문이 들 수 있는 점은 그래프에서 (1,1)인 지점 전까지는  이 더 오래 걸릴 수 있다는 것이다. 하지만 알고리즘에서는 입력값 이 1보다 작은 값은 고려하지 않고 큰…","fields":{"slug":"/TIL/22.01.17/22.01.17/"},"frontmatter":{"categories":"TIL","title":"22.01.17 TIL","date":"January 17, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.16/"}},"previous":{"fields":{"slug":"/TIL/22.01.18/22.01.18/"}}},{"node":{"id":"addbe2d7-bdb5-58d9-b33e-502443c46ba8","excerpt":"생활코딩 자바 복습 겸 심심풀이로 풀어본 부스트코스 문제 HelloWorldApp.java 파일 안에 있는 Class 이름은 어떻게 생성되어야 할까요? Java 프로그램이 맨 먼저 실행하는 메서드는 무엇일까요? Java 파일을 기계가 이해할 수 있도록 .class 파일로 바꾸는 과정을 무엇이라 할까요? Java 프로그램을 동작시키도록 실행환경을 만들어주는 프로그램은 무엇일까요? Java에서 사용하는 문자열을 관리하기 위한 타입은 무엇일까요? Java가 정수를 다루기 위해 사용하는 타입은 무엇일까요? Java가 정수를 다루기 위해 사용하는 타입은 무엇일까요? 프로그래밍에서 버그를 수정하기 위한 행위를 뭐라고 할까요? 디버그에서 중요한 기능으로 중간에서 흐름을 멈추기 위한 기능은 무엇일까요? 프로그램의 입력값으로 전달될 수 있는 Input 값은 일반적으로 뭐라고 표현할 수 있을까요? Java 컴파일을 위해 사용되는 프로그램은 무엇일까요? 외부에서 만들어진 정리정돈된 소스 코드를 사용하…","fields":{"slug":"/TIL/22.01.16/"},"frontmatter":{"categories":"TIL","title":"22.01.16 TIL","date":"January 16, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.15/22.01.15/"}},"previous":{"fields":{"slug":"/TIL/22.01.17/22.01.17/"}}},{"node":{"id":"f44cd7e6-c6bc-588c-8a6f-acb179b2429e","excerpt":"모든 개발자를 위한 HTTP 웹 기본지식 수강 HTTP 헤더2 - 캐시와 조건부 요청 - 캐시 기본 동작 HTTP_header_cache_1.PNG\r\nHTTP_header_cache_2.PNG\r\nHTTP_header_cache_3.PNG\r\nHTTP_header_cache_4.PNG 캐시가 없을 때 데이터가 변경되지 않아도 계속 네트워크를 통해서 데이터를 다운로드받아야 한다. 인터넷 네트워크는 매우 느리고 비싸다. 브라우저 로딩 속도가 느리다. 느린 사용자 경험 HTTP_header_cache_5.PNG\r\nHTTP_header_cache_6.PNG\r\nHTTP_header_cache_7.PNG\r\nHTTP_header_cache_8.PNG 캐시 적용 캐시 덕분에 캐시 가능 시간 동안 네트워크를 사용하지 않아도 된다. 비싼 네트워크 사용량을 줄일 수 있다. 브라우저 로딩 속도가 매우 빠르다. 빠른 사용자 경험 HTTP_header_cache_9.PNG\r\nHTTP_header_cache_1…","fields":{"slug":"/TIL/22.01.15/22.01.15/"},"frontmatter":{"categories":"TIL","title":"22.01.15 TIL","date":"January 15, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.14/22.01.14/"}},"previous":{"fields":{"slug":"/TIL/22.01.16/"}}},{"node":{"id":"a0fc7179-9412-5523-9601-748de01bea6b","excerpt":"모든 개발자를 위한 HTTP 웹 기본지식 수강 HTTP 헤더1 - 일반 헤더 - 개요 HTTP 헤더 header-field = field-name”:” OWS field-value OWS OWS : 띄어쓰기 허용 *field-name은 대소문자 구문 없음 HTTP_header_1.PNG HTTP 헤더 - 용도 HTTP 전송에 필요한 모든 부가정보 예) 메시지 바디의 내용, 메시지 바디의 크기, 압축, 인증, 요청 클라이언트(브라우저) 정보, 서버 애플리케이션 정보, 캐시 관리 정보… 표준 헤더가 너무 많다 참조 : https://en.wikipedia.org/wiki/List_of_HTTP_header_fields 필요하면 임의의 헤더 추가 가능 helloworld: hihi HTTP 헤더 분류 - RFC2616(과거) HTTP_header_RFC2616_1.PNG 헤더 분류 General 헤더 : 메시지 전체에 적용되는 정보 예) Connection: close Request 헤…","fields":{"slug":"/TIL/22.01.14/22.01.14/"},"frontmatter":{"categories":"TIL","title":"22.01.14 TIL","date":"January 14, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.13/22.01.13/"}},"previous":{"fields":{"slug":"/TIL/22.01.15/22.01.15/"}}},{"node":{"id":"6836686e-1b52-507b-8293-8f20be10da34","excerpt":"모든 개발자를 위한 HTTP 웹 기본지식 수강 HTTP 상태 코드 - 소개 상태 코드 : 클라이언트가 보낸 요청의 처리 상태를 응답에서 알려주는 기능 1XX (Informational) : 요청이 수신되어 처리 중 2XX (Successful) : 요청 정상 처리 3XX (Redirection) : 요청을 완료하려면 추가 행동이 필요 4XX (Client Error) : 클라이언트 오류, 잘못된 문법 등으로 서버가 요청을 수행할 수 없음 5XX (Server Error) : 서버 오류, 서버가 정상 요청을 처리하지 못함 만약 모르는 상태 코드가 나타나면? 클라이언트가 인식할 수 없는 상태 코드를 서버가 반환하면? 클라이언트는 상위 상태 코드로 해석해서 처리 미래에 새로운 상태 코드가 추가되어도 클라이언트를 변경하지 않아도 된다. 예시 299 ??? -> 2XX (Successful) 451 ??? -> 4XX (Client Error) 599 ??? -> 5XX (Server Er…","fields":{"slug":"/TIL/22.01.13/22.01.13/"},"frontmatter":{"categories":"TIL","title":"22.01.13 TIL","date":"January 13, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.12/22.01.12/"}},"previous":{"fields":{"slug":"/TIL/22.01.14/22.01.14/"}}},{"node":{"id":"0f01de85-c85b-5404-9395-f3bc3bf4d1eb","excerpt":"모든 개발자를 위한 HTTP 웹 기본지식 수강 HTTP 메서드 활용 - 클라이언트에서 서버로 데이터 전송 클라이언트에서 서버로 데이터 전송 - 데이터 전달 방식은 크게 2가지 쿼리 파라미터를 통한 데이터 전송 GET 주로 정렬 필터(검색어, 게시판 리스트에 정렬 조건을 넣는 등) HTTP 메시지 바디를 통한 데이터 전송 POST, PUT, PATCH 회원 가입, 상품 주문, 리소스 등록, 리소스 변경 클라이언트에서 서버로 데이터 전송 - 4가지 상황 정적 데이터 조회 (GET) 이미지, 정적 텍스트 문서 동적 데이터 조회 (GET) 주로 검색, 게시판 목록에서 정렬 필터(검색어) HTML Form을 통한 데이터 전송 (POST -> 데이터 변경, GET -> 데이터 조회) 회원 가입, 상품 주문, 데이터 전송 HTTP API를 통한 데이터 전송 회원 가입, 상품 주문, 데이터 변경 서버 to 서버, 앱 클라이언트, 웹 클라이언트(Ajax) HTTP_method_send_data_1…","fields":{"slug":"/TIL/22.01.12/22.01.12/"},"frontmatter":{"categories":"TIL","title":"22.01.12 TIL","date":"January 12, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.11/22.01.11/"}},"previous":{"fields":{"slug":"/TIL/22.01.13/22.01.13/"}}},{"node":{"id":"819b1d16-9e5f-5bff-aff8-8a33a223a962","excerpt":"모든 개발자를 위한 HTTP 웹 기본지식 수강 HTTP 메서드 - HTTP API를 만들어보자 API URI 설계 회원 목록 조회 /read-member-list 회원 조회 /read-member-by id 회원 등록 /create-member 회원 수정 /update-member 회원 삭제 /delete-member -> 이것은 좋은 URI 설계인가? 가장 중요한 것은 리소스 식별 API URI 고민 리소스의 의미는 뭔가? 회원을 등록하고 수정하고 조회하는 것이 리소스가 아니다! 예) 미네랄을 캐라 -> 미네랄이 리소스 회원이라는 개념 자체가 바로 리소스다. 리소스를 어떻게 식별하는 것이 좋을까? 회원을 등록하고 수정하고 조회하는 것은 모두 배제 회원이라는 리소스만 식별하면 된다. -> 회원 리소스를 URI에 매핑 API URI 설계 - 리소스 식별, URI 계층 구조 활용 회원 목록 조회 /members 회원 조회 /members/{id} -> 어떻게 구분하지? 회원 등록 /m…","fields":{"slug":"/TIL/22.01.11/22.01.11/"},"frontmatter":{"categories":"TIL","title":"22.01.11 TIL","date":"January 11, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.10/22.01.10/"}},"previous":{"fields":{"slug":"/TIL/22.01.12/22.01.12/"}}},{"node":{"id":"e0cdfe43-a9cf-5e1f-8300-45717e5fb880","excerpt":"모든 개발자를 위한 HTTP 웹 기본지식 수강 HTTP 기본 - 모든 것이 HTTP HTTP(HyperText Transfer Protocol) HTML, TEXT IMAGE, 음성, 영상, 파일 JSON, XML (API) 거의 모든 형태의 데이터 전송 가능 서버 간에 데이터를 주고받을 때도 대부분 HTTP 사용 실무에서 서버 간의 통신할 때 TCP 프로토콜을 직접 이용해서 데이터 전송 하는 경우는 드물다(게임 서버, 특수한 경우) 모바일 게임 같은 경우 HTTP 통신하는 구조로 개발 많이 함. HTTP 역사 HTTP/0.9(1991) : GET 메서드만 지원, HTTP 헤더 없음 HTTP/1.0(1996) : 메서드, 헤더 추가 HTTP/1.1(1997) : 가장 많이 사용 RFC2068(1997) -> RFC2616(1999) -> RFC7230~7235(2014) HTTP/1.1에 대부분의 기능이 담겨 있음. HTTP/2(2015) : 성능 개선 HTTP/3(진행 중) : …","fields":{"slug":"/TIL/22.01.10/22.01.10/"},"frontmatter":{"categories":"TIL","title":"22.01.10 TIL","date":"January 10, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.09/22.01.09/"}},"previous":{"fields":{"slug":"/TIL/22.01.11/22.01.11/"}}},{"node":{"id":"bae24baf-712d-5729-8072-79fcd5bd7a61","excerpt":"모든 개발자를 위한 HTTP 웹 기본지식 수강 URI와 웹 브라우저 요청 흐름 - URI URI(Uniform Resource Identifier) Uniform : 리소스 식별하는 통일된 방식 Resource : 자원, URI로 식별할 수 있는 모든 것(제한 없음) 자원 : 웹브라우저의 HTML파일 같은 것뿐만 아니라 실시간 교통 정보 등 우리가 구분할 수 있는 모든것 Identifier : 다른 항목과 구분하는데 필요한 정보 URI는 로케이터(locator), 이름 또는 둘 다 추가로 분류될 수 있다. 참조 : https://www.ietf.org/rfc/rfc3986.txt HTTP_URI_1_1.PNG\r\nHTTP_URI_1_2.PNG URL, URN 뜻 URL(Uniform Resource Locator) Locator : 리소스가 있는 위치를 지정 URN(Uniform Resource Name) Name : 리소스에 이름을 부여 위치는 변할 수 있지만, 이름은 변하지 않는…","fields":{"slug":"/TIL/22.01.09/22.01.09/"},"frontmatter":{"categories":"TIL","title":"22.01.09 TIL","date":"January 09, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.08/22.01.08/"}},"previous":{"fields":{"slug":"/TIL/22.01.10/22.01.10/"}}},{"node":{"id":"dd998109-4388-5c57-be55-36b4beb4f3b9","excerpt":"모든 개발자를 위한 HTTP 웹 기본지식 수강 인터넷 네트워크 - 1. 인터넷 통신 인터넷에서 실질적인 최종 통신은 두 프로세스 사이의 데이터 전달이다. HTTP_Internet_1.PNG 인터넷 네트워크 - 2. IP(인터넷 프로토콜) HTTP_Internet_2.PNG IP 역할 지정한 IP 주소(IP Address)에 데이터 전달 패킷(Packet)이라는 통신 단위로 데이터 전달 IP 패킷의 정보(규칙) HTTP_Internet_2_2.PNG HTTP_Internet_2_3.PNG IP 프로토콜의 한계 비연결성 : 패킷을 받을 대상이 없거나 서비스 불능 상태여도 패킷 전송한다. 비신뢰성 : 패킷 전달 과정에서 자료 손실과 패킷 전달 순서 같은 문제도 발생할 수 있다.(패킷이 용량이 클 때[1500byte 이상 보통 나누어서 보냄] 패킷들이 중간에 다른 노드로 탈수 있음) 프로그램 구분 : 같은 IP를 사용하는 서버에서 통신하는 애플리케이션들을 구분할 수 없다. 위 문제점은 T…","fields":{"slug":"/TIL/22.01.08/22.01.08/"},"frontmatter":{"categories":"TIL","title":"22.01.08 TIL","date":"January 08, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.07/"}},"previous":{"fields":{"slug":"/TIL/22.01.09/22.01.09/"}}},{"node":{"id":"c5cbc431-ea4c-5f90-890b-6952892a19a4","excerpt":"생활코딩 JAVA abstract 강의 수강 1 ~ 3 완강 JAVA abstract - 1. abstract의 문법 abstract는 추상이라는 의미고 주목해야 할 특징은 abstract로 지정된 메소드나 클래스는 직접적으로 사용할 수가 없고 반드시 그것을 상속한 클래스를 만들어서 상속한 클래스를 사용하도록 강제하는 것이다. 추상 메소드, 추상 클래스라고 하는 것은 구체적인 로직을 담고 있지 않고 그 로직을 사용하기 위한 형식을 가지고 있다. 메소드 중에 하나라도 abstract라 지정되어 있다면 그 메소드를 담고 있는 클래스도 이름 앞에 abstract가 지정된다. 하지만 abstract라 지정된 클래스 안에는 구체적인 로직을 담은 메소드도 가질 수도 있다. JAVA abstract - 2. abstract의 사용 이유 상속을 강제하기 위한 규제, 부모 클래스에는 메소드의 시그니처만 정의해놓고 그 메소드의 실제 동작 방법은 이 메소드를 상속받는 하위 클래스의 책임으로 위임한다.…","fields":{"slug":"/TIL/22.01.07/"},"frontmatter":{"categories":"TIL","title":"22.01.07 TIL","date":"January 07, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.06/"}},"previous":{"fields":{"slug":"/TIL/22.01.08/22.01.08/"}}},{"node":{"id":"5c7fdb57-30c6-5a03-bfa1-c7833cf86506","excerpt":"생활코딩 JAVA Interface 강의 수강 1 ~ 5 완강 JAVA Interface - 1. 수업소개 인터페이스는 클래스의 형태를 규정하는 약속이다. JAVA Interface - 2. 인터페이스의 형식 자바에서는 하나의 클래스가 한 개의 상속 받을 수 있지만 여러 개의 인터페이스를 구현할 수 있다.\r\n보통 인터페이스의 이름은 대문자로 시작하고 형용사로 쓸 때가 많다.\r\n인터페이스에는 메소드와 변수가 정의될 수 있는데 변수에는 값이 들어오고 메소드는 실제 구현이 들어가지 않는다. 그래서 저 메소드를 구현하는 클래스가 형태를 만족하는 메소드 내용을 직접 구현해야 한다. JAVA Interface - 3. 다형성 하나의 클래스가 여러 가지의 형태를 갖게 하는 것 JAVA Interface - 3. 사용설명서 속의 인터페이스 인터페이스는 동작 방법을 조작하는 방식을 표준화하는 데 아주 많이 사용된다. 생활코딩 JAVA 예외 강의 수강 1 ~ 9 완강 JAVA 예외 - 1. 수업 소…","fields":{"slug":"/TIL/22.01.06/"},"frontmatter":{"categories":"TIL","title":"22.01.06 TIL","date":"January 06, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.05/"}},"previous":{"fields":{"slug":"/TIL/22.01.07/"}}},{"node":{"id":"97ba24fb-cff7-5865-b812-bdf58138038c","excerpt":"생활코딩 JAVA 상속 강의 수강 1 ~ 6 완강 JAVA 상속 - 1. 수업소개 상속은 어떤 클래스가 있을 때 그 클래스가 가지고 있는 변수와 메소드를 확장해서 상속해서 다른 클래스가 갖도록 하는 것 그것을 통해서 재사용성을 높이고 유지보수에 편의성을 높이고 가독성을 높이고 코드의 양을 줄이는 목적을 달성할 수 있다. JAVA 상속 - 3. Overriding VS Overloading 오버라이딩(Overriding) : 재정의, 부모 클래스가 가진 기능을 덮어쓴다. 오버로딩(Overloading) : 과적, 자바에서는 같은 이름의 메소드를 형태만 다르게 사용하여 공존할 수 있다. 상속과는 상관이 없다. JAVA 상속 - 4. Overriding VS Overloading super는 부모, this는 자기 자신을 의미한다. JAVA 상속 - 5. 상속과 생성자 생성자가 있는 클래스를 상속받았다면 부모 클래스의 생성자를 반드시 호출해야 한다. JAVA 상속 - 6. 수업을 마치며…","fields":{"slug":"/TIL/22.01.05/"},"frontmatter":{"categories":"TIL","title":"22.01.05 TIL","date":"January 05, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.04/22.01.04/"}},"previous":{"fields":{"slug":"/TIL/22.01.06/"}}},{"node":{"id":"637f78ef-59d7-5996-a201-a8362e09650c","excerpt":"생활코딩 JAVA 객체지향 프로그래밍 강의 수강 1 ~ 9 완강 JAVA 객체지향 프로그래밍 - 1. 수업소개 method를 다른 컴퓨터 언어에서는 function, subroutine, procedural이라고 부른다.\r\n한국어로는 절차 지향적 프로그래밍, 영어로는 procedural programming이라고 불리는 프로그래밍의 패러다임은 procedure 즉 자바에서는 메소드라고 불리는 것을 이용해서 프로그램을 정리 정돈하는 프로그래밍기법이라고 할 수 있다. 메소드를 이용해서 작은 부품을 만들고 이것을 결합해서 더 큰 프로그램을 만들어 가는 테크닉이 procedural programming이다. 대표적인 언어는 C이다. 클래스를 중심으로 프로그램의 구조를 만들어가는 컴퓨터 프로그래밍 방법론을 객체지향 프로그래밍, 또 이런 방법론을 언어 차원에서 제공하는 언어들을 객체지향 언어라고 한다. JAVA 객체지향 프로그래밍 - 2. 남의 클래스 & 남의 인스턴스 Math라는 클래스가 …","fields":{"slug":"/TIL/22.01.04/22.01.04/"},"frontmatter":{"categories":"TIL","title":"22.01.04 TIL","date":"January 04, 2022"}},"next":{"fields":{"slug":"/TIL/22.01.03/"}},"previous":{"fields":{"slug":"/TIL/22.01.05/"}}},{"node":{"id":"551e39f5-a130-5e1b-b121-3295e0dfcdad","excerpt":"생활코딩 JAVA method 강의수강 1 ~ 9 완강 JAVA method - 1. 수업소개 연관된 코드를 모아서 그룹핑하고 거기에 이름을 붙이면 그것이 함수, 메소드라 한다. 메소드를 이용하면 복잡한 코드를 깔끔하게 정리할 수 있다. 이미 만들어 놓은 메소드를 사용하는 것을 통해서 똑같은 코드를 작성하지 않고 재사용할 수 있게 된다. JAVA method - 3. 메소드의 기본 형식 메소드의 이름으로 코드의 목적을 알릴 수 있고 프로그래밍 언어에서 리팩토링의 핵심적인 요소는 메소드이다. 리팩토링으로 코드를 메소드화 시킬 수 있다. JAVA method - 4. 메소드의 입력 메소드는 약속이다. main이란 메소드가 있어야 자바는 main이란 메소드를 호출해서 우리가 실행하고 싶은 프로그램을 실행시킨다. 매개변수(parameter) : 메소드 바깥쪽에서 메소드를 사용하는 쪽에서 주입한 값을 메소드 안으로 흘려보내 주는 매개자다. 인자(argument): 메소드 안에 주입된 구체적…","fields":{"slug":"/TIL/22.01.03/"},"frontmatter":{"categories":"TIL","title":"22.01.03 TIL","date":"January 03, 2022"}},"next":{"fields":{"slug":"/TIL/21.12.20/"}},"previous":{"fields":{"slug":"/TIL/22.01.04/22.01.04/"}}},{"node":{"id":"23f74313-064c-5a21-9798-8d34cdd5f100","excerpt":"생활코딩 JAVA 제어문 강의 수강 1 ~ 8.2 완강 JAVA 제어문 - 5. == VS equals 데이터 타입에는 더 이상 쪼갤 수 없는 원시(primitive) 데이터 타입과 비원시(non primitive) 데이터 타입으로 나눌 수 있는데 원시 데이터 타입은 변수들이 서로 같은 값을 가지고 있으면 그 값이 존재하는 주소를 가리키고 있지만 비원시 데이터 타입은 서로 같은 값을 가지고 있어도 값이 각각의 다른 주소에 저장이 된다. 동등비교연산자는 서로의 값이 같은 주소에 위치하는지 확인하는 연산자이고 .equals() 는 같은 값인지 비교 확인하는 메소드이다. 결론은 서로 같은 값을 가졌는지 확인하고자 한다면 원시 데이터타입은 동등비교연산자를 사용해도 무방하나 비원시 데이터타입은 .equals() 메소드를 사용하는 것이 좋다. 원시데이터 : boolean, int, double, short, long, float, char 비원시데이터 : String, Array, Date,…","fields":{"slug":"/TIL/21.12.20/"},"frontmatter":{"categories":"TIL","title":"21.12.20 TIL","date":"December 20, 2021"}},"next":{"fields":{"slug":"/TIL/21.12.17/"}},"previous":{"fields":{"slug":"/TIL/22.01.03/"}}},{"node":{"id":"acd12ba4-7172-57b7-ac30-6b3cab76c1c8","excerpt":"생활코딩 JAVA1 강의 수강 14.1 ~ 15 완강 JAVA1 - 14.6 나의 앱 만들기 - 조건문 조건문을 사용하게 되면 프로그램이 알아서 자신의 상황을 판단해서 어떻게 동작할지를 결정할 수 있기 때문에 하나의 프로그램으로 여러 가지 일을 할 수 있는 폭발적인 효과를 얻을 수 있다. JAVA1 - 14.7 나의 앱 만들기 - 배열 변수가 많아질수록 코드가 복잡해지기 때문에 서로 연관된 데이터를 정리 정돈하는 수단인 배열을 사용하여 코드를 명확하고 보기 쉽게 만들어 줄 수 있다. JAVA1 - 14.8 나의 앱 만들기 - 반복문 반복문은 동일한 코드를 여러 번 반복해서 데이터를 처리해야 할 경우에 사용하기 좋으며 반복문의 장점은 같은 코드를 일일이 여러 번 작성해야 할 것을 단 몇 줄 안에 코드를 작성할 수 있고 반복문 안의 코드 몇 개의 부분만 수정하면 여러 개의 로직이 동시에 수정될 수 있어 코드를 효율적으로 관리 할 수 있다. 배열과 같이 사용하면 폭발적인 효과를 얻을 수…","fields":{"slug":"/TIL/21.12.17/"},"frontmatter":{"categories":"TIL","title":"21.12.17 TIL","date":"December 17, 2021"}},"next":{"fields":{"slug":"/TIL/21.12.16/21.12.16/"}},"previous":{"fields":{"slug":"/TIL/21.12.20/"}}},{"node":{"id":"f6165483-1f9b-515e-932a-af25b550c12f","excerpt":"생활코딩 JAVA1 강의 수강 12.1 ~ 13.5 JAVA1 - 12.3 직접 컴파일하고 실행하기 : 컴파일과 실행하기 Windows 환경에서 명령 프롬프트를 이용한 컴파일과 실행하기 program.java 파일이 있는 디렉토리로 변경 명령어 : cd ~ program.java 파일을 컴파일하여 class 파일 만들기 명령어 : javac\r\n예) javac program.java\r\n명령어 dir로 .class 파일이 생긴 것을 확인할 수 있다. 프로그램 실행하기 명령어 : java (=java virtual machine)\r\n예) java program\r\nprogram.class 파일을 찾아 실행 .class 파일의 main 안에 있는 코드를 실행한다. JAVA1 - 12.4 직접 컴파일하고 실행하기 : 라이브러리 이용 라이브러리 : 다른 사람이 사용할 수 있도록 잘 정리 정돈된 프로그램들 JAVA1 - 13.1 자바 문서 보는 법 - API vs UI API : 우리가 자바를 …","fields":{"slug":"/TIL/21.12.16/21.12.16/"},"frontmatter":{"categories":"TIL","title":"21.12.16 TIL","date":"December 16, 2021"}},"next":{"fields":{"slug":"/TIL/21.12.15/"}},"previous":{"fields":{"slug":"/TIL/21.12.17/"}}},{"node":{"id":"848a0ee3-96ac-535c-83ba-c0fa195252c3","excerpt":"생활코딩 JAVA1 강의 수강 7 ~ 11.2 JAVA1 - 8.1 변수의 정의 자바에서 변수를 만들 때는 그 변수가 어떤 데이터 타입을 담을 수 있는지를 명확하게 표현해줘야 한다 각 데이터 타입으로 변수에 정의해 놓는 이유는 오류를 발견하기 쉽거나 줄일 수 있고 변수를 사용할 때마다 데이터 타입을 확인하지 않아도 되기 때문이다. (안정성과 확실성) JAVA1 - 8.2 변수의 효용 변수의 효용 : 특정 값의 수정이 필요할 때 변수 하나만 수정하면 모두 수정이 가능하다. 변수의 이름은 모든 사람이 봐도 그 의미를 바로 파악할 수 있도록 정한다. JAVA1 - 8.3 데이터 타입의 변환(casting) 형 변환(casting) : 데이터 타입을 다른 데이터 타입으로 컨버팅한다. JAVA1 - 9.1 프로그래밍이란 무엇인가? 프로그램 : 시간의 순서에 따라서 어떤 일이 일어나는 것 프로그래밍 : 컴퓨터로 어떠한 일을 순차적으로 실행이 되는 것을 통해서 사람이 잘하지 못하는 일을 기계에…","fields":{"slug":"/TIL/21.12.15/"},"frontmatter":{"categories":"TIL","title":"21.12.15 TIL","date":"December 15, 2021"}},"next":{"fields":{"slug":"/TIL/21.12.14/21.12.14/"}},"previous":{"fields":{"slug":"/TIL/21.12.16/21.12.16/"}}},{"node":{"id":"dc7d34d4-e05e-5629-bb67-a30ed49de66b","excerpt":"생활코딩 JAVA1 강의 수강 1 ~ 6.5 JAVA1 - 4.2 Java의 동작원리 JAVA1_4.2.PNG 사람이 이해할 수 있게 만들어진 컴퓨터 언어 JAVA로 소스 코드를 작성한다.(.java) 확장자가 .java 파일을 이해할 수 있도록 전환하는 작업인 컴파일로 컴퓨터가 이해할 수 있는 언어로 변환한다.(.class) Java Virtual Machine한테 클래스 파일을 실행하라고 시킨다. Java Virtual Machine이 확장자가 클래스인 파일을 읽어서 거기에 적혀있는 대로 컴퓨터를 동작시키게 된다. JAVA1 - 6.2 데이터 타입 데이터의 타입을 구분하는 이유는 데이터의 타입별로 그 타입의 어울리는 연산 방법이 있기 때문에 엄격하게 구분을 한다. 우리가 컴퓨터를 다루는 방법에 어떤 스킬을 쌓아 간다는 것은 두 가지의 중요한 흐름을 가진다. 내가 지금 하고 있는 시스템에는 어떤 종류의 데이터 타입들이 존재하는가를 알아가는 방향 각각의 데이터 타입별로 어떤 연산 …","fields":{"slug":"/TIL/21.12.14/21.12.14/"},"frontmatter":{"categories":"TIL","title":"21.12.14 TIL","date":"December 14, 2021"}},"next":null,"previous":{"fields":{"slug":"/TIL/21.12.15/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}