{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/TIL/22.01.07/",
    "result": {"data":{"cur":{"id":"c5cbc431-ea4c-5f90-890b-6952892a19a4","html":"<h1 id=\"-til\" style=\"position:relative;\"><a href=\"#-til\" aria-label=\" til permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❗ TIL</h1>\n<h2 id=\"생활코딩-java-abstract-강의-수강-1--3-완강\" style=\"position:relative;\"><a href=\"#%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9-java-abstract-%EA%B0%95%EC%9D%98-%EC%88%98%EA%B0%95-1--3-%EC%99%84%EA%B0%95\" aria-label=\"생활코딩 java abstract 강의 수강 1  3 완강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생활코딩 JAVA abstract 강의 수강 1 ~ 3 완강</h2>\n<hr>\n<blockquote>\n<p>JAVA abstract - 1. abstract의 문법</p>\n</blockquote>\n<p>abstract는 추상이라는 의미고 주목해야 할 특징은 abstract로 지정된 메소드나 클래스는 직접적으로 사용할 수가 없고 반드시 그것을 상속한 클래스를 만들어서 상속한 클래스를 사용하도록 강제하는 것이다. 추상 메소드, 추상 클래스라고 하는 것은 구체적인 로직을 담고 있지 않고 그 로직을 사용하기 위한 형식을 가지고 있다. 메소드 중에 하나라도 abstract라 지정되어 있다면 그 메소드를 담고 있는 클래스도 이름 앞에 abstract가 지정된다. 하지만 abstract라 지정된 클래스 안에는 구체적인 로직을 담은 메소드도 가질 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">int</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token comment\">//추상 클래스 내에는 추상 메소드가 아닌 메소드가 존재 할 수 있다. </span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>JAVA abstract - 2. abstract의 사용 이유</p>\n</blockquote>\n<p>상속을 강제하기 위한 규제, 부모 클래스에는 메소드의 시그니처만 정의해놓고 그 메소드의 실제 동작 방법은 이 메소드를 상속받는 하위 클래스의 책임으로 위임한다. 다양한 맥락에서 사용될 수 있는 기능이 있을 때 그 기능의 공통적인 부분이 있고 맥락에 따라서 사용하는 용도에 따라서 달라질 수 있는 기능들이 있을 때 그것을 추상 클래스로 만들어서 추상 클래스에는 공통으로 사용되는 로직을 구현하고 그것을 상속받은 하위클래스에서는 용도에 따라서 달라지는 구현을 사용자가 직접 하도록 강제하는 것이 추상 클래스를 사용하는 용도이다.</p>\n<blockquote>\n<p>JAVA abstract - 3. 디자인 패턴</p>\n</blockquote>\n<p>디자인 패턴은 프로그래밍에서 자주 사용하는 패턴을 모아서 정리한 것을 말한다.\r\n디자인 패턴을 이용하면 프로그래밍 스킬을 단번에 향상시킬 수 있는 아주 중요한 것이고 다른 사람이 만든 코드를 볼 때 디자인 패턴으로 쉽게 이해 할 수 있다.</p>\n<hr>\n<h2 id=\"-틀렸거나-잘못된-정보가-있다면-망설임-없이-댓글로-알려주세요\" style=\"position:relative;\"><a href=\"#-%ED%8B%80%EB%A0%B8%EA%B1%B0%EB%82%98-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%A7%9D%EC%84%A4%EC%9E%84-%EC%97%86%EC%9D%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\" 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요!</h2>","excerpt":"❗ TIL 생활코딩 JAVA abstract 강의 수강 1 ~ 3 완강 JAVA abstract - 1. abstract의 문법 abstract는 추상이라는 의미고 주목해야 할 특징은 abstract로 지정된 메소드나 클래스는 직접적으로 사용할 수가 없고 반드시 그것을 상속한 클래스를 만들어서 상속한 클래스를 사용하도록 강제하는 것이다. 추상 메소드, 추상 클래스라고 하는 것은 구체적인 로직을 담고 있지 않고 그 로직을 사용하기 위한 형식을 가지고 있다. 메소드 중에 하나라도 abstract라 지정되어 있다면 그 메소드를 담고 있는 클래스도 이름 앞에 abstract가 지정된다. 하지만 abstract라 지정된 클래스 안에는 구체적인 로직을 담은 메소드도 가질 수도 있다. JAVA abstract - 2. abstract의 사용 이유 상속을 강제하기 위한 규제, 부모 클래스에는 메소드의 시그니처만 정의해놓고 그 메소드의 실제 동작 방법은 이 메소드를 상속받는 하위 클래스의 책임으로…","frontmatter":{"date":"January 07, 2022","title":"22.01.07 TIL","categories":"TIL","author":"95Donguk","emoji":"❗"},"fields":{"slug":"/TIL/22.01.07/"}},"next":{"id":"5c7fdb57-30c6-5a03-bfa1-c7833cf86506","html":"<h1 id=\"-til\" style=\"position:relative;\"><a href=\"#-til\" aria-label=\" til permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❗ TIL</h1>\n<h2 id=\"생활코딩-java-interface-강의-수강-1--5-완강\" style=\"position:relative;\"><a href=\"#%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9-java-interface-%EA%B0%95%EC%9D%98-%EC%88%98%EA%B0%95-1--5-%EC%99%84%EA%B0%95\" aria-label=\"생활코딩 java interface 강의 수강 1  5 완강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생활코딩 JAVA interface 강의 수강 1 ~ 5 완강</h2>\n<hr>\n<blockquote>\n<p>JAVA Interface - 1. 수업소개</p>\n</blockquote>\n<p>인터페이스는 클래스의 형태를 규정하는 약속이다.</p>\n<blockquote>\n<p>JAVA Interface - 2. 인터페이스의 형식</p>\n</blockquote>\n<p>자바에서는 하나의 클래스가 한 개의 상속 받을 수 있지만 여러 개의 인터페이스를 구현할 수 있다.\r\n보통 인터페이스의 이름은 대문자로 시작하고 형용사로 쓸 때가 많다.\r\n인터페이스에는 메소드와 변수가 정의될 수 있는데 변수에는 값이 들어오고 메소드는 실제 구현이 들어가지 않는다. 그래서 저 메소드를 구현하는 클래스가 형태를 만족하는 메소드 내용을 직접 구현해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Calculable</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">double</span> PI <span class=\"token operator\">=</span> <span class=\"token number\">3.141592</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Printable</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cal</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Calculable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Printable</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> v1<span class=\"token operator\">+</span>v2<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is Cal!!!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>JAVA Interface - 3. 다형성</p>\n</blockquote>\n<p>하나의 클래스가 여러 가지의 형태를 갖게 하는 것</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Calculable</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">double</span> PI <span class=\"token operator\">=</span> <span class=\"token number\">3.141592</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Printable</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cal</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Calculable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Printable</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> v1<span class=\"token operator\">+</span>v2<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is Cal!!!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InterfaceApp</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">// Cal 클래스에서 Printable에 해당하는 기능을 제외한 나머지 메소드와 변수는 감춰 필요한 기능만 사용할 수 있게 바꾼다(다형성)</span>\r\n        <span class=\"token class-name\">Printable</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \r\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>JAVA Interface - 3. 사용설명서 속의 인터페이스</p>\n</blockquote>\n<p>인터페이스는 동작 방법을 조작하는 방식을 표준화하는 데 아주 많이 사용된다.</p>\n<h2 id=\"생활코딩-java-예외-강의-수강-1--9-완강\" style=\"position:relative;\"><a href=\"#%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9-java-%EC%98%88%EC%99%B8-%EA%B0%95%EC%9D%98-%EC%88%98%EA%B0%95-1--9-%EC%99%84%EA%B0%95\" aria-label=\"생활코딩 java 예외 강의 수강 1  9 완강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생활코딩 JAVA 예외 강의 수강 1 ~ 9 완강</h2>\n<blockquote>\n<p>JAVA 예외 - 1. 수업 소개</p>\n</blockquote>\n<p>자바에서는 ERROR와 EXCEPTION을 구분한다.</p>\n<p>ERROR는 내가 만든 프로그램의 문제가 아닌 그 프로그램이 동작하는 환경의 문제\r\n예) 메모리 부족, 운영체제 문제</p>\n<p>EXCEPTION : 내가 의도한 것과는 다른 상황에 직면했을 때의 문제\r\n예) 사용자가 예상하지 못한 값을 입력해서 예외적인 상황이 발생했을 때</p>\n<blockquote>\n<p>JAVA 예외 - 6. checked exception vs unchecked exception</p>\n</blockquote>\n<p>unchecked exception : RuntimeException을 포함한 그의 자식 예외클래스</p>\n<p>checked exception : Exception에서 RuntimeException을 제외한 나머지 예외클래스</p>\n<p>checked exception의 경우 try catch 문이나 throws 라는 것을 통해서 예외에 대한 조치를 반드시 취해야 한다.</p>\n<blockquote>\n<p>JAVA 예외 - 8. try with resource</p>\n</blockquote>\n<p>try with resource: 리소스 작업을 포함하는 프로그램의 예외 처리를 할 수 있도록 도와주는 기능</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">        <span class=\"token comment\">// try with resource statements</span>\r\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileWriter</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            f<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token comment\">// .close() 내부적으로 수행</span>\r\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            <span class=\"token comment\">// printStackTrace() : 에러의 정보를 화면에 출력 할 때 사용</span>\r\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \r\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"-틀렸거나-잘못된-정보가-있다면-망설임-없이-댓글로-알려주세요\" style=\"position:relative;\"><a href=\"#-%ED%8B%80%EB%A0%B8%EA%B1%B0%EB%82%98-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%A7%9D%EC%84%A4%EC%9E%84-%EC%97%86%EC%9D%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\" 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요!</h2>","frontmatter":{"date":"January 06, 2022","title":"22.01.06 TIL","categories":"TIL","author":"95Donguk","emoji":"❗"},"fields":{"slug":"/TIL/22.01.06/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://95donguk.github.io","comments":{"utterances":{"repo":"95Donguk/95Donguk.github.io"}}}}},"pageContext":{"slug":"/TIL/22.01.07/","nextSlug":"/TIL/22.01.06/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}