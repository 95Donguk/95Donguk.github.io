{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/TIL/22.02.15/",
    "result": {"data":{"cur":{"id":"44ed3965-b8d6-51c5-bab8-328ce8a5a136","html":"<h1 id=\"디자인-패턴-핵심-정리\" style=\"position:relative;\"><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%ED%95%B5%EC%8B%AC-%EC%A0%95%EB%A6%AC\" aria-label=\"디자인 패턴 핵심 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디자인 패턴 핵심 정리</h1>\n<p>디자인 패턴은 프로그램 개발에서 자주 나타나는 과제를 해결하기 위한 방법의 하나로 과거 소프트웨어 개발 과정에서 발견된 설계의 노하우를 축적하여 이름을 붙여, 이후에 재사용하기 좋은 형태로 정리한 것</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">용도</th>\n<th align=\"left\">특징 및 종류</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">생성 패턴</td>\n<td align=\"left\">객체 생성 방식을 결정하는 패턴<br>프로토타입 패턴, 싱글톤 패턴, 빌더 패턴, 팩토리 메서드 패턴, 추상 팩토리 패턴</td>\n</tr>\n<tr>\n<td align=\"center\">구조 패턴</td>\n<td align=\"left\">객체를 조직화하는데 유용한 패턴(합성에 관여)<br>브릿지 패턴, 컴포짓 패턴, 어댑터 패턴, 데코레이터 패턴, 퍼사드 패턴, 프록시 패턴, 플라이웨이트 패턴</td>\n</tr>\n<tr>\n<td align=\"center\">행동 패턴</td>\n<td align=\"left\">객체들이 상호작용을 조정 관리하는 패턴<br>커맨드 패턴, 인터프리터 패턴, 메멘토 패턴, 옵저버 패턴, 이터레이터 패턴, 중재자 패턴, 상태 패턴, 전략 패턴, 방문자 패턴, 템플릿 메서드 패턴, 책임 연쇄 패턴</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"생성-패턴\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1-%ED%8C%A8%ED%84%B4\" aria-label=\"생성 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성 패턴</h2>\n<h3 id=\"프로토타입-패턴prototype-pattern\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%ED%8C%A8%ED%84%B4prototype-pattern\" aria-label=\"프로토타입 패턴prototype pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로토타입 패턴(Prototype Pattern)</h3>\n<ul>\n<li>\n<p>미리 만들어진 객체를 복제하여 새로운 객체를 생성하는 패턴이다.</p>\n</li>\n<li>\n<p>객체 생성에 원형이 되는 견본을 이용하는 패턴이다.</p>\n</li>\n<li>\n<p>다수의 객체 생성 비용을 효과적으로 줄일 수 있다.</p>\n</li>\n</ul>\n<h3 id=\"싱글톤-패턴singleton-pattern\" style=\"position:relative;\"><a href=\"#%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4singleton-pattern\" aria-label=\"싱글톤 패턴singleton pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>싱글톤 패턴(Singleton Pattern)</h3>\n<ul>\n<li>\n<p>어떤 클래스에 대한 객체는 오직 하나임을 보장하는 패턴이다.</p>\n</li>\n<li>\n<p>생성된 객체에 접근할 수 있는 전역적인 접근점을 제공하는 패턴이다.</p>\n</li>\n</ul>\n<h3 id=\"빌더-패턴builder-pattern\" style=\"position:relative;\"><a href=\"#%EB%B9%8C%EB%8D%94-%ED%8C%A8%ED%84%B4builder-pattern\" aria-label=\"빌더 패턴builder pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빌더 패턴(Builder Pattern)</h3>\n<ul>\n<li>\n<p>복합 객체를 생성하는 방법과 객체를 조립하는 방법을 분리하는 것이 목적이다.</p>\n</li>\n<li>\n<p>복합 객체를 생성하는 절차를 좀 더 세밀하게 나눌 수 있다.</p>\n</li>\n<li>\n<p>동일한 객체 생성 절차에서 조립 방법에 따라 다른 결과를 만들 수 있게 하는 패턴이다.</p>\n</li>\n<li>\n<p>객체 조립 순서에 따라 다른 결과를 만들 수 있게 하는 패턴이다.</p>\n</li>\n</ul>\n<h3 id=\"팩토리-메서드-패턴factory-method-pattern\" style=\"position:relative;\"><a href=\"#%ED%8C%A9%ED%86%A0%EB%A6%AC-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%8C%A8%ED%84%B4factory-method-pattern\" aria-label=\"팩토리 메서드 패턴factory method pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>팩토리 메서드 패턴(Factory Method Pattern)</h3>\n<ul>\n<li>\n<p>모든 <strong>객체 생성을 팩토리 클래스에 위임하는 패턴</strong>이다.</p>\n</li>\n<li>\n<p>팩토리 클래스를 만드는 패턴이다.</p>\n</li>\n<li>\n<p><strong>객체 생성하는 시점을 자식클래스로 미루는 패턴</strong>이다.</p>\n</li>\n<li>\n<p>조건에 따라 객체를 다르게 생성해야 할 때 사용할 수 있다.</p>\n</li>\n</ul>\n<h3 id=\"추상-팩토리-패턴abstract-factory-pattern\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EC%83%81-%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4abstract-factory-pattern\" aria-label=\"추상 팩토리 패턴abstract factory pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추상 팩토리 패턴(Abstract Factory Pattern)</h3>\n<ul>\n<li>\n<p>구체적 클래스는 지정하지 않고, 서로 관련이 있는 구성요소별로 <strong>객체 집합을 생성</strong>한다.</p>\n</li>\n<li>\n<p>서로 독립적인 객체들의 집합을 생성할 수 있는 인터페이스를 제공하는 패턴이다.</p>\n</li>\n<li>\n<p>팩토리 메서드 패턴을 좀 더 캡슐화한 방식이라고 볼 수 있다.</p>\n</li>\n</ul>\n<h2 id=\"구조-패턴\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0-%ED%8C%A8%ED%84%B4\" aria-label=\"구조 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조 패턴</h2>\n<h3 id=\"브릿지-패턴bridge-pattern\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%A6%BF%EC%A7%80-%ED%8C%A8%ED%84%B4bridge-pattern\" aria-label=\"브릿지 패턴bridge pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브릿지 패턴(Bridge Pattern)</h3>\n<ul>\n<li>\n<p>구현부에서 추상층를 분리하여 각각 독립적으로 변형할 수 있는 패턴이다.</p>\n</li>\n<li>\n<p>추상과 구현을 분리하여 각각 독립적으로 변경해도 서로 영향을 주지 않는다.</p>\n</li>\n</ul>\n<h3 id=\"컴포짓-패턴composite-pattern\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EC%A7%93-%ED%8C%A8%ED%84%B4composite-pattern\" aria-label=\"컴포짓 패턴composite pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포짓 패턴(Composite Pattern)</h3>\n<ul>\n<li>\n<p>0개 또는 그 이상의 객체를 묶어 <strong>하나의 객체</strong>로 이용한다.</p>\n</li>\n<li>\n<p>복합 개체와 단일 개체를 같은 방법으로 사용할 수 있는 패턴이다.</p>\n</li>\n<li>\n<p><strong>트리 구조</strong>로 관리하고자 할 때 자주 사용이 된다.</p>\n<ul>\n<li>예 : 폴더(복합 개체)와 파일(단일 개체)을 같은 방법으로 사용할 수 있는 패턴이다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"어댑터-패턴adapter-pattern\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%8C%91%ED%84%B0-%ED%8C%A8%ED%84%B4adapter-pattern\" aria-label=\"어댑터 패턴adapter pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어댑터 패턴(Adapter Pattern)</h3>\n<ul>\n<li>\n<p>인터페이스를 사용자가 기대하는 <strong>다른 인터페이스로 변환</strong>하는 패턴이다.</p>\n</li>\n<li>\n<p>객체를 감싸서 다른 인터페이스를 제공한다.(Wrapper pattern이라고도 함)</p>\n</li>\n<li>\n<p>인터페이스가 호환되지 않는 클래스들을 함께 이용할 수 있도록 다른 클래스의 인터페이스를 기존 인터페이스에 덧붙인다.</p>\n</li>\n<li>\n<p>일관성 있는 인터페이스를 사용할 수 있도록 한다.</p>\n</li>\n</ul>\n<h3 id=\"데코레이터-패턴decorator-pattern\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%8C%A8%ED%84%B4decorator-pattern\" aria-label=\"데코레이터 패턴decorator pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데코레이터 패턴(Decorator Pattern)</h3>\n<ul>\n<li>\n<p><strong>상속을 사용하지 않고 객체의 기능을 동적으로 확장</strong>할 수 있다.</p>\n</li>\n<li>\n<p>주어진 상황 및 용도에 따라 어떤 객체에 책임을 덧붙이는 패턴이다.</p>\n</li>\n</ul>\n<h3 id=\"퍼사드-패턴facade-pattern\" style=\"position:relative;\"><a href=\"#%ED%8D%BC%EC%82%AC%EB%93%9C-%ED%8C%A8%ED%84%B4facade-pattern\" aria-label=\"퍼사드 패턴facade pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>퍼사드 패턴(Facade Pattern)</h3>\n<ul>\n<li>\n<p>많은 분량의 코드에 접근할 수 있는 <strong>단순한 인터페이스</strong>를 제공</p>\n</li>\n<li>\n<p>서브시스템에 있는 인터페이스의 집합에 대해서 하나의 통합된 인터페이스를 제공하는 패턴이다.</p>\n</li>\n<li>\n<p>서브시스템에 있는 객체들을 사용할 수 있도록 인터페이스 역할을 한다.</p>\n</li>\n<li>\n<p>서브시스템의 가장 앞쪽에 위치하여 인터페이스 역할을 한다.</p>\n</li>\n</ul>\n<h3 id=\"프록시-패턴proxy-pattern\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9D%EC%8B%9C-%ED%8C%A8%ED%84%B4proxy-pattern\" aria-label=\"프록시 패턴proxy pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프록시 패턴(Proxy Pattern)</h3>\n<ul>\n<li>\n<p>실제 기능을 수행하는 객체 대신 가상의 객체를 사용하여 흐름을 제어하는 패턴이다.</p>\n</li>\n<li>\n<p>어떤 객체에 대한 접근통제를 위해 그 객체의 <strong>대리자(Surrogate)를 제공</strong>하는 패턴이다.</p>\n</li>\n</ul>\n<h3 id=\"플라이웨이트-패턴flyweight-pattern\" style=\"position:relative;\"><a href=\"#%ED%94%8C%EB%9D%BC%EC%9D%B4%EC%9B%A8%EC%9D%B4%ED%8A%B8-%ED%8C%A8%ED%84%B4flyweight-pattern\" aria-label=\"플라이웨이트 패턴flyweight pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>플라이웨이트 패턴(Flyweight Pattern)</h3>\n<ul>\n<li>\n<p>크기가 작은 객체가 여러 개 있을 때, 공유를 통해 이들을 효율적으로 지원하는 패턴이다.</p>\n</li>\n<li>\n<p>객체의 상태를 공유 풀(pool)에 형성하여 <strong>메모리 절약</strong>하기 위한 패턴이다.</p>\n</li>\n</ul>\n<h2 id=\"행동-패턴\" style=\"position:relative;\"><a href=\"#%ED%96%89%EB%8F%99-%ED%8C%A8%ED%84%B4\" aria-label=\"행동 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>행동 패턴</h2>\n<h3 id=\"커맨드-패턴command-pattern\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%A7%A8%EB%93%9C-%ED%8C%A8%ED%84%B4command-pattern\" aria-label=\"커맨드 패턴command pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커맨드 패턴(Command Pattern)</h3>\n<ul>\n<li>\n<p><strong>요청 자체를 캡슐화</strong> 한다.</p>\n</li>\n<li>\n<p>이를 통해 요청이 서로 다른 사용자(client)를 매개변수로 만들고, 요청을 대기시키거나 로깅(logging)하여 되돌릴 수 있는 연산을 지원한다.</p>\n</li>\n<li>\n<p>명령 패턴은 명령(command), 수신자(receiver), 발동자(invoke), 클라이언트로 구성된다.</p>\n</li>\n</ul>\n<h3 id=\"인터프리터-패턴interpreter-pattern\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0-%ED%8C%A8%ED%84%B4interpreter-pattern\" aria-label=\"인터프리터 패턴interpreter pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터프리터 패턴(Interpreter Pattern)</h3>\n<ul>\n<li>\n<p>데이터를 주고받을 때, <strong>쉽게 데이터를 해석할 수 있도록 정의</strong>하는 패턴이다.</p>\n</li>\n<li>\n<p>보통 서버와 클라이언트 사이의 데이터 통신에는 문자열이나 비트를 사용한다. 문자열 하나의 패턴으로 등록하여, 코드 내에서 사용할 수 있도록 규격화 작업이 필요하다. 이런 작업을 수행하는 패턴이 인터프리터 패턴이다.</p>\n</li>\n<li>\n<p>인터프리터 패턴은 언어의 문법을 클래스로 표현한다.</p>\n</li>\n<li>\n<p>해당 언어로 작성된 문장을 해석하는 해석기를 정의하는 패턴이다.</p>\n</li>\n</ul>\n<h3 id=\"메멘토-패턴memento-pattern\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EB%A9%98%ED%86%A0-%ED%8C%A8%ED%84%B4memento-pattern\" aria-label=\"메멘토 패턴memento pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메멘토 패턴(Memento Pattern)</h3>\n<ul>\n<li>\n<p>객체의 상태 보존과 관련이 있다.</p>\n</li>\n<li>\n<p><strong>객체를 이전 상태로 되돌릴 수 있는 기능</strong>을 제공하는 패턴이다.</p>\n</li>\n<li>\n<p>메멘토 패턴은 롤백(rollback)을 이용하여 실행을 취소한다.</p>\n</li>\n</ul>\n<h3 id=\"옵저버-패턴observer-pattern\" style=\"position:relative;\"><a href=\"#%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A8%ED%84%B4observer-pattern\" aria-label=\"옵저버 패턴observer pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옵저버 패턴(Observer Pattern)</h3>\n<ul>\n<li>\n<p>어떤 <strong>객체의 상태가 변할 때</strong> 그 객체의 의존성을 가진 다른 객체들이 <strong>그 변화를 통지받고 자동으로 갱신</strong>될 수 있게 만드는 패턴이다.</p>\n</li>\n<li>\n<p>객체 사이에 일대다의 의존관계를 정의하고, 어떤 객체의 상태가 변할 때 이 객체와 의존관계인 다른 객체들이 그 변화를 통지받고 자동 갱신될 수 있게 만드는 패턴이다.</p>\n</li>\n</ul>\n<h3 id=\"이터레이터-패턴iterator-pattern\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%8C%A8%ED%84%B4iterator-pattern\" aria-label=\"이터레이터 패턴iterator pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이터레이터 패턴(Iterator Pattern)</h3>\n<ul>\n<li>\n<p>어떤 <strong>집합체의 구성요소들을 차례로 접근하기 위한 것이다.</strong></p>\n<ul>\n<li>집합체는 배열, 연결리스트, 스택, 큐 등을 의미한다.</li>\n</ul>\n</li>\n<li>\n<p>내부표현을 노출하지 않고, 집합체 원소들의 접근 방법을 제공하는 패턴이다.</p>\n</li>\n</ul>\n<h3 id=\"중재자-패턴mediator-pattern\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EC%9E%AC%EC%9E%90-%ED%8C%A8%ED%84%B4mediator-pattern\" aria-label=\"중재자 패턴mediator pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중재자 패턴(Mediator Pattern)</h3>\n<ul>\n<li>\n<p>조정자 패턴이라고도 한다.</p>\n</li>\n<li>\n<p>이 패턴을 사용하면 객체 사이의 통신은 중재자 객체 안에 함축된다.</p>\n</li>\n<li>\n<p>객체들은 더는 다른 객체와 서로 직접 통신하지 않으며 대신 중재자를 통해 통신한다.</p>\n</li>\n<li>\n<p>이 패턴은 <strong>객체 사이의 관계가 매우 복잡</strong>하여 객체 재사용에 부담 갈 경우에 사용한다.</p>\n</li>\n</ul>\n<h3 id=\"상태-패턴state-pattern\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%83%9C-%ED%8C%A8%ED%84%B4state-pattern\" aria-label=\"상태 패턴state pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상태 패턴(State Pattern)</h3>\n<ul>\n<li>\n<p>객체지향방식으로 <strong>상태기계를 구현하는 패턴</strong>이다.</p>\n</li>\n<li>\n<p>객체의 내부상태에 따라 스스로 행동을 변경할 수 있도록 허가하는 패턴이다.</p>\n</li>\n<li>\n<p>객체는 마치 자신의 클래스를 바꾸는 것처럼 보인다.</p>\n</li>\n</ul>\n<h3 id=\"전략-패턴strategy-pattern\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EB%9E%B5-%ED%8C%A8%ED%84%B4strategy-pattern\" aria-label=\"전략 패턴strategy pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전략 패턴(Strategy Pattern)</h3>\n<ul>\n<li>\n<p><strong>알고리즘 교체</strong>에 유용(알고리즘 변형이 필요한 경우에 유용)</p>\n</li>\n<li>\n<p>이 패턴은 알고리즘을 객체화하여 같은 문제에 다양한 알고리즘을 적용할 수 있다.</p>\n</li>\n<li>\n<p>동일 계열의 알고리즘 군을 정의하고, 각 알고리즘은 캡슐화하며, 각 알고리즘들이 상호교환할 수 있도록 만드는 패턴이다.</p>\n</li>\n</ul>\n<h3 id=\"방문자-패턴visitor-pattern\" style=\"position:relative;\"><a href=\"#%EB%B0%A9%EB%AC%B8%EC%9E%90-%ED%8C%A8%ED%84%B4visitor-pattern\" aria-label=\"방문자 패턴visitor pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>방문자 패턴(Visitor Pattern)</h3>\n<ul>\n<li>\n<p><strong>알고리즘을 객체구조에서 분리</strong>시키는 패턴이다.</p>\n</li>\n<li>\n<p>알고리즘을 분리하면 객체구조를 수정하지 않고도 새로운 연산을 정의할 수 있다.</p>\n</li>\n<li>\n<p>실질적으로 새로운 연산을 기존의 객체구조에 추가할 수 있다.</p>\n</li>\n<li>\n<p>개방-폐쇄 원칙을 적용하는 하나의 방법이다.</p>\n</li>\n</ul>\n<h3 id=\"템플릿-메서드-패턴template-method-pattern\" style=\"position:relative;\"><a href=\"#%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%8C%A8%ED%84%B4template-method-pattern\" aria-label=\"템플릿 메서드 패턴template method pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>템플릿 메서드 패턴(Template Method Pattern)</h3>\n<ul>\n<li>\n<p><strong>알고리즘의 뼈대를 정의</strong>하는 패턴이다.</p>\n</li>\n<li>\n<p>알고리즘 구조를 변경하지 않고 알고리즘의 각 단계들을 다시 정의할 수 있도록 한다.</p>\n</li>\n<li>\n<p>각 단계의 처리를 자식클래스에서 재정의할 수 있다.</p>\n</li>\n</ul>\n<h3 id=\"책임-연쇄-패턴chain-of-responsibility-pattern\" style=\"position:relative;\"><a href=\"#%EC%B1%85%EC%9E%84-%EC%97%B0%EC%87%84-%ED%8C%A8%ED%84%B4chain-of-responsibility-pattern\" aria-label=\"책임 연쇄 패턴chain of responsibility pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>책임 연쇄 패턴(Chain Of Responsibility Pattern)</h3>\n<ul>\n<li>\n<p>명령 객체와 일련의 처리 객체를 포함하는 패턴이다.</p>\n<ul>\n<li>처리 객체는 명령 객체를 처리할 수 있는 연산의 집합이다.</li>\n</ul>\n</li>\n<li>\n<p>객체는 연결리스트처럼 체인을 형성한다.</p>\n</li>\n<li>\n<p>요청을 보내는 객체와 그 요청을 받는 객체 사이의 결합을 피하는 패턴이다.</p>\n</li>\n<li>\n<p>요청을 처리할 기회를 하나 이상의 객체에 부여한다.</p>\n</li>\n<li>\n<p>요청을 받을 수 있는 객체를 체인으로 묶고, 실제 요청을 처리하는 객체를 만날 때까지 객체 체인을 따라서 요청을 전달한다.</p>\n</li>\n<li>\n<p>이 패턴은 책임을 다른 객체에 떠넘기는 것과 같다.</p>\n</li>\n</ul>\n<h2 id=\"디자인-패턴-적용-규칙\" style=\"position:relative;\"><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EC%A0%81%EC%9A%A9-%EA%B7%9C%EC%B9%99\" aria-label=\"디자인 패턴 적용 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디자인 패턴 적용 규칙</h2>\n<ol>\n<li>\n<p>결합(Coupling)을 최소화한다.</p>\n<ul>\n<li>\n<p>어떤 하나의 클래스 변화가 전체 클래스를 변화시키지 않도록 해야 한다.</p>\n</li>\n<li>\n<p>God Class를 만들지 않는다.(God Class: 다수의 기능을 처리하는 클래스 -> Bad Class)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>상속(inheritance)이 아니라 위임(delegation)을 이용하여 프로그래밍한다.</p>\n<ul>\n<li>\n<p>객체지향 프로그램에서 상속을 남용하는 것을 좋지 않다.</p>\n</li>\n<li>\n<p>위임은 상속의 문제점을 해결할 수 있는 대안이다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>인터페이스(interface)를 이용하여 프로그래밍한다.</p>\n<ul>\n<li>\n<p>인터페이스를 이용한다는 것은 구현된 클래스를 직접 이용하지 않는다는 것이다. 다르게 말하면, 인터페이스에 선언된 메서드를 호출하는 원리로 프로그래밍한다.</p>\n</li>\n<li>\n<p>인터페이스를 이용하면 구현한 클래스 내부 변화에 영향을 받지 않는다.</p>\n</li>\n<li>\n<p>구현(implementation) 클래스를 직접 이용하면, 프로그램 변경이 어렵게 된다.</p>\n<ul>\n<li>프로그램 변경이 어렵다는 것은 유지보수가 어렵다는 것이다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"인터페이스\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"인터페이스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터페이스</h3>\n<ul>\n<li>인터페이스는 일관된 공통 특징과 의무의 선언을 나타내는 클래스</li>\n<li>인터페이스는 선언이므로 즉각적으로 사용할 수 없다.</li>\n<li>인터페이스는 계약을 명시한다.</li>\n<li>인터페이스를 실현하는 클래스는 인터페이스에 선언된 그 계약을 이행해야 한다.</li>\n<li>인터페이스는 다수의 서로 다른 클래스에 의해 구현될 수 있다.</li>\n</ul>\n<h2 id=\"디자인-패턴-장단점\" style=\"position:relative;\"><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"디자인 패턴 장단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디자인 패턴 장단점</h2>\n<table>\n<thead>\n<tr>\n<th align=\"center\">장점</th>\n<th align=\"center\">단점</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">코드 품질 향상<br>시스템 개발에 공통 언어 역할을 한다<br>유지보수 용이<br>향후 변화에 대비할 수 있다</td>\n<td align=\"center\">잘못 사용된 패턴은 개발 생산성을 저하시킨다<br>잘못 해석된 패턴은 재사용성을 저하시킨다<br>잘못 사용된 패턴은 유지보수를 저하시킨다<br>설계자가 패턴을 숙지하는데 오랜 시간이 필요하다.</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2 id=\"-틀렸거나-잘못된-정보가-있다면-망설임-없이-댓글로-알려주세요\" style=\"position:relative;\"><a href=\"#-%ED%8B%80%EB%A0%B8%EA%B1%B0%EB%82%98-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%A7%9D%EC%84%A4%EC%9E%84-%EC%97%86%EC%9D%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\" 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요!</h2>","excerpt":"디자인 패턴 핵심 정리 디자인 패턴은 프로그램 개발에서 자주 나타나는 과제를 해결하기 위한 방법의 하나로 과거 소프트웨어 개발 과정에서 발견된 설계의 노하우를 축적하여 이름을 붙여, 이후에 재사용하기 좋은 형태로 정리한 것 용도 특징 및 종류 생성 패턴 객체 생성 방식을 결정하는 패턴프로토타입 패턴, 싱글톤 패턴, 빌더 패턴, 팩토리 메서드 패턴, 추상 팩토리 패턴 구조 패턴 객체를 조직화하는데 유용한 패턴(합성에 관여)브릿지 패턴, 컴포짓 패턴, 어댑터 패턴, 데코레이터 패턴, 퍼사드 패턴, 프록시 패턴, 플라이웨이트 패턴 행동 패턴 객체들이 상호작용을 조정 관리하는 패턴커맨드 패턴, 인터프리터 패턴, 메멘토 패턴, 옵저버 패턴, 이터레이터 패턴, 중재자 패턴, 상태 패턴, 전략 패턴, 방문자 패턴, 템플릿 메서드 패턴, 책임 연쇄 패턴 생성 패턴 프로토타입 패턴(Prototype Pattern) 미리 만들어진 객체를 복제하여 새로운 객체를 생성하는 패턴이다. 객체 생성에 원형이…","frontmatter":{"date":"February 15, 2022","title":"22.02.15 TIL","categories":"TIL","author":"95Donguk","emoji":"❗"},"fields":{"slug":"/TIL/22.02.15/"}},"next":{"id":"7dea03c4-f9ff-5b6f-a172-5a76c9697f0e","html":"<h1 id=\"프로그래머스의-자바-중급-수강\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%EC%9D%98-%EC%9E%90%EB%B0%94-%EC%A4%91%EA%B8%89-%EC%88%98%EA%B0%95\" aria-label=\"프로그래머스의 자바 중급 수강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로그래머스의 <a href=\"https://programmers.co.kr/learn/courses/9\">자바 중급</a> 수강</h1>\n<blockquote>\n<h2 id=\"쓰레드와-상태제어\" style=\"position:relative;\"><a href=\"#%EC%93%B0%EB%A0%88%EB%93%9C%EC%99%80-%EC%83%81%ED%83%9C%EC%A0%9C%EC%96%B4\" aria-label=\"쓰레드와 상태제어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쓰레드와 상태제어</h2>\n</blockquote>\n<p>쓰레드가 3개가 있다면 JVM은 시간을 잘게 쪼갠 후에 한번은 쓰레드1을, 한번은 쓰레드 2를, 한번은 쓰레드 3을 실행한다. 이것이 빠르게 일어나다 보니 쓰레드가 모두 동작하는 것처럼 보이는 것이다.</p>\n<ul>\n<li>\n<p>쓰레드는 실행 가능 상태인 Runnable과 실행상태인 Running 상태로 나뉜다.</p>\n</li>\n<li>\n<p>실행되는 쓰레드 안에서 Thread.sleep()이나 Object가 가지고 있는 wait()메소드가 호출이 되면 쓰레드는 블록 상태가 된다.</p>\n</li>\n<li>\n<p>Thread.sleep()은 특정 시간이 지나면 자신 스스로 블록 상태에서 빠져나와 Runnable이나 Running 상태가 된다.</p>\n</li>\n<li>\n<p>Object가 가지고 있는 wait()메소드는 다른 쓰레드가 notify()나 notifyAll()메소드를 호출하기 전에는 블록 상태에서 해제되지 않는다.</p>\n</li>\n<li>\n<p>wait()메소드는 호출이 되면 모니터링 락을 놓게 된다. 그래서 대기 중인 다른 메소드가 실행한다.</p>\n</li>\n<li>\n<p>쓰레드의 run메소드가 종료되면, 쓰레드는 종료된다. 즉 Dead 상태가 된다.</p>\n</li>\n<li>\n<p>Thread의 yeild메소드가 호출되면 해당 쓰레드는 다른 쓰레드에게 자원을 양보하게 된다.</p>\n</li>\n<li>\n<p>Thread가 가지고 있는 join메소드를 호출하게 되면 해당 쓰레드가 종료될 때까지 대기하게 된다.</p>\n</li>\n</ul>\n<h3 id=\"join\" style=\"position:relative;\"><a href=\"#join\" aria-label=\"join permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>join</h3>\n<p>join()메소드는 쓰레드가 멈출 때까지 기다리게 해주는 메소드</p>\n<ul>\n<li>0.5초씩 쉬면서 숫자를 출력하는 MyThread5를 작성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread5</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyThread5 : \"</span><span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span> <span class=\"token comment\">// run</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>해당 쓰레드를 실행하고, 해당쓰레드가 종료될 때까지 기다린 후, 내용을 출력하는 JoinExam클래스</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JoinExam</span> <span class=\"token punctuation\">{</span> \r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">MyThread5</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyThread5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">// Thread 시작 </span>\r\n        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread가 종료될 때까지 기다립니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token comment\">// 해당 쓰레드가 멈출 때까지 멈춤</span>\r\n            thread<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread가 종료되었습니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \r\n    <span class=\"token punctuation\">}</span>   \r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Thread가 종료될 때까지 기다립니다.\r\nMyThread5 : 0\r\nMyThread5 : 1\r\nMyThread5 : 2\r\nMyThread5 : 3\r\nMyThread5 : 4\r\nThread가 종료되었습니다.</code></pre></div>\n<h3 id=\"wait-notify\" style=\"position:relative;\"><a href=\"#wait-notify\" aria-label=\"wait notify permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>wait, notify</h3>\n<ul>\n<li>\n<p>wait와 notify는 동기화된 블록 안에서 사용해야 한다. wait를 만나게 되면 해당 쓰레드는 해당 객체의 모니터링 락에 대한 권한을 가지고 있었다면 모니터링 락의 권한을 놓고 대기하게 된다.</p>\n</li>\n<li>\n<p>Thread를 상속받는 ThreadB클래스를 작성</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadB</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// 해당 쓰레드가 실행되면 자기 자신의 모니터링 락을 획득</span>\r\n    <span class=\"token comment\">// 5번 반복하면서 0.5초씩 쉬면서 total에 값을 누적</span>\r\n    <span class=\"token comment\">// 그 후에 notify()메소드를 호출하여 wait하고 있는 쓰레드를 깨움 </span>\r\n    <span class=\"token keyword\">int</span> total<span class=\"token punctuation\">;</span>\r\n    <span class=\"token annotation punctuation\">@Override</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\"을(를) 더합니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                total <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\r\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token punctuation\">}</span>\r\n            <span class=\"token punctuation\">}</span>\r\n            <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>ThreadB를 사용하며 wait하는 클래스 작성</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadA</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">// 앞에서 만든 쓰레드 B를 만든 후 start </span>\r\n        <span class=\"token comment\">// 해당 쓰레드가 실행되면, 해당 쓰레드는 run메소드 안에서 자신의 모니터링 락을 획득</span>\r\n        <span class=\"token class-name\">ThreadB</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token comment\">// b에 대하여 동기화 블럭을 설정</span>\r\n        <span class=\"token comment\">// 만약 main쓰레드가 아래의 블록을 위의 Thread보다 먼저 실행되었다면 wait를 하게 되면서 모니터링 락을 놓고 대기       </span>\r\n        <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\r\n                <span class=\"token comment\">// b.wait()메소드를 호출.</span>\r\n                <span class=\"token comment\">// 메인쓰레드는 정지</span>\r\n                <span class=\"token comment\">// ThreadB가 5번 값을 더한 후 notify를 호출하게 되면 wait에서 깨어남</span>\r\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b가 완료될 때까지 기다립니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                b<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n\r\n            <span class=\"token comment\">//깨어난 후 결과를 출력</span>\r\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total is: \"</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">.</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>실행 결과</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">b가 완료될 때까지 기다립니다.\r\n0을(를) 더합니다.\r\n1을(를) 더합니다.\r\n2을(를) 더합니다.\r\n3을(를) 더합니다.\r\n4을(를) 더합니다.\r\nTotal is: 10</code></pre></div>\n<h3 id=\"데몬-쓰레드\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EB%AA%AC-%EC%93%B0%EB%A0%88%EB%93%9C\" aria-label=\"데몬 쓰레드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데몬 쓰레드</h3>\n<p>데몬(Daemon)이란 보통 리눅스와 같은 유닉스계열의 운영체제에서 백그라운드로 동작하는 프로그램을 말한다.</p>\n<p>데몬쓰레드(Daemon Thread)란 자바에서 데몬과 유사하게 동작하는 쓰레드</p>\n<ul>\n<li>\n<p>데몬쓰레드를 만드는 방법은 쓰레드에 데몬 설정을 하면 된다.</p>\n<ul>\n<li>이런 쓰레드는 자바프로그램을 만들 때 백그라운드에서 특별한 작업을 처리하게 하는 용도로 만든다.(예 : 주기적으로 자동저장하는 기능을 구현하거나 에디터를 만드는데 일정한 시간마다 맞춤법 검사를 하게 구현)</li>\n</ul>\n</li>\n<li>\n<p>데몬쓰레드는 일반 쓰레드(main 등)가 모두 종료되면 강제적으로 종료되는 특징을 가지고 있다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Runnable을 구현하는 DaemonThread클래스를 작성</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DaemonThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\r\n\r\n    <span class=\"token comment\">// 무한루프안에서 0.5초씩 쉬면서 데몬쓰레드가 실행 중입니다를 출력하도록 run()메소드를 작성</span>\r\n    <span class=\"token annotation punctuation\">@Override</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"데몬 쓰레드가 실행 중입니다.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Exception발생시 while 문 나오도록</span>\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">// Runnable을 구현하는 DaemonThread를 실행하기 위하여 Thread 생성</span>\r\n        <span class=\"token class-name\">Thread</span> th <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DaemonThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">// 데몬쓰레드로 설정</span>\r\n        th<span class=\"token punctuation\">.</span><span class=\"token function\">setDaemon</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token comment\">// 쓰레드를 실행</span>\r\n        th<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n        <span class=\"token comment\">// 메인 쓰레드가 1초 뒤에 종료되도록 설정. </span>\r\n        <span class=\"token comment\">// 데몬쓰레드는 다른 쓰레드가 모두 종료되면 자동종료.</span>\r\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>   \r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"메인 쓰레드가 종료됩니다. \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \r\n    <span class=\"token punctuation\">}</span>   \r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<h2 id=\"람다식\" style=\"position:relative;\"><a href=\"#%EB%9E%8C%EB%8B%A4%EC%8B%9D\" aria-label=\"람다식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>람다식</h2>\n</blockquote>\n<p>람다식은 다른 말로 익명 메소드라고도 한다.</p>\n<ul>\n<li>\n<p>인터페이스 중에서 메소드를 하나만 가지고 있는 인터페이스를 함수형 인터페이스라고 한다.</p>\n<ul>\n<li>쓰레드를 만들 때 사용하는 Runnable 인터페이스의 경우 run()메소드를 하나만 가지고 있다.</li>\n</ul>\n</li>\n<li>\n<p>Runnable을 이용하여 쓰레드를 만드는 방법</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LambdaExam1</span> <span class=\"token punctuation\">{</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>   \r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>쓰레드가 실행되면 쓰레드 생성자 안에 넣은 run()메소드가 실행된다.</p>\n</li>\n<li>\n<p>자바는 메소드만 매개변수로 전달할 방법이 없다. 인스턴스만 전달 할 수 있다.</p>\n</li>\n<li>\n<p>그렇기 때문에 run()메소드를 가지고 있는 Runnable객체를 만들어서 전달한다.</p>\n</li>\n</ul>\n<p><code class=\"language-text\">메소드만 전달할 수 있다면, 좀 더 편리하게 프로그래밍할 수 있겠지만 자바는 메소드만 전달할 방법은 없기 때문에 매번 객체를 생성해서 매개변수로 전달해야 했다. 이런 부분을 해결한 것이 람다표현식이다.</code></p>\n<ul>\n<li>람다식을 이용해서 수정한 코드</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LambdaExam1</span> <span class=\"token punctuation\">{</span>  \r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>   \r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>()->{ … } 부분이 람다식, 다른말로 익명 메소드</p>\n</li>\n<li>\n<p>JVM은 Thread생성자를 보고 ()->{} 이 무엇인지 대상을 추론한다.</p>\n</li>\n<li>\n<p>Thread생성자 api를 보면 Runnable인터페이스를 받아들이는 것을 알 수 있다.</p>\n</li>\n<li>\n<p>JVM은 Thread생성자가 Runnable인터페이스를 구현한 것이 와야 하는 것을 알게 되고 람다식을 Runnable을 구현하는 객체로 자동으로 만들어서 매개변수로 넣어준다.</p>\n</li>\n</ul>\n<h3 id=\"람다식-기본문법\" style=\"position:relative;\"><a href=\"#%EB%9E%8C%EB%8B%A4%EC%8B%9D-%EA%B8%B0%EB%B3%B8%EB%AC%B8%EB%B2%95\" aria-label=\"람다식 기본문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>람다식 기본문법</h3>\n<p>(매개변수목록)->{실행문}</p>\n<ul>\n<li>2개의 값을 비교하여 어떤 값이 더 큰지 구하는 compareTo()라는 메소드를 가지고 있는 Compare 인터페이스\n<ul>\n<li>2개의 값을 받아들인 후, 정수를 반환하는 메소드를 선언</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Compare</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Compare 인터페이스를 이용하는 클래스\n<ul>\n<li>\n<p>Compare 인터페이스를 받아들인 후, 해당 인터페이스를 이용하는 exec메소드</p>\n</li>\n<li>\n<p>compareTo메소드가 어떻게 구현되어 있느냐에 따라서 출력되는 값이 다름</p>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CompareExam</span> <span class=\"token punctuation\">{</span>      \r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Compare</span> compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> compare<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>    \r\n        <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">return</span> i <span class=\"token operator\">-</span> j<span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"-틀렸거나-잘못된-정보가-있다면-망설임-없이-댓글로-알려주세요\" style=\"position:relative;\"><a href=\"#-%ED%8B%80%EB%A0%B8%EA%B1%B0%EB%82%98-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%A7%9D%EC%84%A4%EC%9E%84-%EC%97%86%EC%9D%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\" 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요!</h2>","frontmatter":{"date":"February 14, 2022","title":"22.02.14 TIL","categories":"TIL","author":"95Donguk","emoji":"❗"},"fields":{"slug":"/TIL/22.02.14/"}},"prev":{"id":"664bb7f6-ed57-584e-bd12-44dfaf42c78a","html":"<h1 id=\"생활코딩의-web1---html--internet-수강\" style=\"position:relative;\"><a href=\"#%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9%EC%9D%98-web1---html--internet-%EC%88%98%EA%B0%95\" aria-label=\"생활코딩의 web1   html  internet 수강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://www.opentutorials.org/course/3084\">생활코딩의 WEB1 - HTML &#x26; Internet</a> 수강</h1>\n<blockquote>\n<h2 id=\"코딩과-html\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%94%A9%EA%B3%BC-html\" aria-label=\"코딩과 html permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코딩과 HTML</h2>\n</blockquote>\n<ul>\n<li>\n<p>사람이 하는 일(원인)을 부르는 여러 표현</p>\n<ul>\n<li>부호 또는 신호라는 의미의 <strong>코드(code)</strong></li>\n<li>원천이라는 뜻의 <strong>소스(source)</strong></li>\n<li>약속이라는 의미에서 언어</li>\n</ul>\n</li>\n<li>\n<p>기계가 하는 일(결과)을 부르는 여러 표현</p>\n<ul>\n<li>애플리케이션(앱)</li>\n<li>프로그램</li>\n</ul>\n</li>\n<li>\n<p>웹에서의 결과를 <strong>웹 페이지</strong></p>\n</li>\n<li>\n<p>웹페이지가 모여 있으면 <strong>웹 사이트</strong></p>\n</li>\n<li>\n<p>기능이 좀 많으면 웹애플리케이션(웹앱)이라고 한다.</p>\n</li>\n<li>\n<p>원인인 코드를 통해서 결과를 만든다는 것이 코딩을 이해하는 핵심이다.</p>\n</li>\n<li>\n<p>HTML은 웹페이지를 만드는 코드이다.</p>\n</li>\n<li>\n<p>웹은 퍼블릭 도메인(Public Domain)이다</p>\n<ul>\n<li>\n<p>저작권이 없는 것들을 퍼블릭 도메인이라고 한다.</p>\n</li>\n<li>\n<p>웹을 만든 팀 버너스 리는 웹을 어떠한 저작권도 존재하지 않는 완전한 자유를 의미하는 퍼블릭 도메인으로 선언했다.</p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"기본-문법---태그\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95---%ED%83%9C%EA%B7%B8\" aria-label=\"기본 문법   태그 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 문법 - 태그</h2>\n</blockquote>\n<ul>\n<li>\n<p>강조 표시 - <code class=\"language-text\">&lt;strong>&lt;/strong></code></p>\n</li>\n<li>\n<p>밑줄 표시 * <code class=\"language-text\">&lt;u>&lt;/u></code> (u는 underline의 첫 글자에서 따옴)</p>\n</li>\n<li>\n<p>앞에 있는 태그를 열리는 태그, 뒤에 있는 태그를 닫히는 태그라고 구분해서 부른다. 닫히는 태그는 태그명 앞에 /를 붙인다.</p>\n</li>\n<li>\n<p>태그는 중첩해서 사용할 수 있다.</p>\n</li>\n<li>\n<p>제목 태그</p>\n<ul>\n<li><code class=\"language-text\">&lt;h1>&lt;/h1></code></li>\n<li><code class=\"language-text\">&lt;h2>&lt;/h2></code></li>\n<li><code class=\"language-text\">&lt;h3>&lt;/h3></code></li>\n<li><code class=\"language-text\">&lt;h4>&lt;/h4></code></li>\n<li><code class=\"language-text\">&lt;h5>&lt;/h5></code></li>\n<li><code class=\"language-text\">&lt;h6>&lt;/h6></code></li>\n<li>숫자가 올라갈수록 글씨의 크기는 점점 작아진다.</li>\n</ul>\n</li>\n<li>\n<p>줄바꿈 태그</p>\n<ul>\n<li><code class=\"language-text\">&lt;br></code>\n<ul>\n<li>닫히는 태그가 없다.\n<ul>\n<li>\n<p>HTML의 여러 태그 중에 무엇인가를 설명하지 않는 태그들은 감싸야 하는 컨텐츠가 없기 때문에 태그를 닫지 않는다는 규칙이 있다.</p>\n<ul>\n<li>예) img, input, br, hr, meta 등</li>\n</ul>\n</li>\n<li>\n<p>시각적인 의미</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>단락(paragraph)을 표현하는 태그</p>\n<ul>\n<li><code class=\"language-text\">&lt;p>&lt;/p></code>\n<ul>\n<li>하나의 단락을 그룹핑할 수 있도록 열고, 닫는 태그가 존재</li>\n<li>단점 : 단락과 단락의 간격이 고정되어 있기 때문에 시각적으로 자유도가 떨어진다. 반면에 br 태그는 쓰는 만큼 줄바꿈이 되기 때문에 원하는 만큼 간격을 줄 수 있는 장점이 있다. 하지만 CSS를 이용하여 이런 단점을 극복할 수 있다.\n<ul>\n<li>예)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span>50px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"html이-중요한-이유\" style=\"position:relative;\"><a href=\"#html%EC%9D%B4-%EC%A4%91%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"html이 중요한 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML이 중요한 이유</h2>\n</blockquote>\n<ul>\n<li>\n<p>검색엔진은 전 세계의 웹페이지를 분석하는데 태그를 근거로 해서 정리정돈한다.</p>\n</li>\n<li>\n<p>웹의 핵심적인 철학은 접근성이다.</p>\n</li>\n<li>\n<p>웹은 모든 운영체제에서 동작하고, 웹페이지의 소스코드는 누구나 볼 수 있고, 웹은 저작권이 없는 순수한 공공재이다.</p>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"최후의-문법-속성과-img\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%ED%9B%84%EC%9D%98-%EB%AC%B8%EB%B2%95-%EC%86%8D%EC%84%B1%EA%B3%BC-img\" aria-label=\"최후의 문법 속성과 img permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최후의 문법 속성과 img</h2>\n</blockquote>\n<ul>\n<li>\n<p>이미지 넣는 태그</p>\n<ul>\n<li>img</li>\n<li>속성을 적용해야 한다.\n<ul>\n<li>source의 줄임말인 src 붙여서 코드 작성</li>\n<li>예)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://s3-ap-northeast-2.amazonaws.com/opentutorials-user-file/module/3135/7648.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>웹페이지 파일과 같은 위치에 있는 이미지 파일을 사용하고자 한다면 src 속성의 값으로 이미지 파일의 이름만 적어주면 된다.\n<ul>\n<li>예)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>coding.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n<li>이미지의 크기는 width라는 속성을 사용하고 width의 값을 숫자나 %로 작성하면 원하는 크기로 조정할 수 있다.\n<ul>\n<li>예)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://s3-ap-northeast-2.amazonaws.com/opentutorials-user-file/module/3135/7648.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>속성은 태그의 이름만으로는 정보가 부족할 때 사용된다.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"-틀렸거나-잘못된-정보가-있다면-망설임-없이-댓글로-알려주세요\" style=\"position:relative;\"><a href=\"#-%ED%8B%80%EB%A0%B8%EA%B1%B0%EB%82%98-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%A7%9D%EC%84%A4%EC%9E%84-%EC%97%86%EC%9D%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\" 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요!</h2>","frontmatter":{"date":"February 16, 2022","title":"22.02.16 TIL","categories":"TIL","author":"95Donguk","emoji":"❗"},"fields":{"slug":"/TIL/22.02.16/"}},"site":{"siteMetadata":{"siteUrl":"https://95donguk.github.io","comments":{"utterances":{"repo":"95Donguk/95Donguk.github.io"}}}}},"pageContext":{"slug":"/TIL/22.02.15/","nextSlug":"/TIL/22.02.14/","prevSlug":"/TIL/22.02.16/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}