{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/TIL/22.01.31/",
    "result": {"data":{"cur":{"id":"760ff850-ec91-57e0-9d55-78228fae9b52","html":"<h1 id=\"자바로-구현하고-배우는-자료구조-수강\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B3%A0-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%88%98%EA%B0%95\" aria-label=\"자바로 구현하고 배우는 자료구조 수강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://www.boostcourse.org/cs204\">자바로 구현하고 배우는 자료구조</a> 수강</h1>\n<blockquote>\n<h2 id=\"힙과-트리---소개\" style=\"position:relative;\"><a href=\"#%ED%9E%99%EA%B3%BC-%ED%8A%B8%EB%A6%AC---%EC%86%8C%EA%B0%9C\" aria-label=\"힙과 트리   소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙과 트리 - 소개</h2>\n</blockquote>\n<h3 id=\"트리\" style=\"position:relative;\"><a href=\"#%ED%8A%B8%EB%A6%AC\" aria-label=\"트리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>트리</h3>\n<p><img src=\"/0ca3d5ebf330e1beb43a5c2217861d9d/Heap&#x26;Tree_tree.png\" alt=\"Heap&#x26;Tree_tree.PNG\">\r\n<strong>노드를 나무 형태로 연결한 구조</strong>를 트리라고 한다. 트리에 있는 각각의 요소는 노드이며 노드는 <strong>부모, 자식</strong> 형태로 이어져 있다.</p>\n<ul>\n<li>뿌리 (root): 트리의 시작 부분, 뿌리를 통해 들어가서 트리를 탐색한다.</li>\n<li>잎 (leaf): 자식이 딸려있지 않은 부분</li>\n<li>간선 (edge): 두 노드를 연결하는 선, 뿌리로부터의 간선의 수에 따라 level을 나눈다.</li>\n</ul>\n<h3 id=\"생각해보기\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"생각해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>어떤 경우에 데이터를 트리 형태로 저장하는 것이 효과적일까요?</li>\n</ul>\n<blockquote>\n<h2 id=\"힙과-트리---힙tree-levels\" style=\"position:relative;\"><a href=\"#%ED%9E%99%EA%B3%BC-%ED%8A%B8%EB%A6%AC---%ED%9E%99tree-levels\" aria-label=\"힙과 트리   힙tree levels permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙과 트리 - 힙:Tree levels</h2>\n</blockquote>\n<p>힙은 최댓값 및 최솟값을 찾아내는 연산을 빠르게 하기 위해 고안된 <strong>완전이진트리를 기반으로 한 자료구조</strong>이다.</p>\n<p>힙에는 <strong>최대 힙</strong>(max heap)과 <strong>최소 힙</strong>(min heap)이 있다. 부모 노드가 자식 노드보다 크면 최대 힙, 반대이면 최소 힙이다. 가장 큰 숫자가 뿌리에 있게 하려면 최대 힙, 가장 작은 숫자로부터 시작하려면 최소 힙을 사용하면 된다.</p>\n<ul>\n<li>parent > children <span style=\"color:red\">MAX HEAP</span></li>\n<li>parent &#x3C; children <span style=\"color:red\">MIN HEAP</span></li>\n</ul>\n<p><img src=\"/e3f3f156474948084b8e65df9ebc37fe/Heap&#x26;Tree_heap.png\" alt=\"Heap&#x26;Tree_heap.PNG\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">n(노드의 개수)</th>\n<th align=\"center\">level</th>\n<th align=\"center\">height</th>\n<th align=\"center\"><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">log_2(n+1)-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">7</td>\n<td align=\"center\">2</td>\n<td align=\"center\">2</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">15</td>\n<td align=\"center\">3</td>\n<td align=\"center\">3</td>\n<td align=\"center\">3</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>높이 (height): 뿌리에서부터 가장 먼 잎까지 가는데 거치게 되는 간선의 개수이다.</li>\n<li><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">log_2(n+1)-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span>은 height와 일치하므로, 트리에 요소가 몇 개 있는지 알면 트리의 높이를 계산할 수 있다.</li>\n</ul>\n<h3 id=\"생각해보기-1\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-1\" aria-label=\"생각해보기 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>최대 힙, 최소 힙에서 최댓값과 최솟값은 각각 어디에 위치하나요?</li>\n</ul>\n<blockquote>\n<h2 id=\"힙과-트리---힙추가와-제거\" style=\"position:relative;\"><a href=\"#%ED%9E%99%EA%B3%BC-%ED%8A%B8%EB%A6%AC---%ED%9E%99%EC%B6%94%EA%B0%80%EC%99%80-%EC%A0%9C%EA%B1%B0\" aria-label=\"힙과 트리   힙추가와 제거 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙과 트리 - 힙:추가와 제거</h2>\n</blockquote>\n<p>힙에 새로운 데이터를 추가하거나 제거할 때 <strong>힙의 규칙</strong>을 지켜야 한다.</p>\n<ul>\n<li>최대 힙이면 부모 노드가 자식 노드보다 커야 하고 최소 힙은 자식 노드가 부모 노드보다 커야 한다.</li>\n</ul>\n<h3 id=\"노드-추가\" style=\"position:relative;\"><a href=\"#%EB%85%B8%EB%93%9C-%EC%B6%94%EA%B0%80\" aria-label=\"노드 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>노드 추가</h3>\n<p><img src=\"/7c148c6351ee0b720405118c5ec1c9a2/Heap&#x26;Tree_heap_nodeadd.png\" alt=\"Heap&#x26;Tree_heap_nodeadd.PNG\"></p>\n<ol>\n<li>새로운 노드를 비어있는 공간에 추가한다.</li>\n<li>부모 노드보다 큰 숫자인지 확인하고 만약 그렇다면 두 노드를 바꾼다. (trickle up)</li>\n</ol>\n<h3 id=\"루트-제거\" style=\"position:relative;\"><a href=\"#%EB%A3%A8%ED%8A%B8-%EC%A0%9C%EA%B1%B0\" aria-label=\"루트 제거 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>루트 제거</h3>\n<p><img src=\"/5268a9223caa95c40006acefdcb3bda9/Heap&#x26;Tree_heap_rootremove.png\" alt=\"Heap&#x26;Tree_heap_rootremove.PNG\"></p>\n<ol>\n<li>루트를 제거한다.</li>\n<li>트리의 마지막 요소를 루트에 넣어준다.</li>\n<li>루트에서 시작하여 두 자식 중 큰 노드와 바꿔주어 힙의 규칙을 만족하게 한다. (trickle down)</li>\n</ol>\n<ul>\n<li>뭔가를 제거할 때 힙에서는 항상 루트를 제거해야 한다.</li>\n</ul>\n<h3 id=\"생각해보기-2\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-2\" aria-label=\"생각해보기 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>루트를 제거할 때, 트리의 마지막 요소를 루트 자리에 넣어주는 이유는 무엇인가요?</li>\n</ul>\n<blockquote>\n<h2 id=\"힙과-트리---힙trickleup-함수\" style=\"position:relative;\"><a href=\"#%ED%9E%99%EA%B3%BC-%ED%8A%B8%EB%A6%AC---%ED%9E%99trickleup-%ED%95%A8%EC%88%98\" aria-label=\"힙과 트리   힙trickleup 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙과 트리 - 힙:TrickleUp 함수</h2>\n</blockquote>\n<p>완전이진트리이기 때문에 <strong>노드의 위치</strong>는 아래와 같은 성질을 가진다.</p>\n<ul>\n<li>children: 2 * parent + 1, 2 * parent + 2(루트에 적힌 숫자가 0인 경우에만 성립)</li>\n<li>parent: floor((child-1)/2)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> lastposition<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 배열에 몇 개의 요소가 들어있는지 기록</span>\r\n<span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\tarray<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>lastposition<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1. 노드 추가</span>\r\n\t<span class=\"token function\">trickleup</span><span class=\"token punctuation\">(</span>lastposition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2. trickle up</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token class-name\">E</span> tmp <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n\tarray<span class=\"token punctuation\">[</span>from<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n\tarray<span class=\"token punctuation\">[</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">trickleup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>position <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">int</span> parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>position<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> array<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token function\">trickleup</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"생각해보기-3\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-3\" aria-label=\"생각해보기 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>위 코드에서 lastposition 변수를 사용하는 이유는 무엇인가요?</li>\n</ul>\n<blockquote>\n<h2 id=\"힙과-트리---힙trickledown-함수\" style=\"position:relative;\"><a href=\"#%ED%9E%99%EA%B3%BC-%ED%8A%B8%EB%A6%AC---%ED%9E%99trickledown-%ED%95%A8%EC%88%98\" aria-label=\"힙과 트리   힙trickledown 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙과 트리 - 힙:TrickleDown 함수</h2>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token class-name\">E</span> tmp <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> lastposition<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 루트와 마지막 노드를 바꿔주고 lastposition을 줄여 배열에서 제거한다.</span>\r\n\t<span class=\"token function\">trickleDown</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">trickleDown</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>parent <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>parent <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// 마지막에 왼쪽 자식이 클 때</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left<span class=\"token operator\">==</span>lastposition <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>array<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token comment\">// 마지막에 오른쪽 자식이 클 때</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right<span class=\"token operator\">==</span>lastposition <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>array<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token comment\">// 마지막에 부모가 클 때</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">>=</span> lastposition <span class=\"token operator\">||</span> right <span class=\"token operator\">>=</span> lastposition<span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// 왼쪽 자식이 클 때</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> array<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token function\">trickleDown</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token comment\">// 오른쪽 자식이 클 때</span>\r\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>parent<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token function\">trickleDown</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"생각해보기-4\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-4\" aria-label=\"생각해보기 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>루트의 정보를 없애는 대신 swap 함수를 이용하여 제거하면 어떤 점이 좋나요?</li>\n</ul>\n<blockquote>\n<h2 id=\"힙과-트리---힙정렬\" style=\"position:relative;\"><a href=\"#%ED%9E%99%EA%B3%BC-%ED%8A%B8%EB%A6%AC---%ED%9E%99%EC%A0%95%EB%A0%AC\" aria-label=\"힙과 트리   힙정렬 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙과 트리 - 힙:정렬</h2>\n</blockquote>\n<p>힙 규칙에 맞게 숫자의 순서를 맞추는 과정을 <strong>힙 정렬 알고리즘</strong>이라고 한다. 임의의 숫자들을 나열하고 <strong>힙 규칙에 맞게 TrickleDown을 반복</strong>하면 그 숫자들이 정렬된다.</p>\n<p>힙 정렬 알고리즘의 시간 복잡도는 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>이다. 두 수를 비교해서 하나를 고르는 방식으로 숫자를 골라내기 때문이다. (총 n개의 숫자를 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">logn</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span></span></span></span></span>개의 숫자와 비교한다.)</p>\n<p>숫자들의 순서를 바꿔 정렬하기 때문에 데이터의 복사본을 만들 필요가 없다는 점이 힙 정렬의 장점이다.</p>\n<h3 id=\"생각해보기-5\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-5\" aria-label=\"생각해보기 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>힙 정렬 알고리즘 외의 정렬 방법에는 어떤 것이 있을까요?</li>\n</ul>\n<hr>\n<h2 id=\"-틀렸거나-잘못된-정보가-있다면-망설임-없이-댓글로-알려주세요\" style=\"position:relative;\"><a href=\"#-%ED%8B%80%EB%A0%B8%EA%B1%B0%EB%82%98-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%A7%9D%EC%84%A4%EC%9E%84-%EC%97%86%EC%9D%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\" 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요!</h2>","excerpt":"자바로 구현하고 배우는 자료구조 수강 힙과 트리 - 소개 트리 Heap&Tree_tree.PNG\r\n노드를 나무 형태로 연결한 구조를 트리라고 한다. 트리에 있는 각각의 요소는 노드이며 노드는 부모, 자식 형태로 이어져 있다. 뿌리 (root): 트리의 시작 부분, 뿌리를 통해 들어가서 트리를 탐색한다. 잎 (leaf): 자식이 딸려있지 않은 부분 간선 (edge): 두 노드를 연결하는 선, 뿌리로부터의 간선의 수에 따라 level을 나눈다. 생각해보기 어떤 경우에 데이터를 트리 형태로 저장하는 것이 효과적일까요? 힙과 트리 - 힙:Tree levels 힙은 최댓값 및 최솟값을 찾아내는 연산을 빠르게 하기 위해 고안된 완전이진트리를 기반으로 한 자료구조이다. 힙에는 최대 힙(max heap)과 최소 힙(min heap)이 있다. 부모 노드가 자식 노드보다 크면 최대 힙, 반대이면 최소 힙이다. 가장 큰 숫자가 뿌리에 있게 하려면 최대 힙, 가장 작은 숫자로부터 시작하려면 최소 힙을 …","frontmatter":{"date":"January 31, 2022","title":"22.01.31 TIL","categories":"TIL","author":"95Donguk","emoji":"❗"},"fields":{"slug":"/TIL/22.01.31/"}},"next":{"id":"e990c18c-6118-53b3-9672-3b937492fca8","html":"<h1 id=\"자바로-구현하고-배우는-자료구조-수강\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B3%A0-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%88%98%EA%B0%95\" aria-label=\"자바로 구현하고 배우는 자료구조 수강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://www.boostcourse.org/cs204\">자바로 구현하고 배우는 자료구조</a> 수강</h1>\n<blockquote>\n<h2 id=\"해시---생성자\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%8B%9C---%EC%83%9D%EC%84%B1%EC%9E%90\" aria-label=\"해시   생성자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해시 - 생성자</h2>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hash</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HashI</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HashElement</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> harray<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// 해시 구현</span>\r\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Hash</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tableSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">this</span> tableSize <span class=\"token operator\">=</span> tableSize<span class=\"token punctuation\">;</span>\r\n\t\tharray <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HashElement</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">[</span>tableSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 형 변환</span>\r\n\t\t<span class=\"token comment\">// 연결 리스트 체이닝</span>\r\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>tableSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\r\n\t\t\tharray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HashElement</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\tmaxLoadFactor <span class=\"token operator\">=</span> <span class=\"token number\">0.75</span><span class=\"token punctuation\">;</span>\r\n\t\tnumElements<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>자바 API에서는 기본 테이블 크기는 16이다.</em></p>\n<h3 id=\"생각해보기\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"생각해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>maxLoadFactor를 줄이거나 늘리면 어떻게 달라지나요? 어떤 상황에서 maxLoadFactor를 조절해야 할까요?</li>\n</ul>\n<blockquote>\n<h2 id=\"해시---생성자-복습\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%8B%9C---%EC%83%9D%EC%84%B1%EC%9E%90-%EB%B3%B5%EC%8A%B5\" aria-label=\"해시   생성자 복습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해시 - 생성자 복습</h2>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Hash</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HashI</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token class-name\">LinkedListI</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HashElement</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> hash_array<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">int</span> tableSize<span class=\"token punctuation\">,</span> numElements<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">double</span> maxLoadFactor<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Hash</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tableSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">this</span> tableSize <span class=\"token operator\">=</span> tableSize<span class=\"token punctuation\">;</span>\r\n        maxLoadFactor <span class=\"token operator\">=</span> <span class=\"token number\">0.75</span><span class=\"token punctuation\">;</span>\r\n        numElements<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n        hash_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HashElement</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">[</span>tableSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>tableSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\r\n            hash_array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HashElement</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>자바에서 제네릭으로 배열을 만드는 것은 어렵다. 객체로 배열을 만든 뒤 형변환을 해준다.</em></p>\n<blockquote>\n<h2 id=\"해시---add와-remove-메소드\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%8B%9C---add%EC%99%80-remove-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"해시   add와 remove 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해시 - add와 remove 메소드</h2>\n</blockquote>\n<h3 id=\"add\" style=\"position:relative;\"><a href=\"#add\" aria-label=\"add permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>add</h3>\n<p>해시에 내용을 추가하는 add 메소드</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token comment\">// resize</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">loadFactor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> maxLoadFactor<span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>tableSize<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// 키와 값을 저장해 놓을 object he 정의</span>\r\n\t<span class=\"token class-name\">HashElement</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> he <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashElement</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// he의 index 찾기</span>\r\n\t<span class=\"token keyword\">int</span> hashval <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\thashval <span class=\"token operator\">=</span> hashval <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7FFFFFFF</span><span class=\"token punctuation\">;</span>\r\n\thashval <span class=\"token operator\">=</span> hashval <span class=\"token operator\">%</span> tableSize<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// add he</span>\r\n\tharray<span class=\"token punctuation\">[</span>hashval<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>he<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n\tnumElements<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>크기가 너무 커지거나 작아질 경우, add 메소드에서 <strong>크기를 조절</strong>해줘야 한다.</li>\n<li>resize 메소드의 원리는 새로운 테이블 크기를 계산하고 새로운 크기가 더 작더라도 해시를 조정할 수 있다.</li>\n</ul>\n<h3 id=\"remove\" style=\"position:relative;\"><a href=\"#remove\" aria-label=\"remove permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>remove</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token comment\">// index 찾기</span>\r\n\t<span class=\"token keyword\">int</span> hashval <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\thashval <span class=\"token operator\">=</span> hashval <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7FFFFFFF</span><span class=\"token punctuation\">;</span>\r\n\thashval <span class=\"token operator\">=</span> hashval <span class=\"token operator\">%</span> tableSize<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// 해당하는 index의 키와 값 제거</span>\r\n\tharray<span class=\"token punctuation\">[</span>hashval<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>he<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n\tnumElements<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>remove 메소드에서는 크기 조정을 걱정할 필요도 없고 객체를 생성할 일도 없다.</li>\n</ul>\n<h3 id=\"생각해보기-1\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-1\" aria-label=\"생각해보기 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>크기가 작아질 경우, add 메소드에서는 어떻게 크기를 조절하나요?</li>\n</ul>\n<blockquote>\n<h2 id=\"해시---getvalue-메소드\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%8B%9C---getvalue-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"해시   getvalue 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해시 - getValue 메소드</h2>\n</blockquote>\n<p>키의 값을 찾는 getValue 메소드, 키의 index가 무엇인지 찾고 해시에서 그 index를 찾을 때까지 반복한다. 그리고  key의 값이 동일하면 그 때 키의 값을 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token comment\">// 해당하는 index 찾기</span>\r\n\t<span class=\"token keyword\">int</span> hashval <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\thashval <span class=\"token operator\">=</span> hashval <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7FFFFFFF</span><span class=\"token punctuation\">;</span>\r\n\thashval <span class=\"token operator\">=</span> hashval <span class=\"token operator\">%</span> tableSize<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// 그 index를 찾을 때까지 반복</span>\r\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HashElement</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> he <span class=\"token operator\">:</span> harray<span class=\"token punctuation\">[</span>hashval<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>he<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t\t<span class=\"token keyword\">return</span> he<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span>\r\n                <span class=\"token punctuation\">}</span>\r\n        <span class=\"token punctuation\">}</span>\r\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"생각해보기-2\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-2\" aria-label=\"생각해보기 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>getValue 메소드의 시간 복잡도는 무엇인가요?</li>\n</ul>\n<blockquote>\n<h2 id=\"해시---resize\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%8B%9C---resize\" aria-label=\"해시   resize permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해시 - resize</h2>\n</blockquote>\n<p>연결 리스트가 너무 길어질 경우 <strong>해시의 크기를 조절</strong>하는 resize 함수이다. 크기가 너무 커진다면, 새로운 연결 리스트 배열을 만들고 해시의 모든 연결 리스트에 있는 요소의 키와 값을 각각 찾아내야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token comment\">// 새로운 체인 해시 생성</span>\r\n\t<span class=\"token operator\">&lt;</span><span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HashElement</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> new_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HashElement</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">[</span>newSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>newSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\r\n\t\tnew_array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token operator\">&lt;</span><span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HashElement</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// index에 맞게 값 채워 넣기</span>\r\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k key <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token class-name\">V</span> val <span class=\"token operator\">=</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token class-name\">HashElement</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> he <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashElement</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">int</span> hashVal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7FFFFFFF</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> newSize<span class=\"token punctuation\">;</span>\r\n\t\tnew_array<span class=\"token punctuation\">[</span>hashVal<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>he<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token comment\">// 덮어쓰기</span>\r\n\thash_array<span class=\"token operator\">=</span>new_array<span class=\"token punctuation\">;</span>\r\n\ttableSize<span class=\"token operator\">=</span>newSize<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>모든 데이터를 복사하고 복사본을 만들기 때문에 복잡도가 높다.</li>\n</ul>\n<h3 id=\"생각해보기-3\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-3\" aria-label=\"생각해보기 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>resize 함수의 시간 복잡도는 무엇인가요?</li>\n</ul>\n<h2 id=\"해시---key반복자\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%8B%9C---key%EB%B0%98%EB%B3%B5%EC%9E%90\" aria-label=\"해시   key반복자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해시 - Key반복자</h2>\n<p>모든 키에 대해 반복하여 해시의 전체 내용을 살펴보는 작업</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 키에 연결된 연결 리스트의 내용을 살펴보는 함수</span>\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">IteratorHelper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> keys<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">int</span> position<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 위치를 나타내는 변수</span>\r\n\t<span class=\"token comment\">// key반복자 사용</span>\r\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">IteratorHelper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\tkeys <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>numElements<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">int</span> p<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 위치 변수</span>\r\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>tableSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HashElement</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HashElement</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> h <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span>\r\n\t\t\t\tkeys<span class=\"token punctuation\">[</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> h<span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token punctuation\">}</span>\r\n\tposition<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token comment\">// 끝을 확인할 때 사용</span>\r\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token keyword\">return</span> position <span class=\"token operator\">&lt;</span> keys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token comment\">// 해시의 전체 내용을 살펴보는 함수</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">return</span> keys<span class=\"token punctuation\">[</span>position<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>시간 복잡도는 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span> 이다.</li>\n</ul>\n<h3 id=\"생각해보기-4\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-4\" aria-label=\"생각해보기 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>해시에는 순서가 있나요?</li>\n</ul>\n<hr>\n<h2 id=\"-틀렸거나-잘못된-정보가-있다면-망설임-없이-댓글로-알려주세요\" style=\"position:relative;\"><a href=\"#-%ED%8B%80%EB%A0%B8%EA%B1%B0%EB%82%98-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%A7%9D%EC%84%A4%EC%9E%84-%EC%97%86%EC%9D%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\" 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요!</h2>","frontmatter":{"date":"January 29, 2022","title":"22.01.29 TIL","categories":"TIL","author":"95Donguk","emoji":"❗"},"fields":{"slug":"/TIL/22.01.29/"}},"prev":{"id":"ac22e3d3-ace0-52d7-b0a7-dc2252fb0c1d","html":"<h1 id=\"자바로-구현하고-배우는-자료구조-수강\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EB%A1%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B3%A0-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%88%98%EA%B0%95\" aria-label=\"자바로 구현하고 배우는 자료구조 수강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://www.boostcourse.org/cs204\">자바로 구현하고 배우는 자료구조</a> 수강</h1>\n<blockquote>\n<h2 id=\"힙과-트리---트리완전-트리와-정-트리\" style=\"position:relative;\"><a href=\"#%ED%9E%99%EA%B3%BC-%ED%8A%B8%EB%A6%AC---%ED%8A%B8%EB%A6%AC%EC%99%84%EC%A0%84-%ED%8A%B8%EB%A6%AC%EC%99%80-%EC%A0%95-%ED%8A%B8%EB%A6%AC\" aria-label=\"힙과 트리   트리완전 트리와 정 트리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙과 트리 - 트리:완전 트리와 정 트리</h2>\n</blockquote>\n<h3 id=\"완전-트리complete-tree\" style=\"position:relative;\"><a href=\"#%EC%99%84%EC%A0%84-%ED%8A%B8%EB%A6%ACcomplete-tree\" aria-label=\"완전 트리complete tree permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>완전 트리(Complete Tree)</h3>\n<p><img src=\"/81ca47b2345e35a2df223034808f8759/Heap&#x26;Tree_completeTree.png\" alt=\"Heap&#x26;Tree_completeTree.PNG\"></p>\n<ul>\n<li><strong>모든 잎이 아닌 노드가 2개의 자식 노드</strong>를 가지고 있고 <strong>마지막 줄은 왼쪽에서 오른쪽 순서</strong>로 채워져 있는 트리</li>\n</ul>\n<h3 id=\"정-트리full-tree\" style=\"position:relative;\"><a href=\"#%EC%A0%95-%ED%8A%B8%EB%A6%ACfull-tree\" aria-label=\"정 트리full tree permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정 트리(Full Tree)</h3>\n<p><img src=\"/abee4a5f54a9d4e5a80ca933e48d6596/Heap&#x26;Tree_fullTree.png\" alt=\"Heap&#x26;Tree_fullTree.PNG\"></p>\n<ul>\n<li><strong>모든 잎이 아닌 노드가 2개의 자식 노드를</strong> 가지고 있고 <strong>모든 잎이 같은 레벨</strong>에 있는 트리</li>\n</ul>\n<h3 id=\"생각해보기\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"생각해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>완전 트리와 정 트리의 공통점과 차이점은 무엇인가요?</li>\n</ul>\n<blockquote>\n<h2 id=\"힙과-트리---트리순회\" style=\"position:relative;\"><a href=\"#%ED%9E%99%EA%B3%BC-%ED%8A%B8%EB%A6%AC---%ED%8A%B8%EB%A6%AC%EC%88%9C%ED%9A%8C\" aria-label=\"힙과 트리   트리순회 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙과 트리 - 트리:순회</h2>\n</blockquote>\n<ul>\n<li>\n<p>전위 순회 (Pre order traversal): 루트 노드에서 시작하여 왼쪽 자식 노드에 갔다가 오른쪽 자식 노드로 가는 순회 방법</p>\n</li>\n<li>\n<p>중위 순회 (In order traversal): 왼쪽 자식 노드에서 시작하여 루트 노드에 갔다가 오른쪽 자식 노드로 가는 순회 방법</p>\n</li>\n<li>\n<p>후위 순회 (Post order traversal): 왼쪽 자식 노드에서 시작하여 오른쪽 자식 노드에 갔다가 루트 노드로 가는 순회 방법</p>\n</li>\n<li>\n<p>너비 우선 선회/레벨 순서 순회 (Breadth first traversal/level order traversal): 가장 위에 있는 노드에서 시작하여 왼쪽에서 오른쪽으로 가는 순회 방법</p>\n</li>\n</ul>\n<h3 id=\"생각해보기-1\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-1\" aria-label=\"생각해보기 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>전위, 중위, 후위 순회는 반복적인 규칙을 갖고 있습니다. 이를 코드로 구현하려면 어떻게 해야 할까요?</li>\n</ul>\n<blockquote>\n<h2 id=\"힙과-트리---트리표현\" style=\"position:relative;\"><a href=\"#%ED%9E%99%EA%B3%BC-%ED%8A%B8%EB%A6%AC---%ED%8A%B8%EB%A6%AC%ED%91%9C%ED%98%84\" aria-label=\"힙과 트리   트리표현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙과 트리 - 트리:표현</h2>\n</blockquote>\n<p>표현식 트리를 활용해여 굉장히 복잡한 식도 트리 형식으로 표현할 수 있다.</p>\n<p>예1)\r\n<img src=\"/84307f9ebc45076eb7ace31c9ddf4892/Heap&#x26;Tree_example1Tree.png\" alt=\"Heap&#x26;Tree_example1Tree.PNG\"></p>\n<ul>\n<li>전위 표기식: * 2 3</li>\n<li>중위 표기식: 2 * 3</li>\n<li>후위 표기식: 2 3 *</li>\n</ul>\n<p>예2)\r\n<img src=\"/109b68f67cbc9aaedb498abef956cf7a/Heap&#x26;Tree_example2Tree.png\" alt=\"Heap&#x26;Tree_example2Tree.PNG\"></p>\n<ul>\n<li>중위 표기식: (((22 / 11) + 3) * (6 + 5)) - 50</li>\n<li>후위 표기식: 22 11 / 3 + 6 5 + * 50 -</li>\n</ul>\n<h3 id=\"생각해보기-2\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-2\" aria-label=\"생각해보기 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>복잡한 식을 후위 표기식으로 표현하였을 때의 장점은 무엇인가요?</li>\n</ul>\n<blockquote>\n<h2 id=\"힙과-트리---트리노드-클래스\" style=\"position:relative;\"><a href=\"#%ED%9E%99%EA%B3%BC-%ED%8A%B8%EB%A6%AC---%ED%8A%B8%EB%A6%AC%EB%85%B8%EB%93%9C-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"힙과 트리   트리노드 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙과 트리 - 트리:노드 클래스</h2>\n</blockquote>\n<p><img src=\"/09f6442124a0033929f26f72d2e0c961/Heap&#x26;Tree_nodeClass.png\" alt=\"Heap&#x26;Tree_nodeClass.PNG\">\r\n트리에서는 <strong>부모 노드보다 작은 데이터가 왼쪽 자식 노드</strong>에 와야 하고 <strong>부모 노드보다 큰 데이터가 오른쪽 자식 노드</strong>에 와야한다.</p>\n<p>그래서 어떤 수를 찾으려고 할 때 트리를 따라 내려가는 과정은  <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>의 복잡도를 가진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\r\n\t<span class=\"token class-name\">E</span> data<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token class-name\">Node</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\r\n\t\tleft<span class=\"token operator\">=</span>right<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>연결 리스트에서 노드가 next 포인터를 갖고 있었던 것처럼, 트리에서는 노드가 <strong>left, right 포인터</strong>를 갖는다.</li>\n</ul>\n<h3 id=\"생각해보기-3\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-3\" aria-label=\"생각해보기 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>left, right 포인터는 부모 노드에서 자식 노드로 향하는 포인터입니다. 자식 노드에서 부모 노드로 향하게 하면 어떤 문제가 생길 수 있을까요?</li>\n</ul>\n<blockquote>\n<h2 id=\"힙과-트리---트리재귀-함수\" style=\"position:relative;\"><a href=\"#%ED%9E%99%EA%B3%BC-%ED%8A%B8%EB%A6%AC---%ED%8A%B8%EB%A6%AC%EC%9E%AC%EA%B7%80-%ED%95%A8%EC%88%98\" aria-label=\"힙과 트리   트리재귀 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙과 트리 - 트리:재귀 함수</h2>\n</blockquote>\n<p>트리에 새로운 데이터를 추가하는 과정</p>\n<ol>\n<li>루트에서부터 시작</li>\n<li><strong>트리의 규칙</strong>에 따라 내려간다.</li>\n<li><strong>null인 부분</strong>을 찾았다면 그 곳에 새로운 노드를 추가</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> add <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> obj<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token comment\">// go to the right</span>\r\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 3</span>\r\n\t\t\tnode<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token punctuation\">}</span>\r\n\t\t<span class=\"token keyword\">return</span> add <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token comment\">// go to the left</span>\r\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 3</span>\r\n\t\tnode<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token punctuation\">}</span>\r\n\t<span class=\"token keyword\">return</span> add <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token comment\">// 트리가 비어있을 경우 (오버로딩)</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> add <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\r\n\t\troot <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">else</span>\r\n\t\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\tcurrentSize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 크기 증가</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><strong>재귀 함수</strong>를 이용하여 트리의 규칙에 따라 내려가는 기능을 구현</li>\n</ul>\n<h3 id=\"생각해보기-4\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-4\" aria-label=\"생각해보기 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>재귀 함수를 활용하였을 때의 장점은 무엇인가요?</li>\n</ul>\n<blockquote>\n<h2 id=\"힙과-트리---트리contains\" style=\"position:relative;\"><a href=\"#%ED%9E%99%EA%B3%BC-%ED%8A%B8%EB%A6%AC---%ED%8A%B8%EB%A6%ACcontains\" aria-label=\"힙과 트리   트리contains permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙과 트리 - 트리:Contains</h2>\n</blockquote>\n<p>특정 요소가 트리에 포함되어있는지 확인하는 함수를 구현</p>\n<ol>\n<li>루트에서부터 시작</li>\n<li><strong>트리의 규칙</strong>에 따라 내려간다.</li>\n<li><strong>그 요소를 찾으면 True</strong>를 반환하고 <strong>null인 노드</strong>에 다다르면 <strong>False</strong>를 반환</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> contains <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> contains <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> obj<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n\t<span class=\"token comment\">// 트리의 끝에 도달했는데 null</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// node의 data와 일치</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// go to the right</span>\r\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token comment\">// go to the left</span>\r\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"생각해보기-5\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EA%B0%81%ED%95%B4%EB%B3%B4%EA%B8%B0-5\" aria-label=\"생각해보기 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생각해보기</h3>\n<ul>\n<li>트리가 비어있을 경우에도 contains 함수는 잘 동작하나요?</li>\n</ul>\n<hr>\n<h2 id=\"-틀렸거나-잘못된-정보가-있다면-망설임-없이-댓글로-알려주세요\" style=\"position:relative;\"><a href=\"#-%ED%8B%80%EB%A0%B8%EA%B1%B0%EB%82%98-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%A7%9D%EC%84%A4%EC%9E%84-%EC%97%86%EC%9D%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\" 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요!</h2>","frontmatter":{"date":"February 02, 2022","title":"22.02.02 TIL","categories":"TIL","author":"95Donguk","emoji":"❗"},"fields":{"slug":"/TIL/22.02.02/"}},"site":{"siteMetadata":{"siteUrl":"https://95donguk.github.io","comments":{"utterances":{"repo":"95Donguk/95Donguk.github.io"}}}}},"pageContext":{"slug":"/TIL/22.01.31/","nextSlug":"/TIL/22.01.29/","prevSlug":"/TIL/22.02.02/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}