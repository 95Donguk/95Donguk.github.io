{
    "componentChunkName": "component---src-pages-index-js",
    "path": "/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"addbe2d7-bdb5-58d9-b33e-502443c46ba8","excerpt":"생활코딩 자바 복습 겸 심심풀이로 풀어본 부스트코스 문제 HelloWorldApp.java 파일 안에 있는 Class 이름은 어떻게 생성되어야 할까요? Java 프로그램이 맨 먼저 실행하는 메서드는 무엇일까요? Java 파일을 기계가 이해할 수 있도록 .class 파일로 바꾸는 과정을 무엇이라 할까요? Java 프로그램을 동작시키도록 실행환경을 만들어주는 프로그램은 무엇일까요? Java에서 사용하는 문자열을 관리하기 위한 타입은 무엇일까요? Java가 정수를 다루기 위해 사용하는 타입은 무엇일까요? Java가 정수를 다루기 위해 사용하는 타입은 무엇일까요? 프로그래밍에서 버그를 수정하기 위한 행위를 뭐라고 할까요? 디버그에서 중요한 기능으로 중간에서 흐름을 멈추기 위한 기능은 무엇일까요? 프로그램의 입력값으로 전달될 수 있는 Input 값은 일반적으로 뭐라고 표현할 수 있을까요? Java 컴파일을 위해 사용되는 프로그램은 무엇일까요? 외부에서 만들어진 정리정돈된 소스 코드를 사용하…","frontmatter":{"categories":"TIL","title":"22.01.16 TIL","date":"January 16, 2022"},"fields":{"slug":"/TIL/22.01.16/"}}},{"node":{"id":"f44cd7e6-c6bc-588c-8a6f-acb179b2429e","excerpt":"모든 개발자를 위한 HTTP 웹 기본지식 수강 HTTP 헤더2 - 캐시와 조건부 요청 - 캐시 기본 동작 HTTP_header_cache_1.PNG\r\nHTTP_header_cache_2.PNG\r\nHTTP_header_cache_3.PNG\r\nHTTP_header_cache_4.PNG 캐시가 없을 때 데이터가 변경되지 않아도 계속 네트워크를 통해서 데이터를 다운로드받아야 한다. 인터넷 네트워크는 매우 느리고 비싸다. 브라우저 로딩 속도가 느리다. 느린 사용자 경험 HTTP_header_cache_5.PNG\r\nHTTP_header_cache_6.PNG\r\nHTTP_header_cache_7.PNG\r\nHTTP_header_cache_8.PNG 캐시 적용 캐시 덕분에 캐시 가능 시간 동안 네트워크를 사용하지 않아도 된다. 비싼 네트워크 사용량을 줄일 수 있다. 브라우저 로딩 속도가 매우 빠르다. 빠른 사용자 경험 HTTP_header_cache_9.PNG\r\nHTTP_header_cache_1…","frontmatter":{"categories":"TIL","title":"22.01.15 TIL","date":"January 15, 2022"},"fields":{"slug":"/TIL/22.01.15/22.01.15/"}}},{"node":{"id":"a0fc7179-9412-5523-9601-748de01bea6b","excerpt":"모든 개발자를 위한 HTTP 웹 기본지식 수강 HTTP 헤더1 - 일반 헤더 - 개요 HTTP 헤더 header-field = field-name”:” OWS field-value OWS OWS : 띄어쓰기 허용 *field-name은 대소문자 구문 없음 HTTP_header_1.PNG HTTP 헤더 - 용도 HTTP 전송에 필요한 모든 부가정보 예) 메시지 바디의 내용, 메시지 바디의 크기, 압축, 인증, 요청 클라이언트(브라우저) 정보, 서버 애플리케이션 정보, 캐시 관리 정보… 표준 헤더가 너무 많다 참조 : https://en.wikipedia.org/wiki/List_of_HTTP_header_fields 필요하면 임의의 헤더 추가 가능 helloworld: hihi HTTP 헤더 분류 - RFC2616(과거) HTTP_header_RFC2616_1.PNG 헤더 분류 General 헤더 : 메시지 전체에 적용되는 정보 예) Connection: close Request 헤…","frontmatter":{"categories":"TIL","title":"22.01.14 TIL","date":"January 14, 2022"},"fields":{"slug":"/TIL/22.01.14/22.01.14/"}}},{"node":{"id":"6836686e-1b52-507b-8293-8f20be10da34","excerpt":"모든 개발자를 위한 HTTP 웹 기본지식 수강 HTTP 상태 코드 - 소개 상태 코드 : 클라이언트가 보낸 요청의 처리 상태를 응답에서 알려주는 기능 1XX (Informational) : 요청이 수신되어 처리 중 2XX (Successful) : 요청 정상 처리 3XX (Redirection) : 요청을 완료하려면 추가 행동이 필요 4XX (Client Error) : 클라이언트 오류, 잘못된 문법 등으로 서버가 요청을 수행할 수 없음 5XX (Server Error) : 서버 오류, 서버가 정상 요청을 처리하지 못함 만약 모르는 상태 코드가 나타나면? 클라이언트가 인식할 수 없는 상태 코드를 서버가 반환하면? 클라이언트는 상위 상태 코드로 해석해서 처리 미래에 새로운 상태 코드가 추가되어도 클라이언트를 변경하지 않아도 된다. 미래에 새로운 상태 코드가 추가되어도 클라이언트를 변경하지 않아도 됨 예시 299 ??? -> 2XX (Successful) 451 ??? -> 4XX (…","frontmatter":{"categories":"TIL","title":"22.01.13 TIL","date":"January 13, 2022"},"fields":{"slug":"/TIL/22.01.13/22.01.13/"}}},{"node":{"id":"0f01de85-c85b-5404-9395-f3bc3bf4d1eb","excerpt":"모든 개발자를 위한 HTTP 웹 기본지식 수강 HTTP 메서드 활용 - 클라이언트에서 서버로 데이터 전송 클라이언트에서 서버로 데이터 전송 - 데이터 전달 방식은 크게 2가지 쿼리 파라미터를 통한 데이터 전송 GET 주로 정렬 필터(검색어, 게시판 리스트에 정렬 조건을 넣는 등) HTTP 메시지 바디를 통한 데이터 전송 POST, PUT, PATCH 회원 가입, 상품 주문, 리소스 등록, 리소스 변경 클라이언트에서 서버로 데이터 전송 - 4가지 상황 정적 데이터 조회 (GET) 이미지, 정적 텍스트 문서 동적 데이터 조회 (GET) 주로 검색, 게시판 목록에서 정렬 필터(검색어) HTML Form을 통한 데이터 전송 (POST -> 데이터 변경, GET -> 데이터 조회) 회원 가입, 상품 주문, 데이터 전송 HTTP API를 통한 데이터 전송 회원 가입, 상품 주문, 데이터 변경 서버 to 서버, 앱 클라이언트, 웹 클라이언트(Ajax) HTTP_method_send_data_1…","frontmatter":{"categories":"TIL","title":"22.01.12 TIL","date":"January 12, 2022"},"fields":{"slug":"/TIL/22.01.12/22.01.12/"}}},{"node":{"id":"819b1d16-9e5f-5bff-aff8-8a33a223a962","excerpt":"모든 개발자를 위한 HTTP 웹 기본지식 수강 HTTP 메서드 - HTTP API를 만들어보자 API URI 설계 회원 목록 조회 /read-member-list 회원 조회 /read-member-by id 회원 등록 /create-member 회원 수정 /update-member 회원 삭제 /delete-member -> 이것은 좋은 URI 설계인가? 가장 중요한 것은 리소스 식별 API URI 고민 리소스의 의미는 뭔가? 회원을 등록하고 수정하고 조회하는 것이 리소스가 아니다! 예) 미네랄을 캐라 -> 미네랄이 리소스 회원이라는 개념 자체가 바로 리소스다. 리소스를 어떻게 식별하는 것이 좋을까? 회원을 등록하고 수정하고 조회하는 것은 모두 배제 회원이라는 리소스만 식별하면 된다. -> 회원 리소스를 URI에 매핑 API URI 설계 - 리소스 식별, URI 계층 구조 활용 회원 목록 조회 /members 회원 조회 /members/{id} -> 어떻게 구분하지? 회원 등록 /m…","frontmatter":{"categories":"TIL","title":"22.01.11 TIL","date":"January 11, 2022"},"fields":{"slug":"/TIL/22.01.11/22.01.11/"}}},{"node":{"id":"e0cdfe43-a9cf-5e1f-8300-45717e5fb880","excerpt":"모든 개발자를 위한 HTTP 웹 기본지식 수강 HTTP 기본 - 모든 것이 HTTP HTTP(HyperText Transfer Protocol) HTML, TEXT IMAGE, 음성, 영상, 파일 JSON, XML (API) 거의 모든 형태의 데이터 전송 가능 서버 간에 데이터를 주고받을 때도 대부분 HTTP 사용 실무에서 서버 간의 통신할 때 TCP 프로토콜을 직접 이용해서 데이터 전송 하는 경우는 드물다(게임 서버, 특수한 경우) 모바일 게임 같은 경우 HTTP 통신하는 구조로 개발 많이 함. HTTP 역사 HTTP/0.9(1991) : GET 메서드만 지원, HTTP 헤더 없음 HTTP/1.0(1996) : 메서드, 헤더 추가 HTTP/1.1(1997) : 가장 많이 사용 RFC2068(1997) -> RFC2616(1999) -> RFC7230~7235(2014) HTTP/1.1에 대부분의 기능이 담겨 있음. HTTP/2(2015) : 성능 개선 HTTP/3(진행 중) : …","frontmatter":{"categories":"TIL","title":"22.01.10 TIL","date":"January 10, 2022"},"fields":{"slug":"/TIL/22.01.10/22.01.10/"}}},{"node":{"id":"bae24baf-712d-5729-8072-79fcd5bd7a61","excerpt":"모든 개발자를 위한 HTTP 웹 기본지식 수강 URI와 웹 브라우저 요청 흐름 - URI URI(Uniform Resource Identifier) Uniform : 리소스 식별하는 통일된 방식 Resource : 자원, URI로 식별할 수 있는 모든 것(제한 없음) 자원 : 웹브라우저의 HTML파일 같은 것뿐만 아니라 실시간 교통 정보 등 우리가 구분할 수 있는 모든것 Identifier : 다른 항목과 구분하는데 필요한 정보 URI는 로케이터(locator), 이름 또는 둘 다 추가로 분류될 수 있다. 참조 : https://www.ietf.org/rfc/rfc3986.txt HTTP_URI_1_1.PNG\r\nHTTP_URI_1_2.PNG URL, URN 뜻 URL(Uniform Resource Locator) Locator : 리소스가 있는 위치를 지정 URN(Uniform Resource Name) Name : 리소스에 이름을 부여 위치는 변할 수 있지만, 이름은 변하지 않는…","frontmatter":{"categories":"TIL","title":"22.01.09 TIL","date":"January 09, 2022"},"fields":{"slug":"/TIL/22.01.09/22.01.09/"}}},{"node":{"id":"dd998109-4388-5c57-be55-36b4beb4f3b9","excerpt":"모든 개발자를 위한 HTTP 웹 기본지식 수강 인터넷 네트워크 - 1. 인터넷 통신 인터넷에서 실질적인 최종 통신은 두 프로세스 사이의 데이터 전달이다. HTTP_Internet_1.PNG 인터넷 네트워크 - 2. IP(인터넷 프로토콜) HTTP_Internet_2.PNG IP 역할 지정한 IP 주소(IP Address)에 데이터 전달 패킷(Packet)이라는 통신 단위로 데이터 전달 IP 패킷의 정보(규칙) HTTP_Internet_2_2.PNG HTTP_Internet_2_3.PNG IP 프로토콜의 한계 비연결성 : 패킷을 받을 대상이 없거나 서비스 불능 상태여도 패킷 전송한다. 비신뢰성 : 패킷 전달 과정에서 자료 손실과 패킷 전달 순서 같은 문제도 발생할 수 있다.(패킷이 용량이 클 때[1500byte 이상 보통 나누어서 보냄] 패킷들이 중간에 다른 노드로 탈수 있음) 프로그램 구분 : 같은 IP를 사용하는 서버에서 통신하는 애플리케이션들을 구분할 수 없다. 위 문제점은 T…","frontmatter":{"categories":"TIL","title":"22.01.08 TIL","date":"January 08, 2022"},"fields":{"slug":"/TIL/22.01.08/22.01.08/"}}},{"node":{"id":"c5cbc431-ea4c-5f90-890b-6952892a19a4","excerpt":"생활코딩 JAVA abstract 강의 수강 1 ~ 3 완강 JAVA abstract - 1. abstract의 문법 abstract는 추상이라는 의미고 주목해야 할 특징은 abstract로 지정된 메소드나 클래스는 직접적으로 사용할 수가 없고 반드시 그것을 상속한 클래스를 만들어서 상속한 클래스를 사용하도록 강제하는 것이다. 추상 메소드, 추상 클래스라고 하는 것은 구체적인 로직을 담고 있지 않고 그 로직을 사용하기 위한 형식을 가지고 있다. 메소드 중에 하나라도 abstract라 지정되어 있다면 그 메소드를 담고 있는 클래스도 이름 앞에 abstract가 지정된다. 하지만 abstract라 지정된 클래스 안에는 구체적인 로직을 담은 메소드도 가질 수도 있다. JAVA abstract - 2. abstract의 사용 이유 상속을 강제하기 위한 규제, 부모 클래스에는 메소드의 시그니처만 정의해놓고 그 메소드의 실제 동작 방법은 이 메소드를 상속받는 하위 클래스의 책임으로 위임한다.…","frontmatter":{"categories":"TIL","title":"22.01.07 TIL","date":"January 07, 2022"},"fields":{"slug":"/TIL/22.01.07/"}}},{"node":{"id":"5c7fdb57-30c6-5a03-bfa1-c7833cf86506","excerpt":"생활코딩 JAVA interface 강의 수강 1 ~ 5 완강 JAVA Interface - 1. 수업소개 인터페이스는 클래스의 형태를 규정하는 약속이다. JAVA Interface - 2. 인터페이스의 형식 자바에서는 하나의 클래스가 한 개의 상속 받을 수 있지만 여러 개의 인터페이스를 구현할 수 있다.\r\n보통 인터페이스의 이름은 대문자로 시작하고 형용사로 쓸 때가 많다.\r\n인터페이스에는 메소드와 변수가 정의될 수 있는데 변수에는 값이 들어오고 메소드는 실제 구현이 들어가지 않는다. 그래서 저 메소드를 구현하는 클래스가 형태를 만족하는 메소드 내용을 직접 구현해야 한다. JAVA Interface - 3. 다형성 하나의 클래스가 여러 가지의 형태를 갖게 하는 것 JAVA Interface - 3. 사용설명서 속의 인터페이스 인터페이스는 동작 방법을 조작하는 방식을 표준화하는 데 아주 많이 사용된다. 생활코딩 JAVA 예외 강의 수강 1 ~ 9 완강 JAVA 예외 - 1. 수업 소…","frontmatter":{"categories":"TIL","title":"22.01.06 TIL","date":"January 06, 2022"},"fields":{"slug":"/TIL/22.01.06/"}}},{"node":{"id":"97ba24fb-cff7-5865-b812-bdf58138038c","excerpt":"생활코딩 JAVA 상속 강의 수강 1 ~ 6 완강 JAVA 상속 - 1. 수업소개 상속은 어떤 클래스가 있을 때 그 클래스가 가지고 있는 변수와 메소드를 확장해서 상속해서 다른 클래스가 갖도록 하는 것 그것을 통해서 재사용성을 높이고 유지보수에 편의성을 높이고 가독성을 높이고 코드의 양을 줄이는 목적을 달성할 수 있다. JAVA 상속 - 3. Overriding VS Overloading 오버라이딩(Overriding) : 재정의, 부모 클래스가 가진 기능을 덮어쓴다. 오버로딩(Overloading) : 과적, 자바에서는 같은 이름의 메소드를 형태만 다르게 사용하여 공존할 수 있다. 상속과는 상관이 없다. JAVA 상속 - 4. Overriding VS Overloading super는 부모, this는 자기 자신을 의미한다. JAVA 상속 - 5. 상속과 생성자 생성자가 있는 클래스를 상속받았다면 부모 클래스의 생성자를 반드시 호출해야 한다. JAVA 상속 - 6. 수업을 마치며…","frontmatter":{"categories":"TIL","title":"22.01.05 TIL","date":"January 05, 2022"},"fields":{"slug":"/TIL/22.01.05/"}}},{"node":{"id":"637f78ef-59d7-5996-a201-a8362e09650c","excerpt":"생활코딩 JAVA 객체지향 프로그래밍 강의 수강 1 ~ 9 완강 JAVA 객체지향 프로그래밍 - 1. 수업소개 method를 다른 컴퓨터 언어에서는 function, subroutine, procedural이라고 부른다.\r\n한국어로는 절차 지향적 프로그래밍, 영어로는 procedural programming이라고 불리는 프로그래밍의 패러다임은 procedure 즉 자바에서는 메소드라고 불리는 것을 이용해서 프로그램을 정리 정돈하는 프로그래밍기법이라고 할 수 있다. 메소드를 이용해서 작은 부품을 만들고 이것을 결합해서 더 큰 프로그램을 만들어 가는 테크닉이 procedural programming이다. 대표적인 언어는 C이다. 클래스를 중심으로 프로그램의 구조를 만들어가는 컴퓨터 프로그래밍 방법론을 객체지향 프로그래밍, 또 이런 방법론을 언어 차원에서 제공하는 언어들을 객체지향 언어라고 한다. JAVA 객체지향 프로그래밍 - 2. 남의 클래스 & 남의 인스턴스 Math라는 클래스가 …","frontmatter":{"categories":"TIL","title":"22.01.04 TIL","date":"January 04, 2022"},"fields":{"slug":"/TIL/22.01.04/22.01.04/"}}},{"node":{"id":"551e39f5-a130-5e1b-b121-3295e0dfcdad","excerpt":"생활코딩 JAVA method 강의 수강 1 ~ 9 완강 JAVA method - 1. 수업소개 연관된 코드를 모아서 그룹핑하고 거기에 이름을 붙이면 그것이 함수, 메소드라 한다. 메소드를 이용하면 복잡한 코드를 깔끔하게 정리할 수 있다. 이미 만들어 놓은 메소드를 사용하는 것을 통해서 똑같은 코드를 작성하지 않고 재사용할 수 있게 된다. JAVA method - 3. 메소드의 기본 형식 메소드의 이름으로 코드의 목적을 알릴 수 있고 프로그래밍 언어에서 리팩토링의 핵심적인 요소는 메소드이다. 리팩토링으로 코드를 메소드화 시킬 수 있다. JAVA method - 4. 메소드의 입력 메소드는 약속이다. main이란 메소드가 있어야 자바는 main이란 메소드를 호출해서 우리가 실행하고 싶은 프로그램을 실행시킨다. 매개변수(parameter) : 메소드 바깥쪽에서 메소드를 사용하는 쪽에서 주입한 값을 메소드 안으로 흘려보내 주는 매개자다. 인자(argument): 메소드 안에 주입된 구체…","frontmatter":{"categories":"TIL","title":"22.01.03 TIL","date":"January 03, 2022"},"fields":{"slug":"/TIL/22.01.03/"}}},{"node":{"id":"23f74313-064c-5a21-9798-8d34cdd5f100","excerpt":"생활코딩 JAVA 제어문 강의 수강 1 ~ 8.2 완강 JAVA 제어문 - 5. == VS equals 데이터 타입에는 더 이상 쪼갤 수 없는 원시(primitive) 데이터 타입과 비원시(non primitive) 데이터 타입으로 나눌 수 있는데 원시 데이터 타입은 변수들이 서로 같은 값을 가지고 있으면 그 값이 존재하는 주소를 가리키고 있지만 비원시 데이터 타입은 서로 같은 값을 가지고 있어도 값이 각각의 다른 주소에 저장이 된다. 동등비교연산자는 서로의 값이 같은 주소에 위치하는지 확인하는 연산자이고 .equals() 는 같은 값인지 비교 확인하는 메소드이다. 결론은 서로 같은 값을 가졌는지 확인하고자 한다면 원시 데이터타입은 동등비교연산자를 사용해도 무방하나 비원시 데이터타입은 .equals() 메소드를 사용하는 것이 좋다. 원시데이터 : boolean, int, double, short, long, float, char 비원시데이터 : String, Array, Date,…","frontmatter":{"categories":"TIL","title":"21.12.20 TIL","date":"December 20, 2021"},"fields":{"slug":"/TIL/21.12.20/"}}},{"node":{"id":"acd12ba4-7172-57b7-ac30-6b3cab76c1c8","excerpt":"생활코딩 JAVA1 강의 수강 14.1 ~ 15 완강 JAVA1 - 14.6 나의 앱 만들기 - 조건문 조건문을 사용하게 되면 프로그램이 알아서 자신의 상황을 판단해서 어떻게 동작할지를 결정할 수 있기 때문에 하나의 프로그램으로 여러 가지 일을 할 수 있는 폭발적인 효과를 얻을 수 있다. JAVA1 - 14.7 나의 앱 만들기 - 배열 변수가 많아질수록 코드가 복잡해지기 때문에 서로 연관된 데이터를 정리 정돈하는 수단인 배열을 사용하여 코드를 명확하고 보기 쉽게 만들어 줄 수 있다. JAVA1 - 14.8 나의 앱 만들기 - 반복문 반복문은 동일한 코드를 여러 번 반복해서 데이터를 처리해야 할 경우에 사용하기 좋으며 반복문의 장점은 같은 코드를 일일이 여러 번 작성해야 할 것을 단 몇 줄 안에 코드를 작성할 수 있고 반복문 안의 코드 몇 개의 부분만 수정하면 여러 개의 로직이 동시에 수정될 수 있어 코드를 효율적으로 관리 할 수 있다. 배열과 같이 사용하면 폭발적인 효과를 얻을 수…","frontmatter":{"categories":"TIL","title":"21.12.17 TIL","date":"December 17, 2021"},"fields":{"slug":"/TIL/21.12.17/"}}},{"node":{"id":"f6165483-1f9b-515e-932a-af25b550c12f","excerpt":"생활코딩 JAVA1 강의 수강 12.1 ~ 13.5 JAVA1 - 12.3 직접 컴파일하고 실행하기 : 컴파일과 실행하기 Windows 환경에서 명령 프롬프트를 이용한 컴파일과 실행하기 program.java 파일이 있는 디렉토리로 변경 명령어 : cd ~ program.java 파일을 컴파일하여 class 파일 만들기 명령어 : javac\r\n예) javac program.java\r\n명령어 dir로 .class 파일이 생긴 것을 확인할 수 있다. 프로그램 실행하기 명령어 : java (=java virtual machine)\r\n예) java program\r\nprogram.class 파일을 찾아 실행 .class 파일의 main 안에 있는 코드를 실행한다. JAVA1 - 12.4 직접 컴파일하고 실행하기 : 라이브러리 이용 라이브러리 : 다른 사람이 사용할 수 있도록 잘 정리 정돈된 프로그램들 JAVA1 - 13.1 자바 문서 보는 법 - API vs UI API : 우리가 자바를 …","frontmatter":{"categories":"TIL","title":"21.12.16 TIL","date":"December 16, 2021"},"fields":{"slug":"/TIL/21.12.16/21.12.16/"}}},{"node":{"id":"848a0ee3-96ac-535c-83ba-c0fa195252c3","excerpt":"생활코딩 JAVA1 강의 수강 7 ~ 11.2 JAVA1 - 8.1 변수의 정의 자바에서 변수를 만들 때는 그 변수가 어떤 데이터 타입을 담을 수 있는지를 명확하게 표현해줘야 한다 각 데이터 타입으로 변수에 정의해 놓는 이유는 오류를 발견하기 쉽거나 줄일 수 있고 변수를 사용할 때마다 데이터 타입을 확인하지 않아도 되기 때문이다. (안정성과 확실성) JAVA1 - 8.2 변수의 효용 변수의 효용 : 특정 값의 수정이 필요할 때 변수 하나만 수정하면 모두 수정이 가능하다. 변수의 이름은 모든 사람이 봐도 그 의미를 바로 파악할 수 있도록 정한다. JAVA1 - 8.3 데이터 타입의 변환(casting) 형 변환(casting) : 데이터 타입을 다른 데이터 타입으로 컨버팅한다. JAVA1 - 9.1 프로그래밍이란 무엇인가? 프로그램 : 시간의 순서에 따라서 어떤 일이 일어나는 것 프로그래밍 : 컴퓨터로 어떠한 일을 순차적으로 실행이 되는 것을 통해서 사람이 잘하지 못하는 일을 기계에…","frontmatter":{"categories":"TIL","title":"21.12.15 TIL","date":"December 15, 2021"},"fields":{"slug":"/TIL/21.12.15/"}}},{"node":{"id":"dc7d34d4-e05e-5629-bb67-a30ed49de66b","excerpt":"생활코딩 JAVA1 강의 수강 1 ~ 6.5 JAVA1 - 4.2 Java의 동작원리 JAVA1_4.2.PNG 사람이 이해할 수 있게 만들어진 컴퓨터 언어 JAVA로 소스 코드를 작성한다.(.java) 확장자가 .java 파일을 이해할 수 있도록 전환하는 작업인 컴파일로 컴퓨터가 이해할 수 있는 언어로 변환한다.(.class) Java Virtual Machine한테 클래스 파일을 실행하라고 시킨다. Java Virtual Machine이 확장자가 클래스인 파일을 읽어서 거기에 적혀있는 대로 컴퓨터를 동작시키게 된다. JAVA1 - 6.2 데이터 타입 데이터의 타입을 구분하는 이유는 데이터의 타입별로 그 타입의 어울리는 연산 방법이 있기 때문에 엄격하게 구분을 한다. 우리가 컴퓨터를 다루는 방법에 어떤 스킬을 쌓아 간다는 것은 두 가지의 중요한 흐름을 가진다. 내가 지금 하고 있는 시스템에는 어떤 종류의 데이터 타입들이 존재하는가를 알아가는 방향 각각의 데이터 타입별로 어떤 연산 …","frontmatter":{"categories":"TIL","title":"21.12.14 TIL","date":"December 14, 2021"},"fields":{"slug":"/TIL/21.12.14/21.12.14/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"김동욱","bio":{"role":"개발자","description":["협력을 중시하는","끊임없이 공부하는","문제해결을 즐기는","어디서든 잘 적응하는"],"thumbnail":"me.png"},"social":{"github":"https://github.com/95Donguk","email":"kdy9720@naver.com"}}}}},"pageContext":{}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437","3350743975"]}