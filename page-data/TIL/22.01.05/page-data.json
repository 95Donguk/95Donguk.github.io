{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/TIL/22.01.05/",
    "result": {"data":{"cur":{"id":"97ba24fb-cff7-5865-b812-bdf58138038c","html":"<h1 id=\"생활코딩-java-상속-강의-수강-1--6-완강\" style=\"position:relative;\"><a href=\"#%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9-java-%EC%83%81%EC%86%8D-%EA%B0%95%EC%9D%98-%EC%88%98%EA%B0%95-1--6-%EC%99%84%EA%B0%95\" aria-label=\"생활코딩 java 상속 강의 수강 1  6 완강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생활코딩 JAVA 상속 강의 수강 1 ~ 6 완강</h1>\n<hr>\n<blockquote>\n<h2 id=\"java-상속---1-수업소개\" style=\"position:relative;\"><a href=\"#java-%EC%83%81%EC%86%8D---1-%EC%88%98%EC%97%85%EC%86%8C%EA%B0%9C\" aria-label=\"java 상속   1 수업소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 상속 - 1. 수업소개</h2>\n</blockquote>\n<p>상속은 어떤 클래스가 있을 때 그 클래스가 가지고 있는 변수와 메소드를 확장해서 상속해서 다른 클래스가 갖도록 하는 것 그것을 통해서 재사용성을 높이고 유지보수에 편의성을 높이고 가독성을 높이고 코드의 양을 줄이는 목적을 달성할 수 있다.</p>\n<blockquote>\n<h2 id=\"java-상속---3-overriding-vs-overloading\" style=\"position:relative;\"><a href=\"#java-%EC%83%81%EC%86%8D---3-overriding-vs-overloading\" aria-label=\"java 상속   3 overriding vs overloading permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 상속 - 3. Overriding VS Overloading</h2>\n</blockquote>\n<ul>\n<li>\n<p>오버라이딩(Overriding) : 재정의, 부모 클래스가 가진 기능을 덮어쓴다.</p>\n</li>\n<li>\n<p>오버로딩(Overloading) : 과적, 자바에서는 같은 이름의 메소드를 형태만 다르게 사용하여 공존할 수 있다. 상속과는 상관이 없다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cal</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> v1<span class=\"token operator\">+</span>v2<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">// Overloading</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> v1<span class=\"token operator\">+</span>v2<span class=\"token operator\">+</span>v3<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cal_child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Cal</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> v1<span class=\"token operator\">-</span>v2<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token comment\">// Overriding</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cal_child!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> v1<span class=\"token operator\">+</span>v2<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<h2 id=\"java-상속---4-overriding-vs-overloading\" style=\"position:relative;\"><a href=\"#java-%EC%83%81%EC%86%8D---4-overriding-vs-overloading\" aria-label=\"java 상속   4 overriding vs overloading permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 상속 - 4. Overriding VS Overloading</h2>\n</blockquote>\n<p>super는 부모, this는 자기 자신을 의미한다.</p>\n<blockquote>\n<h2 id=\"java-상속---5-상속과-생성자\" style=\"position:relative;\"><a href=\"#java-%EC%83%81%EC%86%8D---5-%EC%83%81%EC%86%8D%EA%B3%BC-%EC%83%9D%EC%84%B1%EC%9E%90\" aria-label=\"java 상속   5 상속과 생성자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 상속 - 5. 상속과 생성자</h2>\n</blockquote>\n<p>생성자가 있는 클래스를 상속받았다면 부모 클래스의 생성자를 반드시 호출해야 한다.</p>\n<blockquote>\n<h2 id=\"java-상속---6-수업을-마치며\" style=\"position:relative;\"><a href=\"#java-%EC%83%81%EC%86%8D---6-%EC%88%98%EC%97%85%EC%9D%84-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"java 상속   6 수업을 마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 상속 - 6. 수업을 마치며</h2>\n</blockquote>\n<p>차후에 공부해야 할 주제 : 다형성(Polymorphism), 접근 제어자(Access Modifiers), Final, Abstract</p>\n<hr>\n<h2 id=\"-틀렸거나-잘못된-정보가-있다면-망설임-없이-댓글로-알려주세요\" style=\"position:relative;\"><a href=\"#-%ED%8B%80%EB%A0%B8%EA%B1%B0%EB%82%98-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%A7%9D%EC%84%A4%EC%9E%84-%EC%97%86%EC%9D%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\" 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요!</h2>","excerpt":"생활코딩 JAVA 상속 강의 수강 1 ~ 6 완강 JAVA 상속 - 1. 수업소개 상속은 어떤 클래스가 있을 때 그 클래스가 가지고 있는 변수와 메소드를 확장해서 상속해서 다른 클래스가 갖도록 하는 것 그것을 통해서 재사용성을 높이고 유지보수에 편의성을 높이고 가독성을 높이고 코드의 양을 줄이는 목적을 달성할 수 있다. JAVA 상속 - 3. Overriding VS Overloading 오버라이딩(Overriding) : 재정의, 부모 클래스가 가진 기능을 덮어쓴다. 오버로딩(Overloading) : 과적, 자바에서는 같은 이름의 메소드를 형태만 다르게 사용하여 공존할 수 있다. 상속과는 상관이 없다. JAVA 상속 - 4. Overriding VS Overloading super는 부모, this는 자기 자신을 의미한다. JAVA 상속 - 5. 상속과 생성자 생성자가 있는 클래스를 상속받았다면 부모 클래스의 생성자를 반드시 호출해야 한다. JAVA 상속 - 6. 수업을 마치며…","frontmatter":{"date":"January 05, 2022","title":"22.01.05 TIL","categories":"TIL","author":"95Donguk","emoji":"❗"},"fields":{"slug":"/TIL/22.01.05/"}},"next":{"id":"637f78ef-59d7-5996-a201-a8362e09650c","html":"<h1 id=\"생활코딩-java-객체지향-프로그래밍-강의-수강-1--9-완강\" style=\"position:relative;\"><a href=\"#%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9-java-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EA%B0%95%EC%9D%98-%EC%88%98%EA%B0%95-1--9-%EC%99%84%EA%B0%95\" aria-label=\"생활코딩 java 객체지향 프로그래밍 강의 수강 1  9 완강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생활코딩 JAVA 객체지향 프로그래밍 강의 수강 1 ~ 9 완강</h1>\n<hr>\n<blockquote>\n<h2 id=\"java-객체지향-프로그래밍---1-수업소개\" style=\"position:relative;\"><a href=\"#java-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D---1-%EC%88%98%EC%97%85%EC%86%8C%EA%B0%9C\" aria-label=\"java 객체지향 프로그래밍   1 수업소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 객체지향 프로그래밍 - 1. 수업소개</h2>\n</blockquote>\n<p>method를 다른 컴퓨터 언어에서는 function, subroutine, procedural이라고 부른다.\r\n한국어로는 절차 지향적 프로그래밍, 영어로는 procedural programming이라고 불리는 프로그래밍의 패러다임은 procedure 즉 자바에서는 메소드라고 불리는 것을 이용해서 프로그램을 정리 정돈하는 프로그래밍기법이라고 할 수 있다. 메소드를 이용해서 작은 부품을 만들고 이것을 결합해서 더 큰 프로그램을 만들어 가는 테크닉이 procedural programming이다. 대표적인 언어는 C이다.</p>\n<p>클래스를 중심으로 프로그램의 구조를 만들어가는 컴퓨터 프로그래밍 방법론을 객체지향 프로그래밍, 또 이런 방법론을 언어 차원에서 제공하는 언어들을 객체지향 언어라고 한다.</p>\n<blockquote>\n<h2 id=\"java-객체지향-프로그래밍---2-남의-클래스--남의-인스턴스\" style=\"position:relative;\"><a href=\"#java-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D---2-%EB%82%A8%EC%9D%98-%ED%81%B4%EB%9E%98%EC%8A%A4--%EB%82%A8%EC%9D%98-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4\" aria-label=\"java 객체지향 프로그래밍   2 남의 클래스  남의 인스턴스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 객체지향 프로그래밍 - 2. 남의 클래스 &#x26; 남의 인스턴스</h2>\n</blockquote>\n<p>Math라는 클래스가 있고 그 안에는 PI라는 변수, floor, ceil과 같은 메소드들도 있다. 코드가 많아짐에 따라서 서로 연관된 같은 주제를 가지고 있는 변수와 메소드를 그룹핑한 껍데기가 클래스이다. 긴 맥락을 가지고 작업해야 하는 그러한 작업인 경우에는 우리가 클래스를 직접 사용하는 것이 아니라 클래스를 복제본으로 만들어서 제어한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">// class : System, Math, FileWriter</span>\r\n        <span class=\"token comment\">// instance : f1, f2</span>\r\n         \r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span>PI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n         \r\n        <span class=\"token class-name\">FileWriter</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        f1<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        f1<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" Java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n         \r\n         \r\n        <span class=\"token class-name\">FileWriter</span> f2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data2.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        f2<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        f2<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" Java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        f2<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n         \r\n        f1<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        f1<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<h2 id=\"java-객체지향-프로그래밍---42-클래스---형식\" style=\"position:relative;\"><a href=\"#java-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D---42-%ED%81%B4%EB%9E%98%EC%8A%A4---%ED%98%95%EC%8B%9D\" aria-label=\"java 객체지향 프로그래밍   42 클래스   형식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 객체지향 프로그래밍 - 4.2. 클래스 - 형식</h2>\n</blockquote>\n<p>하나의 파일 안에서 클래스를 여러 개 만들면 그 각각의 클래스가 파일로서 존재하게 된다.\r\n하나의 거대한 자바 파일로 애플리케이션을 만들 수도 있지만, 그 기능에 따라 파일로 적당히 분산하여 소프트웨어를 만든다면 이거 또한 정리정돈의 효과를 가진다.</p>\n<blockquote>\n<h2 id=\"java-객체지향-프로그래밍---6-static\" style=\"position:relative;\"><a href=\"#java-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D---6-static\" aria-label=\"java 객체지향 프로그래밍   6 static permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 객체지향 프로그래밍 - 6. static</h2>\n</blockquote>\n<p>클래스를 통해서 직접 인스턴스 변수에 접근하는 건 금지되어 있다. 또 인스턴스 메소드에 접근하는 것도 금지되어 있다. 인스턴스는 클래스의 여러 가지 멤버들을 복제해 오는데 static이라는 키워드가 붙은 클래스 변수는 인스턴스에 실제 값이 존재하지 않고 클래스를 가리키고 있고 클래스에 static이라는 키워드가 없는 변수는 인스턴스 변수로 생성되면서 만약에 클래스의 값도 세팅되어 있다면 그 값까지 복제가 된다. 그리고 클래스에 있는 변수와 인스턴스에 있는 변수는 서로 링크 걸려 있지 않기 때문에 인스턴스에서 변수의 값은 바꾼다고 해도 클래스의 변수의 값은 바뀌지 않는다. 하지만 static이라는 키워드가 붙은 변수는 인스턴스에서 바꾸면 클래스에 있는 변수도 바뀌고 반대로 클래스에 있는 변수가 바뀌면 인스턴스에서도 변수가 바뀐다. 메소드도 마찬가지로 static이라는 키워드가 붙은 메소드는 클래스의 메소드를 참조하는 것이고 static이라는 키워드가 없는 메소드는 인스턴스가 메소드를 복제하여 서로 독립된 존재가 된다.(그림 참조)</p>\n<p><img src=\"/5fce3667f32025b768b70d5b91e6c46b/JAVA_OOP_6.png\" alt=\"JAVA_OOP_6.PNG\"></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> classVar <span class=\"token operator\">=</span> <span class=\"token string\">\"I class var\"</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> instanceVar <span class=\"token operator\">=</span> <span class=\"token string\">\"I instance var\"</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">classMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>classVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\r\n<span class=\"token comment\">//      System.out.println(instanceVar); // Error</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">instanceMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>classVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instanceVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StaticApp</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>classVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\r\n<span class=\"token comment\">//      System.out.println(Foo.instanceVar); // Error</span>\r\n        <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">classMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\r\n<span class=\"token comment\">//      Foo.instanceMethod(); // Error</span>\r\n         \r\n        <span class=\"token class-name\">Foo</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">Foo</span> f2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    \r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">.</span>classVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I class var</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">.</span>instanceVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I instance var</span>\r\n     \r\n        f1<span class=\"token punctuation\">.</span>classVar <span class=\"token operator\">=</span> <span class=\"token string\">\"changed by f1\"</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>classVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// changed by f1</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">.</span>classVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// changed by f1</span>\r\n    \r\n        f1<span class=\"token punctuation\">.</span>instanceVar <span class=\"token operator\">=</span> <span class=\"token string\">\"changed by f1\"</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">.</span>instanceVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// changed by f1</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">.</span>instanceVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I instance var</span>\r\n    <span class=\"token punctuation\">}</span>\r\n \r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>중요 : 클래스의 변수를 바꾸면 모든 인스턴스에 변수의 값이 바뀐다. 또 인스턴스에서 클래스 변수를 바꿀 수도 있는데 그렇게 되면 클래스의 변수가 바뀌고 그 클래스 변수를 사용하고 있는 모든 인스턴스의 클래스 변수의 값도 바뀐다.</li>\n</ul>\n<p>결론은 static은 클래스 소속, static이 없는 것은 인스턴스 소속이다.</p>\n<blockquote>\n<h2 id=\"java-객체지향-프로그래밍---7-생성자와-this\" style=\"position:relative;\"><a href=\"#java-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D---7-%EC%83%9D%EC%84%B1%EC%9E%90%EC%99%80-this\" aria-label=\"java 객체지향 프로그래밍   7 생성자와 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 객체지향 프로그래밍 - 7. 생성자와 this</h2>\n</blockquote>\n<p>인스턴스가 생성될 때 반드시 처리해야 할 어떠한 작업이 있을 것인데 바로 초기에 주입할 필요가 있는 값을 전달하거나 최초로 꼭 실행해야 할 작업을 수행하고 싶을 때 바로 생성자라는 것을 이용해서 문제를 해결할 수 있다. 생성자는 클래스의 이름과 똑같은 메소드를 정의하면 되고 static이나 return 데이터 타입 등은 지정하지 않는다. this라는 특수한 키워드는 그 클래스가 인스턴스화 되었을 때의 인스턴스를 가리키는 이름이다.</p>\n<blockquote>\n<h2 id=\"java-객체지향-프로그래밍---9-수업을-마치며\" style=\"position:relative;\"><a href=\"#java-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D---9-%EC%88%98%EC%97%85%EC%9D%84-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"java 객체지향 프로그래밍   9 수업을 마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 객체지향 프로그래밍 - 9. 수업을 마치며</h2>\n</blockquote>\n<p>차후에 공부해야 할 주제 : 상속(Inheritance), 인터페이스(Interface), 패키지(Package)</p>\n<hr>\n<h2 id=\"-틀렸거나-잘못된-정보가-있다면-망설임-없이-댓글로-알려주세요\" style=\"position:relative;\"><a href=\"#-%ED%8B%80%EB%A0%B8%EA%B1%B0%EB%82%98-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%A7%9D%EC%84%A4%EC%9E%84-%EC%97%86%EC%9D%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\" 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요!</h2>","frontmatter":{"date":"January 04, 2022","title":"22.01.04 TIL","categories":"TIL","author":"95Donguk","emoji":"❗"},"fields":{"slug":"/TIL/22.01.04/22.01.04/"}},"prev":{"id":"5c7fdb57-30c6-5a03-bfa1-c7833cf86506","html":"<h1 id=\"생활코딩-java-interface-강의-수강-1--5-완강\" style=\"position:relative;\"><a href=\"#%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9-java-interface-%EA%B0%95%EC%9D%98-%EC%88%98%EA%B0%95-1--5-%EC%99%84%EA%B0%95\" aria-label=\"생활코딩 java interface 강의 수강 1  5 완강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생활코딩 JAVA interface 강의 수강 1 ~ 5 완강</h1>\n<hr>\n<blockquote>\n<h2 id=\"java-interface---1-수업소개\" style=\"position:relative;\"><a href=\"#java-interface---1-%EC%88%98%EC%97%85%EC%86%8C%EA%B0%9C\" aria-label=\"java interface   1 수업소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA Interface - 1. 수업소개</h2>\n</blockquote>\n<p>인터페이스는 클래스의 형태를 규정하는 약속이다.</p>\n<blockquote>\n<h2 id=\"java-interface---2-인터페이스의-형식\" style=\"position:relative;\"><a href=\"#java-interface---2-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-%ED%98%95%EC%8B%9D\" aria-label=\"java interface   2 인터페이스의 형식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA Interface - 2. 인터페이스의 형식</h2>\n</blockquote>\n<p>자바에서는 하나의 클래스가 한 개의 상속 받을 수 있지만 여러 개의 인터페이스를 구현할 수 있다.\r\n보통 인터페이스의 이름은 대문자로 시작하고 형용사로 쓸 때가 많다.\r\n인터페이스에는 메소드와 변수가 정의될 수 있는데 변수에는 값이 들어오고 메소드는 실제 구현이 들어가지 않는다. 그래서 저 메소드를 구현하는 클래스가 형태를 만족하는 메소드 내용을 직접 구현해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Calculable</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">double</span> PI <span class=\"token operator\">=</span> <span class=\"token number\">3.141592</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Printable</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cal</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Calculable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Printable</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> v1<span class=\"token operator\">+</span>v2<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is Cal!!!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<h2 id=\"java-interface---3-다형성\" style=\"position:relative;\"><a href=\"#java-interface---3-%EB%8B%A4%ED%98%95%EC%84%B1\" aria-label=\"java interface   3 다형성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA Interface - 3. 다형성</h2>\n</blockquote>\n<p>하나의 클래스가 여러 가지의 형태를 갖게 하는 것</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Calculable</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">double</span> PI <span class=\"token operator\">=</span> <span class=\"token number\">3.141592</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Printable</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cal</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Calculable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Printable</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> v1<span class=\"token operator\">+</span>v2<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is Cal!!!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InterfaceApp</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">// Cal 클래스에서 Printable에 해당하는 기능을 제외한 나머지 메소드와 변수는 감춰 필요한 기능만 사용할 수 있게 바꾼다(다형성)</span>\r\n        <span class=\"token class-name\">Printable</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \r\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<h2 id=\"java-interface---3-사용설명서-속의-인터페이스\" style=\"position:relative;\"><a href=\"#java-interface---3-%EC%82%AC%EC%9A%A9%EC%84%A4%EB%AA%85%EC%84%9C-%EC%86%8D%EC%9D%98-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"java interface   3 사용설명서 속의 인터페이스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA Interface - 3. 사용설명서 속의 인터페이스</h2>\n</blockquote>\n<p>인터페이스는 동작 방법을 조작하는 방식을 표준화하는 데 아주 많이 사용된다.</p>\n<hr>\n<h1 id=\"생활코딩-java-예외-강의-수강-1--9-완강\" style=\"position:relative;\"><a href=\"#%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9-java-%EC%98%88%EC%99%B8-%EA%B0%95%EC%9D%98-%EC%88%98%EA%B0%95-1--9-%EC%99%84%EA%B0%95\" aria-label=\"생활코딩 java 예외 강의 수강 1  9 완강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생활코딩 JAVA 예외 강의 수강 1 ~ 9 완강</h1>\n<blockquote>\n<h2 id=\"java-예외---1-수업-소개\" style=\"position:relative;\"><a href=\"#java-%EC%98%88%EC%99%B8---1-%EC%88%98%EC%97%85-%EC%86%8C%EA%B0%9C\" aria-label=\"java 예외   1 수업 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 예외 - 1. 수업 소개</h2>\n</blockquote>\n<p>자바에서는 ERROR와 EXCEPTION을 구분한다.</p>\n<ul>\n<li>ERROR는 내가 만든 프로그램의 문제가 아닌 그 프로그램이 동작하는 환경의 문제</li>\n</ul>\n<p>예) 메모리 부족, 운영체제 문제</p>\n<ul>\n<li>EXCEPTION : 내가 의도한 것과는 다른 상황에 직면했을 때의 문제</li>\n</ul>\n<p>예) 사용자가 예상하지 못한 값을 입력해서 예외적인 상황이 발생했을 때</p>\n<blockquote>\n<h2 id=\"java-예외---6-checked-exception-vs-unchecked-exception\" style=\"position:relative;\"><a href=\"#java-%EC%98%88%EC%99%B8---6-checked-exception-vs-unchecked-exception\" aria-label=\"java 예외   6 checked exception vs unchecked exception permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 예외 - 6. checked exception vs unchecked exception</h2>\n</blockquote>\n<ul>\n<li>\n<p>unchecked exception : RuntimeException을 포함한 그의 자식 예외클래스</p>\n</li>\n<li>\n<p>checked exception : Exception에서 RuntimeException을 제외한 나머지 예외클래스</p>\n</li>\n<li>\n<p>checked exception의 경우 try catch 문이나 throws 라는 것을 통해서 예외에 대한 조치를 반드시 취해야 한다.</p>\n</li>\n</ul>\n<blockquote>\n<p>JAVA 예외 - 8. try with resource</p>\n</blockquote>\n<ul>\n<li>try with resource: 리소스 작업을 포함하는 프로그램의 예외 처리를 할 수 있도록 도와주는 기능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">        <span class=\"token comment\">// try with resource statements</span>\r\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileWriter</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            f<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token comment\">// .close() 내부적으로 수행</span>\r\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            <span class=\"token comment\">// printStackTrace() : 에러의 정보를 화면에 출력 할 때 사용</span>\r\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \r\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"-틀렸거나-잘못된-정보가-있다면-망설임-없이-댓글로-알려주세요\" style=\"position:relative;\"><a href=\"#-%ED%8B%80%EB%A0%B8%EA%B1%B0%EB%82%98-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%A7%9D%EC%84%A4%EC%9E%84-%EC%97%86%EC%9D%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\" 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요!</h2>","frontmatter":{"date":"January 06, 2022","title":"22.01.06 TIL","categories":"TIL","author":"95Donguk","emoji":"❗"},"fields":{"slug":"/TIL/22.01.06/"}},"site":{"siteMetadata":{"siteUrl":"https://95donguk.github.io","comments":{"utterances":{"repo":"95Donguk/95Donguk.github.io"}}}}},"pageContext":{"slug":"/TIL/22.01.05/","nextSlug":"/TIL/22.01.04/22.01.04/","prevSlug":"/TIL/22.01.06/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}