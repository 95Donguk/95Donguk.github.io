{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/TIL/22.01.03/",
    "result": {"data":{"cur":{"id":"551e39f5-a130-5e1b-b121-3295e0dfcdad","html":"<h1 id=\"생활코딩-java-method-강의-수강-1--9-완강\" style=\"position:relative;\"><a href=\"#%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9-java-method-%EA%B0%95%EC%9D%98-%EC%88%98%EA%B0%95-1--9-%EC%99%84%EA%B0%95\" aria-label=\"생활코딩 java method 강의 수강 1  9 완강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생활코딩 JAVA method 강의 수강 1 ~ 9 완강</h1>\n<hr>\n<blockquote>\n<h2 id=\"java-method---1-수업소개\" style=\"position:relative;\"><a href=\"#java-method---1-%EC%88%98%EC%97%85%EC%86%8C%EA%B0%9C\" aria-label=\"java method   1 수업소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA method - 1. 수업소개</h2>\n</blockquote>\n<p>연관된 코드를 모아서 그룹핑하고 거기에 이름을 붙이면 그것이 함수, 메소드라 한다. 메소드를 이용하면 복잡한 코드를 깔끔하게 정리할 수 있다. 이미 만들어 놓은 메소드를 사용하는 것을 통해서 똑같은 코드를 작성하지 않고 재사용할 수 있게 된다.</p>\n<blockquote>\n<h2 id=\"java-method---3-메소드의-기본-형식\" style=\"position:relative;\"><a href=\"#java-method---3-%EB%A9%94%EC%86%8C%EB%93%9C%EC%9D%98-%EA%B8%B0%EB%B3%B8-%ED%98%95%EC%8B%9D\" aria-label=\"java method   3 메소드의 기본 형식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA method - 3. 메소드의 기본 형식</h2>\n</blockquote>\n<p>메소드의 이름으로 코드의 목적을 알릴 수 있고 프로그래밍 언어에서 리팩토링의 핵심적인 요소는 메소드이다. 리팩토링으로 코드를 메소드화 시킬 수 있다.</p>\n<blockquote>\n<h2 id=\"java-method---4-메소드의-입력\" style=\"position:relative;\"><a href=\"#java-method---4-%EB%A9%94%EC%86%8C%EB%93%9C%EC%9D%98-%EC%9E%85%EB%A0%A5\" aria-label=\"java method   4 메소드의 입력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA method - 4. 메소드의 입력</h2>\n</blockquote>\n<p>메소드는 약속이다. main이란 메소드가 있어야 자바는 main이란 메소드를 호출해서 우리가 실행하고 싶은 프로그램을 실행시킨다.</p>\n<ul>\n<li>\n<p>매개변수(parameter) : 메소드 바깥쪽에서 메소드를 사용하는 쪽에서 주입한 값을 메소드 안으로 흘려보내 주는 매개자다.</p>\n</li>\n<li>\n<p>인자(argument): 메소드 안에 주입된 구체적인 값</p>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"java-method---5-메소드의-출력\" style=\"position:relative;\"><a href=\"#java-method---5-%EB%A9%94%EC%86%8C%EB%93%9C%EC%9D%98-%EC%B6%9C%EB%A0%A5\" aria-label=\"java method   5 메소드의 출력 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA method - 5. 메소드의 출력</h2>\n</blockquote>\n<p>자바에서 메소드의 아웃풋의 핵심</p>\n<ol>\n<li>메소드의 return 값 뒤에 있는 값이 그 메소드의 실행 결과가 된다. return은 그 메소드를 종료시키는 역할도 한다.</li>\n<li>메소드는 그 메소드의 return 값이 어떤 데이터 타입인지를 정해야 한다.</li>\n</ol>\n<p>void는 return 값이 없는 메소드를 만들 때 쓴다.</p>\n<p>메소드는 입력값이 있고 그것을 처리해서 출력해 준다. 그리고 출력할 때 사용한 핵심적인 키워드는 return 이고 어떤 데이터 타입을 return 할 것인지를 직접 적어 줘야 한다.</p>\n<blockquote>\n<h2 id=\"java-method---6-메소드의-활용\" style=\"position:relative;\"><a href=\"#java-method---6-%EB%A9%94%EC%86%8C%EB%93%9C%EC%9D%98-%ED%99%9C%EC%9A%A9\" aria-label=\"java method   6 메소드의 활용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA method - 6. 메소드의 활용</h2>\n</blockquote>\n<p>우리가 메소드를 이용하는 걸 통해서 코드의 가독성을 획기적으로 높일 수 있고 우리가 한번 작성한 코드를 메소드를 호출만 하면 되기 때문에 재사용할 수 있고 메소드의 본문에 들어가 있는 내용을 바꾸면 그 메소드를 사용하는 모든 곳에서 동시에 수정이 일어나는 유지보수의 획기적인 편의성을 가질 수 있다.</p>\n<blockquote>\n<h2 id=\"java-method---7-수업을-마치며\" style=\"position:relative;\"><a href=\"#java-method---7-%EC%88%98%EC%97%85%EC%9D%84-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"java method   7 수업을 마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA method - 7. 수업을 마치며</h2>\n</blockquote>\n<p>메소드는 서로 연관된 명령을 그룹핑해서 이름을 붙인 것입니다. 또 클래스는 서로 연관된 메소드와 변수를 그룹핑해서 이름은 붙인 것이다.\r\n클래스를 복제해서 서로 다른 내부적인 상태를 가진 복제본들을 인스턴스라고 한다.\r\n클래스와 인스턴스를 포괄적으로 객체라고 우선 생각해도 된다. 객체를 뼈대로 하는 프로그램을 프로그래밍하는 방법론을 객체지향이라고 한다.</p>\n<blockquote>\n<h2 id=\"java-method---8-부록---access-level-modifiers\" style=\"position:relative;\"><a href=\"#java-method---8-%EB%B6%80%EB%A1%9D---access-level-modifiers\" aria-label=\"java method   8 부록   access level modifiers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA method - 8. 부록 - access level modifiers</h2>\n</blockquote>\n<ul>\n<li>\n<p>private : 자신을 정의한 클래스 안에서만 접근할 수 있다.</p>\n</li>\n<li>\n<p>public : 어떤 클래스에서도 접근이 가능하다.</p>\n</li>\n<li>\n<p>protected : 자신을 정의한 클래스와 그 클래스의 서브 클래스 그리고 같은 패키지 내의 다른 클래스에서 접근할 수 있다.</p>\n</li>\n<li>\n<p>default : 같은 패키지 내에서만 접근이 가능하다.</p>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"java-method---9-부록---static\" style=\"position:relative;\"><a href=\"#java-method---9-%EB%B6%80%EB%A1%9D---static\" aria-label=\"java method   9 부록   static permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA method - 9. 부록 - static</h2>\n</blockquote>\n<ul>\n<li>\n<p>static - class method (메소드가 클래스의 소속일 때는 static이라는 키워드가 있어야 한다.)</p>\n</li>\n<li>\n<p>no static - instance method (메소드가 인스턴스의 소속일 때는 static이라는 키워드를 빼야 한다.)</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"-틀렸거나-잘못된-정보가-있다면-망설임-없이-댓글로-알려주세요\" style=\"position:relative;\"><a href=\"#-%ED%8B%80%EB%A0%B8%EA%B1%B0%EB%82%98-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%A7%9D%EC%84%A4%EC%9E%84-%EC%97%86%EC%9D%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\" 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요!</h2>","excerpt":"생활코딩 JAVA method 강의 수강 1 ~ 9 완강 JAVA method - 1. 수업소개 연관된 코드를 모아서 그룹핑하고 거기에 이름을 붙이면 그것이 함수, 메소드라 한다. 메소드를 이용하면 복잡한 코드를 깔끔하게 정리할 수 있다. 이미 만들어 놓은 메소드를 사용하는 것을 통해서 똑같은 코드를 작성하지 않고 재사용할 수 있게 된다. JAVA method - 3. 메소드의 기본 형식 메소드의 이름으로 코드의 목적을 알릴 수 있고 프로그래밍 언어에서 리팩토링의 핵심적인 요소는 메소드이다. 리팩토링으로 코드를 메소드화 시킬 수 있다. JAVA method - 4. 메소드의 입력 메소드는 약속이다. main이란 메소드가 있어야 자바는 main이란 메소드를 호출해서 우리가 실행하고 싶은 프로그램을 실행시킨다. 매개변수(parameter) : 메소드 바깥쪽에서 메소드를 사용하는 쪽에서 주입한 값을 메소드 안으로 흘려보내 주는 매개자다. 인자(argument): 메소드 안에 주입된 구체…","frontmatter":{"date":"January 03, 2022","title":"22.01.03 TIL","categories":"TIL","author":"95Donguk","emoji":"❗"},"fields":{"slug":"/TIL/22.01.03/"}},"next":{"id":"23f74313-064c-5a21-9798-8d34cdd5f100","html":"<h1 id=\"생활코딩-java-제어문-강의-수강-1--82-완강\" style=\"position:relative;\"><a href=\"#%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9-java-%EC%A0%9C%EC%96%B4%EB%AC%B8-%EA%B0%95%EC%9D%98-%EC%88%98%EA%B0%95-1--82-%EC%99%84%EA%B0%95\" aria-label=\"생활코딩 java 제어문 강의 수강 1  82 완강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생활코딩 JAVA 제어문 강의 수강 1 ~ 8.2 완강</h1>\n<hr>\n<blockquote>\n<h2 id=\"java-제어문---5--vs-equals\" style=\"position:relative;\"><a href=\"#java-%EC%A0%9C%EC%96%B4%EB%AC%B8---5--vs-equals\" aria-label=\"java 제어문   5  vs equals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 제어문 - 5. == VS equals</h2>\n</blockquote>\n<p>데이터 타입에는 더 이상 쪼갤 수 없는 원시(primitive) 데이터 타입과 비원시(non primitive) 데이터 타입으로 나눌 수 있는데 원시 데이터 타입은 변수들이 서로 같은 값을 가지고 있으면 그 값이 존재하는 주소를 가리키고 있지만 비원시 데이터 타입은 서로 같은 값을 가지고 있어도 값이 각각의 다른 주소에 저장이 된다. 동등비교연산자는 서로의 값이 같은 주소에 위치하는지 확인하는 연산자이고 .equals() 는 같은 값인지 비교 확인하는 메소드이다. 결론은 서로 같은 값을 가졌는지 확인하고자 한다면 원시 데이터타입은 동등비교연산자를 사용해도 무방하나 비원시 데이터타입은 .equals() 메소드를 사용하는 것이 좋다.</p>\n<ul>\n<li>\n<p>원시데이터 : boolean, int, double, short, long, float, char</p>\n</li>\n<li>\n<p>비원시데이터 : String, Array, Date, File 등등</p>\n</li>\n<li>\n<p>구분하는 이유는 자바가 원시 데이터 타입과 그렇지 않은 것들을 차별한다.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"-틀렸거나-잘못된-정보가-있다면-망설임-없이-댓글로-알려주세요\" style=\"position:relative;\"><a href=\"#-%ED%8B%80%EB%A0%B8%EA%B1%B0%EB%82%98-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%A7%9D%EC%84%A4%EC%9E%84-%EC%97%86%EC%9D%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\" 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요!</h2>","frontmatter":{"date":"December 20, 2021","title":"21.12.20 TIL","categories":"TIL","author":"95Donguk","emoji":"❗"},"fields":{"slug":"/TIL/21.12.20/"}},"prev":{"id":"637f78ef-59d7-5996-a201-a8362e09650c","html":"<h1 id=\"생활코딩-java-객체지향-프로그래밍-강의-수강-1--9-완강\" style=\"position:relative;\"><a href=\"#%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9-java-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EA%B0%95%EC%9D%98-%EC%88%98%EA%B0%95-1--9-%EC%99%84%EA%B0%95\" aria-label=\"생활코딩 java 객체지향 프로그래밍 강의 수강 1  9 완강 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생활코딩 JAVA 객체지향 프로그래밍 강의 수강 1 ~ 9 완강</h1>\n<hr>\n<blockquote>\n<h2 id=\"java-객체지향-프로그래밍---1-수업소개\" style=\"position:relative;\"><a href=\"#java-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D---1-%EC%88%98%EC%97%85%EC%86%8C%EA%B0%9C\" aria-label=\"java 객체지향 프로그래밍   1 수업소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 객체지향 프로그래밍 - 1. 수업소개</h2>\n</blockquote>\n<p>method를 다른 컴퓨터 언어에서는 function, subroutine, procedural이라고 부른다.\r\n한국어로는 절차 지향적 프로그래밍, 영어로는 procedural programming이라고 불리는 프로그래밍의 패러다임은 procedure 즉 자바에서는 메소드라고 불리는 것을 이용해서 프로그램을 정리 정돈하는 프로그래밍기법이라고 할 수 있다. 메소드를 이용해서 작은 부품을 만들고 이것을 결합해서 더 큰 프로그램을 만들어 가는 테크닉이 procedural programming이다. 대표적인 언어는 C이다.</p>\n<p>클래스를 중심으로 프로그램의 구조를 만들어가는 컴퓨터 프로그래밍 방법론을 객체지향 프로그래밍, 또 이런 방법론을 언어 차원에서 제공하는 언어들을 객체지향 언어라고 한다.</p>\n<blockquote>\n<h2 id=\"java-객체지향-프로그래밍---2-남의-클래스--남의-인스턴스\" style=\"position:relative;\"><a href=\"#java-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D---2-%EB%82%A8%EC%9D%98-%ED%81%B4%EB%9E%98%EC%8A%A4--%EB%82%A8%EC%9D%98-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4\" aria-label=\"java 객체지향 프로그래밍   2 남의 클래스  남의 인스턴스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 객체지향 프로그래밍 - 2. 남의 클래스 &#x26; 남의 인스턴스</h2>\n</blockquote>\n<p>Math라는 클래스가 있고 그 안에는 PI라는 변수, floor, ceil과 같은 메소드들도 있다. 코드가 많아짐에 따라서 서로 연관된 같은 주제를 가지고 있는 변수와 메소드를 그룹핑한 껍데기가 클래스이다. 긴 맥락을 가지고 작업해야 하는 그러한 작업인 경우에는 우리가 클래스를 직접 사용하는 것이 아니라 클래스를 복제본으로 만들어서 제어한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">// class : System, Math, FileWriter</span>\r\n        <span class=\"token comment\">// instance : f1, f2</span>\r\n         \r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span>PI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n         \r\n        <span class=\"token class-name\">FileWriter</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        f1<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        f1<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" Java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n         \r\n         \r\n        <span class=\"token class-name\">FileWriter</span> f2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data2.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        f2<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hola\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        f2<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" Java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        f2<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n         \r\n        f1<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        f1<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<h2 id=\"java-객체지향-프로그래밍---42-클래스---형식\" style=\"position:relative;\"><a href=\"#java-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D---42-%ED%81%B4%EB%9E%98%EC%8A%A4---%ED%98%95%EC%8B%9D\" aria-label=\"java 객체지향 프로그래밍   42 클래스   형식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 객체지향 프로그래밍 - 4.2. 클래스 - 형식</h2>\n</blockquote>\n<p>하나의 파일 안에서 클래스를 여러 개 만들면 그 각각의 클래스가 파일로서 존재하게 된다.\r\n하나의 거대한 자바 파일로 애플리케이션을 만들 수도 있지만, 그 기능에 따라 파일로 적당히 분산하여 소프트웨어를 만든다면 이거 또한 정리정돈의 효과를 가진다.</p>\n<blockquote>\n<h2 id=\"java-객체지향-프로그래밍---6-static\" style=\"position:relative;\"><a href=\"#java-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D---6-static\" aria-label=\"java 객체지향 프로그래밍   6 static permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 객체지향 프로그래밍 - 6. static</h2>\n</blockquote>\n<p>클래스를 통해서 직접 인스턴스 변수에 접근하는 건 금지되어 있다. 또 인스턴스 메소드에 접근하는 것도 금지되어 있다. 인스턴스는 클래스의 여러 가지 멤버들을 복제해 오는데 static이라는 키워드가 붙은 클래스 변수는 인스턴스에 실제 값이 존재하지 않고 클래스를 가리키고 있고 클래스에 static이라는 키워드가 없는 변수는 인스턴스 변수로 생성되면서 만약에 클래스의 값도 세팅되어 있다면 그 값까지 복제가 된다. 그리고 클래스에 있는 변수와 인스턴스에 있는 변수는 서로 링크 걸려 있지 않기 때문에 인스턴스에서 변수의 값은 바꾼다고 해도 클래스의 변수의 값은 바뀌지 않는다. 하지만 static이라는 키워드가 붙은 변수는 인스턴스에서 바꾸면 클래스에 있는 변수도 바뀌고 반대로 클래스에 있는 변수가 바뀌면 인스턴스에서도 변수가 바뀐다. 메소드도 마찬가지로 static이라는 키워드가 붙은 메소드는 클래스의 메소드를 참조하는 것이고 static이라는 키워드가 없는 메소드는 인스턴스가 메소드를 복제하여 서로 독립된 존재가 된다.(그림 참조)</p>\n<p><img src=\"/5fce3667f32025b768b70d5b91e6c46b/JAVA_OOP_6.png\" alt=\"JAVA_OOP_6.PNG\"></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> classVar <span class=\"token operator\">=</span> <span class=\"token string\">\"I class var\"</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> instanceVar <span class=\"token operator\">=</span> <span class=\"token string\">\"I instance var\"</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">classMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>classVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\r\n<span class=\"token comment\">//      System.out.println(instanceVar); // Error</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">instanceMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>classVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>instanceVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StaticApp</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>classVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\r\n<span class=\"token comment\">//      System.out.println(Foo.instanceVar); // Error</span>\r\n        <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">classMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\r\n<span class=\"token comment\">//      Foo.instanceMethod(); // Error</span>\r\n         \r\n        <span class=\"token class-name\">Foo</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">Foo</span> f2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    \r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">.</span>classVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I class var</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">.</span>instanceVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I instance var</span>\r\n     \r\n        f1<span class=\"token punctuation\">.</span>classVar <span class=\"token operator\">=</span> <span class=\"token string\">\"changed by f1\"</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>classVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// changed by f1</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">.</span>classVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// changed by f1</span>\r\n    \r\n        f1<span class=\"token punctuation\">.</span>instanceVar <span class=\"token operator\">=</span> <span class=\"token string\">\"changed by f1\"</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">.</span>instanceVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// changed by f1</span>\r\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">.</span>instanceVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// I instance var</span>\r\n    <span class=\"token punctuation\">}</span>\r\n \r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>중요 : 클래스의 변수를 바꾸면 모든 인스턴스에 변수의 값이 바뀐다. 또 인스턴스에서 클래스 변수를 바꿀 수도 있는데 그렇게 되면 클래스의 변수가 바뀌고 그 클래스 변수를 사용하고 있는 모든 인스턴스의 클래스 변수의 값도 바뀐다.</li>\n</ul>\n<p>결론은 static은 클래스 소속, static이 없는 것은 인스턴스 소속이다.</p>\n<blockquote>\n<h2 id=\"java-객체지향-프로그래밍---7-생성자와-this\" style=\"position:relative;\"><a href=\"#java-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D---7-%EC%83%9D%EC%84%B1%EC%9E%90%EC%99%80-this\" aria-label=\"java 객체지향 프로그래밍   7 생성자와 this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 객체지향 프로그래밍 - 7. 생성자와 this</h2>\n</blockquote>\n<p>인스턴스가 생성될 때 반드시 처리해야 할 어떠한 작업이 있을 것인데 바로 초기에 주입할 필요가 있는 값을 전달하거나 최초로 꼭 실행해야 할 작업을 수행하고 싶을 때 바로 생성자라는 것을 이용해서 문제를 해결할 수 있다. 생성자는 클래스의 이름과 똑같은 메소드를 정의하면 되고 static이나 return 데이터 타입 등은 지정하지 않는다. this라는 특수한 키워드는 그 클래스가 인스턴스화 되었을 때의 인스턴스를 가리키는 이름이다.</p>\n<blockquote>\n<h2 id=\"java-객체지향-프로그래밍---9-수업을-마치며\" style=\"position:relative;\"><a href=\"#java-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D---9-%EC%88%98%EC%97%85%EC%9D%84-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"java 객체지향 프로그래밍   9 수업을 마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA 객체지향 프로그래밍 - 9. 수업을 마치며</h2>\n</blockquote>\n<p>차후에 공부해야 할 주제 : 상속(Inheritance), 인터페이스(Interface), 패키지(Package)</p>\n<hr>\n<h2 id=\"-틀렸거나-잘못된-정보가-있다면-망설임-없이-댓글로-알려주세요\" style=\"position:relative;\"><a href=\"#-%ED%8B%80%EB%A0%B8%EA%B1%B0%EB%82%98-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%A0%95%EB%B3%B4%EA%B0%80-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EB%A7%9D%EC%84%A4%EC%9E%84-%EC%97%86%EC%9D%B4-%EB%8C%93%EA%B8%80%EB%A1%9C-%EC%95%8C%EB%A0%A4%EC%A3%BC%EC%84%B8%EC%9A%94\" aria-label=\" 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💡 틀렸거나 잘못된 정보가 있다면 망설임 없이 댓글로 알려주세요!</h2>","frontmatter":{"date":"January 04, 2022","title":"22.01.04 TIL","categories":"TIL","author":"95Donguk","emoji":"❗"},"fields":{"slug":"/TIL/22.01.04/22.01.04/"}},"site":{"siteMetadata":{"siteUrl":"https://95donguk.github.io","comments":{"utterances":{"repo":"95Donguk/95Donguk.github.io"}}}}},"pageContext":{"slug":"/TIL/22.01.03/","nextSlug":"/TIL/21.12.20/","prevSlug":"/TIL/22.01.04/22.01.04/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}